name: "Docker build & push"

on:
  workflow_call:
    inputs:
      sha:
        required: true
        type: string
      branch_name:
        required: true
        type: string
    outputs:
      image_version:
        description: "Docker tag"
        value: ${{ jobs.docker_build_and_push.outputs.image_version }}
      pretty_branch_name:
        description: "Pretty Branch Name"
        value: ${{ jobs.docker_build_and_push.outputs.pretty_branch_name }}

env:
  DOCKER_CLI_EXPERIMENTAL: enabled
  IMAGE_NAME: "${{ vars.DOCKERHUB_ORG }}/adala"
  DOCKER_IMAGE_TAG_CHECK_NAME: "Docker image tag"
  POETRY_VERSION: 2.1.4

jobs:
  docker_build_and_push:
    name: "Docker image"
    timeout-minutes: 15
    runs-on: ubuntu-latest
    outputs:
      image_version: ${{ steps.version.outputs.image_version }}
      pretty_branch_name: ${{ steps.version.outputs.pretty_branch_name }}
    steps:
      - uses: hmarr/debug-action@v3.0.0

      - name: Check user's membership
        uses: actions/github-script@v7
        id: actor-membership
        env:
          ACTOR: ${{ github.actor }}
        with:
          github-token: ${{ secrets.GIT_PAT }}
          script: |
            const { repo, owner } = context.repo;
            const actor = process.env.ACTOR;
            const { data: membership } = await github.rest.orgs.getMembershipForUser({
              org: owner,
              username: actor,
            });
            core.setOutput("state", membership.state);
            core.setOutput("active", membership.state == "active");

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
          ref: ${{ inputs.sha }}
          fetch-depth: 0

      - name: Calculate version
        id: version
        env:
          BRANCH_NAME: ${{ inputs.branch_name }}
        run: |
          set -x
          pretty_branch_name="$(echo -n "${BRANCH_NAME#refs/heads/}" | sed -E 's#[/_\.-]+#-#g' | tr '[:upper:]' '[:lower:]' | cut -c1-25 | sed -E 's#-$##g')"
          echo "pretty_branch_name=${pretty_branch_name}" >> "${GITHUB_OUTPUT}"
          current_time="$(date +'%Y%m%d.%H%M%S')"
          branch="-${pretty_branch_name}"
          short_sha="$(git rev-parse --short HEAD)"
          long_sha="$(git rev-parse HEAD)"
          echo "sha=$long_sha" >> $GITHUB_OUTPUT
          short_sha_length="$(echo $short_sha | awk '{print length}')"
          current_time_length="$(echo $current_time | awk '{print length}')"
          version="${current_time}$(echo $branch | cut -c1-$((50 - short_sha_length - current_time_length)))-${short_sha}"
          echo "image_version=$version" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Login to DockerHub
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.revision=${{ inputs.sha }}
          tags: |
            type=raw,value=${{ steps.version.outputs.image_version }}
            type=raw,value=${{ steps.version.outputs.pretty_branch_name }}

      - name: Push Docker image
        uses: docker/build-push-action@v6.18.0
        id: docker_build_and_push
        with:
          context: .
          file: Dockerfile.app
          push: ${{ steps.actor-membership.outputs.active }}
          platforms: linux/amd64,linux/arm64
          sbom: true
          provenance: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            POETRY_VERSION=${{ env.POETRY_VERSION }}

      - name: Create Docker image tag Check
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner } = context.repo;
            const details = {
              "branch": "${{ inputs.branch_name }}",
              "pretty_branch_name": "${{ steps.version.outputs.pretty_branch_name }}",
              "image_version": "${{ steps.version.outputs.image_version }}",
              "sha": "${{ steps.version.outputs.sha }}"
            }
            const { data: check } = await github.rest.checks.create({
              owner,
              repo,
              name: '${{ env.DOCKER_IMAGE_TAG_CHECK_NAME }}',
              head_sha: '${{ steps.version.outputs.sha }}',
              status: 'in_progress',
              output: {
                title: '${{ env.DOCKER_IMAGE_TAG_CHECK_NAME }}',
                summary: JSON.stringify(details)
              }
            });
            await github.rest.checks.update({
              owner,
              repo,
              check_run_id: check.id,
              status: 'completed',
              conclusion: 'success'
            });
