name: "ArgoCD: Scale Application"

on:
  workflow_call:
    inputs:
      replicas:
        required: true
        type: string
      branch_name:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      replicas:
        description: 'Replicas'
        required: true
        type: string
      branch_name:
        description: 'Branch name'
        required: true
        type: string
  pull_request_target:
    types:
      - converted_to_draft
    branches:
      - master
      - '**'

env:
  INFRA_REPO: "HumanSignal/infra"
  APP_BASE_NAME: "adala"
  NAMESPACE: "prompt"
  DOMAIN: "dev.heartex.com"
  TEMPLATE_DIR: "vars/aws/dev.heartex.com/k8s/prompt/templates/adala"
  APPS_DIR: "vars/aws/dev.heartex.com/k8s/prompt"
  REPLICA_COUNT_VALUES_YAML_KEY: ".*.deployment.replicaCount"

jobs:
  scale:
    if: github.event.pull_request.head.repo.fork == false
    permissions:
      contents: read
      deployments: write
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - uses: hmarr/debug-action@v3.0.0

      - name: Get GitHub user details
        id: get-github-user
        uses: actions/github-script@v7
        env:
          ACTOR_USERNAME: ${{ github.event.sender.login }}
        with:
          github-token: ${{ secrets.GIT_PAT }}
          script: |
            const actor_username = process.env.ACTOR_USERNAME;
            
            let user_name = 'robot-ci-heartex';
            let user_email = 'robot-ci-heartex@users.noreply.github.com';
            
            try {
              const {data: user} = await github.rest.users.getByUsername({
                username: actor_username,
              });
              user_name = user.login;
              user_email = user.email;
            } catch (e) {
              console.log(e)
            }
            
            core.setOutput('user_name', user_name);
            core.setOutput('user_email', user_email);

      - name: Configure git
        shell: bash
        run: |
          set -xeuo pipefail
          git config --global user.name '${{ steps.get-github-user.outputs.user_name }}'
          git config --global user.email '${{ steps.get-github-user.outputs.user_email }}'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ env.INFRA_REPO }}
          token: ${{ secrets.GIT_PAT }}
          fetch-depth: 1

      - name: Commit
        shell: bash
        env:
          REPLICA_COUNT: ${{ inputs.replicas }}
          BRANCH_NAME: ${{ inputs.branch_name || github.event.pull_request.head.ref || github.ref_name }}
        run: |
          set -xeuo pipefail
          
          pretty_branch_name="$(echo -n "${BRANCH_NAME#refs/heads/}" | sed 's#/#-#g' | sed 's#_#-#g'| sed 's#\.#-#g' | tr '[:upper:]' '[:lower:]')"
          
          APP_NAME="${pretty_branch_name}-${APP_BASE_NAME}"
          APP_DIR="${APPS_DIR}/${APP_NAME}"
          APP_VALUES_FILE="${APP_DIR}/values.yaml"
          
          if [[ "${{ github.event.action }}" = "converted_to_draft" ]]; then
            REPLICA_COUNT=0
          fi
          
          yq e --inplace "${REPLICA_COUNT_VALUES_YAML_KEY} |= ${REPLICA_COUNT}" "${APP_VALUES_FILE}"
          
          git add "${APP_DIR}"
          git status
          git commit -m "${DOMAIN}: Downscale ${APP_NAME}@${NAMESPACE} to 0" -m 'Workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'

      - name: Push
        id: push
        shell: bash
        run: |
          set -xeuo pipefail

          attempt=0
          max_attempts=5
          while ! git push; do
            attempt=$((attempt+1))
            if [ $attempt -ge $max_attempts ]; then
              echo "Max attempts reached. Exiting."
              exit 1
            fi
            sleep_time=$((RANDOM % 10 + 1))
            echo "Push failed. Attempting retry (${attempt}/${max_attempts}) in ${sleep_time} seconds..."
            sleep $sleep_time
            git pull --rebase
          done

          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Comment Pull Request
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ github.event.number }}
          COMMIT_SHA: ${{ steps.push.outputs.commit_sha }}
        with:
          github-token: ${{ secrets.GIT_PAT }}
          script: |
            const { repo, owner } = context.repo;
            const [infraOwner, infraRepo] = process.env.INFRA_REPO.split('/');
            const prNumber = process.env.PR_NUMBER;
            const commit_sha = process.env.COMMIT_SHA;
            
            if (prNumber && commit_sha) {
              const { data: commit } = await github.rest.git.getCommit({
                owner: infraOwner,
                repo: infraRepo,
                commit_sha: commit_sha,
              });
              await github.rest.issues.createComment({
                owner: owner,
                repo: repo,
                issue_number: prNumber,
                body: `Commit ${commit.html_url} is created.`,
              });
            }

      - name: "GitHub deployment: Deactivate"
        id: github-deployment-deactivate
        uses: bobheadxi/deployments@v1
        with:
          step: deactivate-env
          token: ${{ secrets.GIT_PAT }}
          env: ${{ inputs.branch_name || github.event.pull_request.head.ref || github.ref_name }}
          desc: "Environment was scaled down to 0"
