name: "Build PYPI"

on:
  workflow_call:
    inputs:
      version:
        description: 'Version'
        type: string
        required: true
      ref:
        description: 'Ref'
        type: string
        required: true
      upload_to_pypi:
        description: "Upload to PyPi"
        type: boolean
        required: false
      release-id:
        description: "Attach Artifact to Release"
        type: string
        required: false
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        type: string
        required: true
      ref:
        description: 'Ref'
        type: string
        required: true
      upload_to_pypi:
        description: "Upload to PyPi"
        type: boolean
        default: false
        required: false
      release-id:
        description: "Attach Artifact to Release"
        type: string
        required: false

env:
  PYTHON_VERSION_FILE: "pyproject.toml"

jobs:
  ReleaseNotification:
    name: "PyPI"
    runs-on: ubuntu-latest
    steps:
      - uses: hmarr/debug-action@v2.1.0

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Manage version
        env:
          PROVIDED_VERSION: ${{ inputs.version }}
        run: |
          set -x
          version=$(sed "s/^v//g" <<< ${PROVIDED_VERSION})
          sed -i "s/^version[ ]*=.*/version = \"${version}\"/g" ${{ env.PYTHON_VERSION_FILE }}

      - name: Set up PDM
        uses: pdm-project/setup-pdm@v3
        with:
          python-version: '3.11'
          cache: true

      - name: Install dependencies
        run: |
          pdm install --prod

      - name: Package
        run: pdm build

      - name: Upload to PYPI
        if: inputs.upload_to_pypi
        env:
          PDM_PUBLISH_USERNAME: __token__
          PDM_PUBLISH_PASSWORD: ${{ secrets.PYPI_APIKEY }}
        run: pdm publish --no-build

      - name: Attach artifacts to release
        if: inputs.release-id
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GIT_PAT }}
          script: |
            const { repo, owner } = context.repo;
            const fs = require('fs');
            const release_id = '${{ inputs.release-id }}';
            for (let file of await fs.readdirSync('./dist/')) {
               console.log('uploadReleaseAsset', file);
               await github.rest.repos.uploadReleaseAsset({
                  owner,
                  repo,
                  release_id: release_id,
                  name: file,
                  data: await fs.readFileSync(`./dist/${file}`)
               });
            }

      - name: Upload to artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Dist
          path: dist/
