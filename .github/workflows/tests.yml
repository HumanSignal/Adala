name: pytests
on:
  push:
    branches:
      - master
    paths:
      - 'adala/**'
      - 'tests/**'
      - '.github/workflows/tests.yml'
      - '**/requirements**'
    tags-ignore:
      - '**'
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
    branches:
      - master
      - 'release/**'
  workflow_dispatch:

env:
  OPENAI_API_KEY: test

jobs:
  run_black:
    name: Code formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up poetry
        uses: snok/install-poetry@v1
        with:
          python-version: '3.11'
          cache: true

      - name: Install Python dependencies
        run: poetry install

      - name: Run black
        run: poetry run pytest --black .

  run_pytest:
    name: "pytest ${{ matrix.os }} | ${{ matrix.python-version }}"
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - uses: actions/checkout@v4

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python-version }}"

      - name: Set up poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v4
        with:
          path: ~/.cache
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Install app
        run: poetry install --no-interaction

      - name: Run tests without coverage
        if: ${{ matrix.os != 'ubuntu-latest' || matrix.python-version != '3.11' }}
        run: |
          source $VENV
          cd tests/
          poetry run pytest -vv

      - name: Run tests with coverage
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' }}
        run: |
          source $VENV
          cd tests/
          poetry run pytest --cov=. --cov-report=xml -vv

      - name: Upload to Codecov
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' }}
        uses: codecov/codecov-action@v4.1.0
        with:
          files: tests/coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
