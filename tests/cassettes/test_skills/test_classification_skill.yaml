interactions:
- request:
    body: '{"messages": [{"role": "user", "content": "Hey, how''s it going?"}], "model":
      "gpt-4-turbo", "max_tokens": 1000, "seed": 47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '143'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//VJExT8MwEIX3/IrDC0uD3DRSoAsrqCAECwNCletcElPHZ+yLSoX635HT
        0MLi4X33nt6dvzMAYWqxBKE7xbr3Nr9h3a3krjWxepK7L/kZty/P5mX/+Lm6fhCz5KDNB2r+dV1p
        6r1FNuSOWAdUjCl1XhULWS6ui2IEPdVok631nJc5D2FDeSGLMpdlLm8md0dGYxRLeMsAAL7HN/V0
        NX6JJcjZr9JjjKpFsTwNAYhANilCxWgiK8didoaaHKMbq9+htXQB95c9dBgQmKBD62FPwxW8dopB
        Kwf3cMxJMuwMd8BUq/3t39CAzRBVWswN1k764dTSUusDbeLET3pjnIndOqCK5FKjyOTFSA8ZwPt4
        jeHfgsIH6j2vmbboUuC8PMaJ8x/8gdUEmVjZs76YZ1M/EfeRsV83xrUYfDDH0zR+rasKZVWX2Ijs
        kP0AAAD//wMAMw/OESgCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83b31fa1a08ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:17:03 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        path=/; expires=Wed, 07-Aug-24 15:47:03 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '1217'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '500'
      x-ratelimit-limit-tokens:
      - '30000'
      x-ratelimit-remaining-requests:
      - '499'
      x-ratelimit-remaining-tokens:
      - '28994'
      x-ratelimit-reset-requests:
      - 120ms
      x-ratelimit-reset-tokens:
      - 2.012s
      x-request-id:
      - req_2e96d9c47211c0c42fd18f1ec6687e14
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Hey, how''s it going?"}], "model":
      "gpt-3.5-turbo", "max_tokens": 1000, "seed": 47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '145'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SRQU/jMBCF7/kVgy9c0qptWtj2shJI0AqWC9JeVqhynWlscDzGntCtUP87shva
        3UsO7/MbvffyWQAIU4sFCKUlq9bbwZyV/nVb3VzdLeXd6vH5YTe/97ur94fq6fetKJODNq+o+Ns1
        VNR6i2zIHbEKKBnT1fH1pBpNqx+TaQYt1WiTrfE8qIazAXdhQ4PReDLrnZqMwigW8KcAAPjM35TR
        1fhXLGBUfistxigbFIvTIwARyCZFyBhNZOlYlGeoyDG6HHuJ1tIFrC5beO0ig4TUoWMM4AM1QbYl
        RIIV1OQuGbT8QNgiWuOaWMKm42zVGBCYQKP1sKcOdoY1SLdnbVyTFYdYD2FJO1DSwQqOwTJiquX+
        578BA267KNNArrO21w+nxpYaH2gTe37St8aZqNcBZSSX2kUmLzI9FAAvednuv7GED9R6XjO9oUsH
        x9PjOXH+l2dYzXrIxNKe9em86POJuI+M7XprXIPBB5Nnzi0OxRcAAAD//wMA0EbWbGUCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83b3acdcc08ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:17:04 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '800'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9998'
      x-ratelimit-remaining-tokens:
      - '198993'
      x-ratelimit-reset-requests:
      - 9.127s
      x-ratelimit-reset-tokens:
      - 301ms
      x-request-id:
      - req_922a0c6c0792ff5365db109bc6628808
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify input text."}, {"role":
      "user", "content": "Text: Apple product with a sleek design."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '817'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFJNj5swEL3zK6w5J6uQBKXLsVWrdlfbrrqXXTUVcsxA3LU9rj1UjaL8
        9wpIgI3KAVnzeB9+wzERAnQJuQC1l6ysN/NbVvuvj5V5+h3x/ilL39+mn/W6iXK9+xRg1jJo9wsV
        X1g3iqw3yJpcD6uAkrFVTTfL1WK9erfMOsBSiaal1Z7nq5tszk3Y0XyRLrMzc09aYYRc/EiEEOLY
        vduMrsS/kIvF7DKxGKOsEfLhIyEgkGknIGPUkaVjmI2gIsfo2tiuMWYCMJEplDRmNO6f4+Q8FiWN
        KfxBWVt/uEsz9fL9z/OjpIfnzRdHE79e+uC7QFXj1FDQBB/m+ZWZEOCk7bjfGvYNXzGFABnqxqLj
        NjUct+ADlloxloWSjDWFwxbyLXw0qDiQ0ypu4QRvVE7J/84/J90ErJoozbm08/w0bMFQ7QPt4lWp
        UGmn474IKGN3OYhMvvdufToHaN4sEHwg67lgekXXCqbppteD8Qcb0QvGxNJMSMt1cg4I8RAZbVFp
        V2PwQQ+7T07JPwAAAP//AwAmSpUv+gIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83b418f8208ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:17:05 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '451'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9998'
      x-ratelimit-remaining-tokens:
      - '198982'
      x-ratelimit-reset-requests:
      - 16.696s
      x-ratelimit-reset-tokens:
      - 305ms
      x-request-id:
      - req_5c29fc0feaebe5da7a538ae1925ad93d
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify input text."}, {"role":
      "user", "content": "Text: Laptop stand for the kitchen."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '812'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFJdb9MwFH3Pr7DuczualnYsb6BpqsREQQgErFPkureJwfY19jWjqvrf
        UdKsySr8EFn3+Hzk2IdMCNBbKASoWrKy3oxvWNUr9fWTzb/w27SkhXm6f18v8fY62j8wahi0+YmK
        n1lXiqw3yJrcCVYBJWOjml9PZ5PXszfTRQtY2qJpaJXn8exqPuYUNjSe5NN5x6xJK4xQiIdMCCEO
        7bfJ6Lb4FwoxGT1PLMYoK4TifEgICGSaCcgYdWTpGEY9qMgxuia2S8YMACYypZLG9MandRjs+6Kk
        MeX9h/Dus9Z6lX//+G21svHHk6V093vgd5Le+zbQLjl1LmiAn+fFhZkQ4KRtuavEPvEFUwiQoUoW
        HTep4bAGH3CrFeO2VJKxorBfQ7GGuxSc5hTw1ZIsiltUFNZwhBdyx+x/+8dBSQF3KUrTtdfNj+fr
        MFT5QJt40S7stNOxLgPK2P4lRCZ/8m58WgdIL24SfCDruWT6ha4RzPPFSQ/6l9ajNx3GxNIMSNN5
        1gWEuI+MttxpV2HwQZ8fQXbM/gEAAP//AwC8Q0tIAwMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83b45fd4f08ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:17:06 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '505'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9997'
      x-ratelimit-remaining-tokens:
      - '198983'
      x-ratelimit-reset-requests:
      - 24.614s
      x-ratelimit-reset-tokens:
      - 304ms
      x-request-id:
      - req_7e9efe2907eee5057540b762518a59a9
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify input text."}, {"role":
      "user", "content": "Text: Chocolate leather boots."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '807'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSyW7bMBC96yuIOdup5SWNdU0bIIcgcdAWTepCoKmxxITiEOQIjmv43wstkRUj
        OgjEe3qLhnOIhACdQSJAFZJV6cx4yaq4v9s9PunFpam+4e3q1+7mx2q5Mv98AaNaQZsXVPyuulBU
        OoOsyba08igZa9f463Q2mc+uppcNUVKGppbljsezi8WYK7+h8SSeLjplQVphgET8iYQQ4tC86442
        wzdIxGT0jpQYgswRkv4jIcCTqRGQIejA0jKMTqQiy2jr2rYyZkAwkUmVNOYU3D6Hwfk0KGlM+uB+
        f9/L+Onu4W3x89m8Wubl7jHHQV5rvXdNoW1lVT+gAd/jyVmYEGBl2WjvK3YVnymFAOnzqkTLdWs4
        rMF5zLRizFIlGXPy+zUka7gh4h1K/+XaEBfa5ms4wgevY/TZ+e9gQh63VZCmG12HH/u7MJQ7T5tw
        NlrYaqtDkXqUoflFCEyuza5zmgSoPlwjOE+l45TpFW1tGMfz1g9OazZgu4UAJpZmgE/nUdcQwj4w
        lulW2xy987pfgegY/QcAAP//AwDmPvkkAQMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83b4b1cbf08ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:17:07 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '725'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9996'
      x-ratelimit-remaining-tokens:
      - '198985'
      x-ratelimit-reset-requests:
      - 32.452s
      x-ratelimit-reset-tokens:
      - 304ms
      x-request-id:
      - req_81cfd3439ba623e390eb08d78b345a32
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify input text."}, {"role":
      "user", "content": "Text: Wooden cream for surfaces."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '809'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSXW/TMBR9z6+w7nM7+klpXhkwCaohhEDriiLXuU28Or7GvkZ0Vf87StKlWYUf
        Iusen48c+5gIATqHVIAqJavKmeGSVfn1SZfL6X59/2d1Zxf0fbXK8cvox3oLg5pB2ydU/MK6UVQ5
        g6zJtrDyKBlr1fFiMh3Npu8miwaoKEdT0wrHw+nNfMjRb2k4Gk/mZ2ZJWmGAVDwmQghxbL51Rpvj
        X0jFaPAyqTAEWSCk3SEhwJOpJyBD0IGlZRhcQEWW0daxbTSmBzCRyZQ05mLcrmNvfylKGpPNxrfv
        f35ez8rf+7ffls+fHuL+A1O+7fm10gfXBNpFq7qCeng3T6/MhAArq4Z7H9lFvmIKAdIXsULLdWo4
        bsB5zLVizDMlGQvyhw2kG/gYvdUcPb65owrFLSryGzjBK7lT8r/9r15JHncxSHNu7zw/dddhqHCe
        tuGqXdhpq0OZeZSh+UsITK71rn0aB4ivbhKcp8pxxrRHWwuOx/NWDy4v7YIuzxgTS9MjTWbJOSCE
        Q2Cssp22BXrndfcIklPyDwAA//8DAEeQjYEDAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83b520e5308ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:17:07 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '253'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9995'
      x-ratelimit-remaining-tokens:
      - '198985'
      x-ratelimit-reset-requests:
      - 39.972s
      x-ratelimit-reset-tokens:
      - 304ms
      x-request-id:
      - req_8a7d2d48d49dce4044cc38181acb75fa
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify input text."}, {"role":
      "user", "content": "Text: Natural finish for your lips."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '812'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSyW7bMBC96yuIOdupljq1dXS6JKcobdoe6kKgqLGsliJZcpjGMPzvhZZIilEe
        BGIe36JHngLGoC4hZSAOnERj5HJD4vCQFdk23vrw68fPxfom2zw/fSof7pyARcvQxS8U9MK6Erox
        EqnWqoeFRU7Yqkbv4iR8m6zjdQc0ukTZ0ipDy+RqtSRvC70Mo3g1MA+6FuggZT8Cxhg7dd82oyrx
        GVIWLl4mDTrHK4R0PMQYWC3bCXDnakdcESwmUGhFqNrYyks5A0hrmQsu5WTcr9NsPxXFpcy/f4v+
        3t++v47DL7fJh+TxD949VZs4m/n10kfTBdp7JcaCZvg4Ty/MGAPFm45778l4umAyBtxWvkFFbWo4
        7cBYLGtBWOaCE1baHneQ7mCL3NPxTYbWacUlu+EWd3CGV3Ln4H/7n7OSLO6943Job5ifx+uQujJW
        F+6iXdjXqnaH3CJ33V+CI21679ancwD/6ibBWN0Yykn/RtUKRtF1rwfTS5vQzYCRJi5npHgVDAHB
        HR1hk+9rVaE1th4fQXAO/gEAAP//AwBNm5RgAwMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83b553acc08ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:17:08 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '575'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9994'
      x-ratelimit-remaining-tokens:
      - '198983'
      x-ratelimit-reset-requests:
      - 48.102s
      x-ratelimit-reset-tokens:
      - 304ms
      x-request-id:
      - req_a0b54bfe26ff7d735f0007e48067d41a
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nText:
      {text}\nCategory: {predicted_category}\n```\n\nHere:\n- \"Text: {text}\" is
      input template,\n- \"{prompt}\" is the LLM prompt,\n- \"Category: {predicted_category}\"
      is the output template.\n\nModel can produce erroneous output if a prompt is
      not well defined. In our collaboration, we\u2019ll work together to refine a
      prompt. The process consists of two main steps:\n\n## Step 1\nI will provide
      you with the current prompt along with prediction examples. Each example contains
      the input text, the final prediction produced by the model, and the user feedback.
      User feedback indicates whether the model prediction is correct or not. Your
      task is to analyze the examples and user feedback, determining whether the existing
      instruction is describing the task reflected by these examples precisely, and
      suggests changes to the prompt to address the incorrect predictions.\n\n## Step
      2\nNext, you will carefully review your reasoning in step 1, integrate the insights
      to refine the prompt, and provide me with the new prompt that improves the model\u2019s
      performance."}, {"role": "assistant", "content": "Sure, I\u2019d be happy to
      help you with this prompt engineering problem. Please provide me with the current
      prompt and the examples with user feedback."}, {"role": "user", "content": "\n##
      Current prompt\nClassify input text.\n\n## Examples\n### Example #0\n\nText:
      Apple product with a sleek design.\n\nCategory: Electronics\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Electronics\"\n\n\n### Example #1\n\nText:
      Laptop stand for the kitchen.\n\nCategory: Furniture/Home Decor\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n### Example
      #2\n\nText: Chocolate leather boots.\n\nCategory: Footwear/Clothing\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Footwear/Clothing\"\n\n\n###
      Example #3\n\nText: Wooden cream for surfaces.\n\nCategory: Furniture/Home Decor\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n###
      Example #4\n\nText: Natural finish for your lips.\n\nCategory: Beauty/Personal
      Care\n\nUser feedback: Prediction is incorrect. Correct answer: \"Beauty/Personal
      Care\"\n\n\n\nSummarize your analysis about incorrect predictions and suggest
      changes to the prompt."}], "model": "gpt-4-turbo", "max_tokens": 1000, "seed":
      47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2845'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7RW32/cNgx+z19BuA8Dgss1TW5Lc29dmnTFuiHrj23AbkhpiT6rkSVDou9yC/K/
        D5Rl+5J2j3sxYImi+JHfR/H+AKAwulhCoWpk1bT26JxV/f42/Fr/9kf35h0v7v7Bd1fbP1/9/mlx
        zcVMTvjyCykeTs2Vb1pLbLzrt1UgZBKvL85OTo8Xpy9PztNG4zVZObZu+WhxxF0o/dHJ8cni6Hhx
        dHyeT9feKIrFEv46AAC4T1+J02m6K5ZwPBtWGooR11QsRyOAIngrKwXGaCKj62POm8o7JpdCf/bs
        GbxyaHfRRPAVvHXKh0CK4TqQNkrwxJVbuU+tdxBoY2hr3Bq4JqA7FMgR2uA3RpOegWHAtiUMEbhG
        TmYJ73diNToEDASouENrdzDciEr5oJN3n052kQJURLpEdTuDsksOA0EkaqJYlQQIjYmd0xQEZzru
        g6wp3zSdMwrlSjAOar9NbgePYFJQkRyTnsMlqnrABLH22z0MCpnWPuwGEKSh3E3ooEFWNcW0sipG
        QC5uKayKMUESxVfA5vCxNhFit15T5KeJkyCrzqW8Cbbs2+7GfEx4GrOuWXJi3GgGFkuypAEjrIqp
        qOJ3NJuvCqmxkOFDHwZpuKjRrSkOxbgOvmlZzN6YDfU4MDNnlv7aYBoMOzAxdgTaUwTnORVLnFhD
        sDVcPyYFhcqHBp2ihCegVHiyUxaD4R2g09B6Ya1BK9U1jim0gbgvr6+epIJUjc7EZg4/+S1tKMwk
        BnJ1uqoPVwAlz+RiF+QywkABjIscukzVyocp4hko76LR1K9V3lqf9ID6Sxe5IcdxKTl6MYfDwwsJ
        vup58hHjLbymqIJpxfHh4RIuv46m53TjheQtKVMZBVj6jmH7mBaOSKfaKCsar3ZzeOsiE2rJBUIZ
        PGpYFRd5G4xrhS90x7NVIUJVvrN6vE0PoW1oBrFTdU+Y8bjcPLkA4zItsG2Db4NBThh0p3hSS4mR
        NAjZOE43eJf5diJJeqU1XA6dJOuj55qk6K1TtkuiHruNNpnZ2ThnTqGDdWc07SWp3CUh98dbSrpN
        II58x4KlwbY1bh2zBsVHTbYV12jN2g2tbqDrkz5TDVANxbkgOhVEH1LhdnAx7iUkVW5euF/b6Xyf
        0m1tVM98SXOU8HOVcp2NtFlrIufQIn0jDwnDlIYp6rRY+s5pTHfKkk7OMttL4i2RA22qigI5fopw
        IQivBpn9MsgM3qenIQHlqRGV5KgySjTLPj8fqQ/v92Dlre1rk1Q+dORer0mYJj0OXUAmu4NAldj3
        3Xa/geQmkEAPFU3pM27j7YYgUFsHjENVxyB8ANSppAgbClKZvq1EphZKqkQhyo9cHFt0+1/9NHdT
        yYpIYGqenz9/Xrn/SVV7jJNYbKcJLiVVwTuj4gyuuuAMd4Ge/+QbgtekfJjBlfe8JQzPL6zn2rj1
        DH4k7Hj3/JpC9A4tXGCgGRCrOXyKvcL2LpZKaWIKjXGD/CJDZTixdAh8Dlc+DDqeAfaYez9lSr5A
        ogbk5fbO7uSdTG+m8v5WDEZeTWLoyQ0/G3mA3RYDpeR/pDtewr3c8LByOS+7JdyPD/jNENZDLsrK
        JcaEXLIsp/x0x28/DkLYNE3d8SxrNyt2aCMNGsdoXJ5LTJMcZgL2pFa7R8x9PCrN9we3QFUXUYZH
        11mb1x/GSdD6dRt8GfP+uF4ZZ2J9EwijdzL1RfZtkXYfDgD+ThNn92iILHr4N+xvyYnD709/6P0V
        06A77S4Wi7zLntFOG+cvjw9yiEXcRabmpjJuLU+36SfQqr1RZ2d0fKYXVBUHDwf/AgAA//8DABo9
        t6SPCwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83b5b1a4508ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:17:30 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '21190'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '500'
      x-ratelimit-limit-tokens:
      - '30000'
      x-ratelimit-remaining-requests:
      - '499'
      x-ratelimit-remaining-tokens:
      - '28366'
      x-ratelimit-reset-requests:
      - 120ms
      x-ratelimit-reset-tokens:
      - 3.268s
      x-request-id:
      - req_14d40208823736da69d634d2a29b5e24
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nText:
      {text}\nCategory: {predicted_category}\n```\n\nHere:\n- \"Text: {text}\" is
      input template,\n- \"{prompt}\" is the LLM prompt,\n- \"Category: {predicted_category}\"
      is the output template.\n\nModel can produce erroneous output if a prompt is
      not well defined. In our collaboration, we\u2019ll work together to refine a
      prompt. The process consists of two main steps:\n\n## Step 1\nI will provide
      you with the current prompt along with prediction examples. Each example contains
      the input text, the final prediction produced by the model, and the user feedback.
      User feedback indicates whether the model prediction is correct or not. Your
      task is to analyze the examples and user feedback, determining whether the existing
      instruction is describing the task reflected by these examples precisely, and
      suggests changes to the prompt to address the incorrect predictions.\n\n## Step
      2\nNext, you will carefully review your reasoning in step 1, integrate the insights
      to refine the prompt, and provide me with the new prompt that improves the model\u2019s
      performance."}, {"role": "assistant", "content": "Sure, I\u2019d be happy to
      help you with this prompt engineering problem. Please provide me with the current
      prompt and the examples with user feedback."}, {"role": "user", "content": "\n##
      Current prompt\nClassify input text.\n\n## Examples\n### Example #0\n\nText:
      Apple product with a sleek design.\n\nCategory: Electronics\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Electronics\"\n\n\n### Example #1\n\nText:
      Laptop stand for the kitchen.\n\nCategory: Furniture/Home Decor\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n### Example
      #2\n\nText: Chocolate leather boots.\n\nCategory: Footwear/Clothing\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Footwear/Clothing\"\n\n\n###
      Example #3\n\nText: Wooden cream for surfaces.\n\nCategory: Furniture/Home Decor\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n###
      Example #4\n\nText: Natural finish for your lips.\n\nCategory: Beauty/Personal
      Care\n\nUser feedback: Prediction is incorrect. Correct answer: \"Beauty/Personal
      Care\"\n\n\n\nSummarize your analysis about incorrect predictions and suggest
      changes to the prompt."}, {"role": "assistant", "content": "### Analysis of
      Incorrect Predictions\n\nUpon reviewing the examples provided, it appears that
      the model''s predictions are actually correct according to the user feedback,
      but there seems to be a misunderstanding or miscommunication in how the feedback
      is presented. Each example shows that the category predicted by the model matches
      the \"correct answer\" provided in the user feedback. This suggests that the
      model is functioning correctly, but the feedback might be incorrectly labeled
      as \"Prediction is incorrect.\"\n\n### Suggested Changes to the Prompt\n\nGiven
      the analysis, the primary issue does not seem to lie with the model''s performance
      but rather with the clarity and potential misinterpretation of the feedback
      mechanism. However, to enhance the prompt and ensure clearer instructions for
      the model, consider the following adjustments:\n\n1. **Clarify the Task Description**:
      Enhance the prompt to be more specific about what the model needs to classify.
      Instead of a broad \"Classify input text,\" it could be more descriptive, such
      as \"Classify the input text into the appropriate product category based on
      its description.\"\n\n2. **Add Examples in the Prompt**: Including examples
      directly in the prompt can guide the model by showing expected input-output
      mappings. This can help in aligning the model''s understanding of categories.\n\n3.
      **Specify Categories**: If there are specific categories into which the texts
      should be classified, listing these in the prompt can help the model understand
      the boundaries and distinctions between different categories.\n\n4. **Feedback
      Mechanism Review**: It might be beneficial to review how feedback is collected
      and presented to ensure it accurately reflects the performance of the model.
      This could involve rephrasing the feedback or adding a verification step before
      concluding that the prediction is incorrect.\n\n### Revised Prompt\n\n```\nClassify
      the input text into the appropriate product category based on its description.
      Categories include Electronics, Furniture/Home Decor, Footwear/Clothing, Beauty/Personal
      Care, etc. Use the description to determine the most fitting category. For example,
      a text describing an item commonly used in cooking might be classified under
      Kitchenware.\n\nText: {text}\nCategory: {predicted_category}\n```\n\nThis revised
      prompt provides clearer instructions and context, which should help in maintaining
      or improving the accuracy of the model''s predictions."}, {"role": "user", "content":
      "\nNow please carefully review your reasoning in Step 1 and help with Step 2:
      refining the prompt.\n\n## Current prompt\nClassify input text.\n\n## Follow
      this guidance to refine the prompt:\n\n1. The new prompt should should describe
      the task precisely, and address the points raised in the user feedback.\n\n2.
      The new prompt should be similar to the current prompt, and only differ in the
      parts that address the issues you identified in Step 1.\n    Example:\n    -
      Current prompt: \"Generate a summary of the input text.\"\n    - New prompt:
      \"Generate a summary of the input text. Pay attention to the original style.\"\n\n3.
      Reply only with the new prompt. Do not include input and output templates in
      the prompt.\n"}], "model": "gpt-4-turbo", "max_tokens": 1000, "seed": 47, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '6102'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2RRwWrbQBC96yuGPUdGttTY8bGlEAJJodBDKcWsViNp09XOsjNKrQb/e1lZsVN6
        2cN7897OvPeaASjbqD0o02sxQ3D5nZh+6L4V7rE6uqH8ehu771+equP9xz/PD+omKah+RiNvqpWh
        ITgUS/5Mm4haMLmut5uyqMrdh2ImBmrQJVkXJK9yGWNN+abYVHlR5cXdou7JGmS1hx8ZAMDr/KY9
        fYNHtYfZa0YGZNYdqv1lCEBFcglRmtmyaC/q5koa8oJ+Xv2TSxPtBNIjWB9GAcGjgPVCYIXBUIxo
        BEKkZjQCRgt2FCeoNWMD5Gdlg2yiDen6NPliG2xW8NnzGBG0MWPUZoJ6AuOI0U2gne289d1/6t9W
        +hkciAUiOnzR/vrt6v0dEduRdcrSj84t+OkSjKMuRKp54S94a73l/hBRM/kUAgsFNbOnDODnXMD4
        T6YqRBqCHIR+oU+G63W5Oxuqa/FXulzqUUKi3XvZ7S5bdlQ8seBwaK3vMIZoz4204WC2Wyy2TYWt
        yk7ZXwAAAP//AwBnq6E1nwIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83be07feb08ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:17:31 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '1562'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '500'
      x-ratelimit-limit-tokens:
      - '30000'
      x-ratelimit-remaining-requests:
      - '499'
      x-ratelimit-remaining-tokens:
      - '27581'
      x-ratelimit-reset-requests:
      - 120ms
      x-ratelimit-reset-tokens:
      - 4.838s
      x-request-id:
      - req_44f8e6e86e175a0ec15046702dde9c9d
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the input text into
      its correct product category based on the description provided. Ensure accuracy
      by closely aligning the description with the most relevant category."}, {"role":
      "user", "content": "Text: Apple product with a sleek design."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '974'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFLbattAEH3XVyzzbAdf4tjRa6idFtqYEmggDmK9Gslbr3aW3VFbY/zv
        RZdIiokexDJH57JndI6EAJ1CLEAdJKvCmfE9qwP5zdf1ar3cvqwn4fHh7wv92YTNcZHDqGLQ/jcq
        fmfdKCqcQdZkG1h5lIyV6nQ5m09u56vFrAYKStFUtNzxeH6zGHPp9zSeTGeLlnkgrTBALF4jIYQ4
        1+8qo03xH8RiMnqfFBiCzBHi7iMhwJOpJiBD0IGlZRj1oCLLaKvYtjRmADCRSZQ0pjdunvPg3Bcl
        jUn089ZuOHt8/hG+re9Wx5+/vj/4La8Gfo30ydWBstKqrqAB3s3jKzMhwMqi5j6V7Eq+YgoB0udl
        gZar1HDegfOYasWYJkoy5uRPO4h38MWgYk9Wq7CDC3xQuUSfnd8G3XjMyiBNW1o7v3RbMJQ7T/tw
        VSpk2upwSDzKUF8OApNrvCuf2gHKDwsE56lwnDAd0VaC09tZowf9D9ajyxZjYmmGpPuoDQjhFBiL
        JNM2R++87nYfXaL/AAAA//8DAAnqaNP6AgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83bedefff08ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:17:33 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '440'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9996'
      x-ratelimit-remaining-tokens:
      - '198942'
      x-ratelimit-reset-requests:
      - 32.326s
      x-ratelimit-reset-tokens:
      - 317ms
      x-request-id:
      - req_87a9d64f498a52a4e8b2eb587ad47230
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the input text into
      its correct product category based on the description provided. Ensure accuracy
      by closely aligning the description with the most relevant category."}, {"role":
      "user", "content": "Text: Laptop stand for the kitchen."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '969'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSXW+bMBR951dY9zmpoEn6weOmpupLu25S1GmZkGMu4MbYln3JFkX575OBAo3G
        A7Lu4Xz4XE4RYyBzSBmIipOorZrfk6js+uZl9b5+/Pbl8HMf3yw3b+u3+Mdmf4BZYJjdOwr6YF0J
        U1uFJI3uYOGQEwbV5PZ6ES8Xd6tFC9QmRxVopaX54mo1p8btzDxOrlc9szJSoIeU/YoYY+zUvkNG
        neNfSFk8+5jU6D0vEdLhI8bAGRUmwL2XnrgmmI2gMJpQh9i6UWoCkDEqE1yp0bh7TpPzWBRXKluK
        Qh6q6pC8PtXP+Ve8f90U8s/3cuLXSR9tG6hotBgKmuDDPL0wYww0r1vuS0O2oQsmY8Bd2dSoKaSG
        0xasw1wKwjwTnLA07riFdAsPCgU5o6XwWzjDJ5Vz9L/z70k3DovGc9WX1s/PwxaUKa0zO39RKhRS
        S19lDrlvLweejO28g0/rAM2nBYJ1praUkdmjDoLJMun0YPzBRvS2x8gQV1PSXdQHBH/0hHVWSF2i
        s04Ou4/O0T8AAAD//wMA4I3cjPoCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83bf22d8608ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:17:33 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '455'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9995'
      x-ratelimit-remaining-tokens:
      - '198945'
      x-ratelimit-reset-requests:
      - 40.274s
      x-ratelimit-reset-tokens:
      - 316ms
      x-request-id:
      - req_7780b5df164c361bd1853e52894b0ae2
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the input text into
      its correct product category based on the description provided. Ensure accuracy
      by closely aligning the description with the most relevant category."}, {"role":
      "user", "content": "Text: Chocolate leather boots."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '964'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFJNj9owEL3nV1hzhi0QECXXarNV1aU9VGW1pYqMMyRuHY9rT7plEf+9
        SsKGLNocIuu9vI+M5xgJATqHRIAqJavKmfGKVflnt/ke322+PZe3n9bzx3D/dXZ/m+qHNYwaBe1+
        oeIX1Y2iyhlkTbajlUfJ2LhOl7N4Mo/fL+YtUVGOppEVjsfxzWLMtd/ReDKdLc7KkrTCAIn4EQkh
        xLF9Nx1tjv8gEZPRC1JhCLJASPqPhABPpkFAhqADS8swupCKLKNtatvamAHBRCZT0phLcPccB+fL
        oKQx2WHzNz+kS6PXS/n5Y7pPn5/q9FHTIK+zPri20L62qh/QgO/x5CpMCLCyarVfanY1XymFAOmL
        ukLLTWs4bsF5zLVizDMlGQvyhy0kW0iJ+Amlf/fBEJfaFls4wSuvU/TW+edgQh73dZDmPLozfurv
        wlDhPO3C1Whhr60OZeZRhvYXITC5LrvJaROgfnWN4DxVjjOm32gbw2m86vzgsmYD9rwQwMTSDPD5
        Kjo3hHAIjFW217ZA77zuVyA6Rf8BAAD//wMAF72kJgEDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83bf68b6608ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:17:34 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '640'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9994'
      x-ratelimit-remaining-tokens:
      - '198946'
      x-ratelimit-reset-requests:
      - 48.206s
      x-ratelimit-reset-tokens:
      - 316ms
      x-request-id:
      - req_a40dff8fc316c85341cdc593daf6b571
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the input text into
      its correct product category based on the description provided. Ensure accuracy
      by closely aligning the description with the most relevant category."}, {"role":
      "user", "content": "Text: Wooden cream for surfaces."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '966'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFJBbtswELzrFcSe7dSOYzjWsRWEHIoWBVoEaB0INLWS2VBcglw2UQ3/
        vZCsWIpRHghih7MznOUxEQJ0CakAdZCsGmfmW1YH/ynT2D5mdcxePn77wfL+Oz2/cpbBrGPQ/jcq
        fmPdKGqcQdZkz7DyKBm7rsvN7Wpxt7pfr3ugoRJNR6sdz1c36zlHv6f5Ynm7HpgH0goDpOJXIoQQ
        x37vPNoSXyEVi9lbpcEQZI2QXi4JAZ5MVwEZgg4sLcNsBBVZRtvZttGYCcBEplDSmFH4vI6T8xiU
        NKZoH/+Ubb4x+stGfn7Iq/zvS8x/apronVu3rjdURasuAU3wSz29EhMCrGx67tfILvIVUwiQvo4N
        Wu5cw3EHzmOpFWNZKMlYk293kO4gj95qjh4/PFCDIkNFfgcneNfulPzv/DQJyWMVgzRDekP9dBmH
        odp52oerdKHSVodD4VGG/pUQmNxZu9PpFSC+myQ4T43jgukZbddweTeMHcafNqLbAWNiaaakbTIY
        hNAGxqaotK3RO68vnyA5Jf8AAAD//wMAHrXHawMDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83bfc5aa408ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:17:35 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '511'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9993'
      x-ratelimit-remaining-tokens:
      - '198945'
      x-ratelimit-reset-requests:
      - 55.924s
      x-ratelimit-reset-tokens:
      - 316ms
      x-request-id:
      - req_c40c2a1f3e490075a463cad78f9499f0
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the input text into
      its correct product category based on the description provided. Ensure accuracy
      by closely aligning the description with the most relevant category."}, {"role":
      "user", "content": "Text: Natural finish for your lips."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '969'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSXU/bMBR9z6+w7nPLGkpomzfWPbCJqUMa08SKIte5SQ2ObdnXE13V/47yQRKq
        +SGy7vH5yLGPEWMgc0gZiD0nUVk1XZHYu3ix1I8Pa/x2X3zVL7++lD+Xq9937hYmNcPsnlHQO+tC
        mMoqJGl0CwuHnLBWjReX89nVfJkkDVCZHFVNKy1N5xfJlILbmeksvkw65t5IgR5S9idijLFj860z
        6hxfIWWzyfukQu95iZD2hxgDZ1Q9Ae699MQ1wWQAhdGEuo6tg1IjgIxRmeBKDcbtOo72Q1Fcqexm
        vfn3d+Ou5/n93ep1uXi4vX6Mw/P3kV8rfbBNoCJo0Rc0wvt5embGGGheNdxNIBvojMkYcFeGCjXV
        qeG4Beswl4IwzwQnLI07bCHdwmfkgQ6ffqDzRnPF1tzhFk7wQe4U/W//NCrJYRE8V1173fzUX4cy
        pXVm58/ahUJq6feZQ+6bvwRPxrbetU/jAOHDTYJ1prKUkXlBXQvGV3GrB8NLG9BVh5EhrkakZBZ1
        AcEfPGGVFVKX6KyT/SOITtEbAAAA//8DAFrQx+YDAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83c0119bf08ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:17:41 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '5728'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9992'
      x-ratelimit-remaining-tokens:
      - '198945'
      x-ratelimit-reset-requests:
      - 1m3.801s
      x-ratelimit-reset-tokens:
      - 316ms
      x-request-id:
      - req_c8f7cd66042128243759581ca1058ba5
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nText:
      {text}\nCategory: {predicted_category}\n```\n\nHere:\n- \"Text: {text}\" is
      input template,\n- \"{prompt}\" is the LLM prompt,\n- \"Category: {predicted_category}\"
      is the output template.\n\nModel can produce erroneous output if a prompt is
      not well defined. In our collaboration, we\u2019ll work together to refine a
      prompt. The process consists of two main steps:\n\n## Step 1\nI will provide
      you with the current prompt along with prediction examples. Each example contains
      the input text, the final prediction produced by the model, and the user feedback.
      User feedback indicates whether the model prediction is correct or not. Your
      task is to analyze the examples and user feedback, determining whether the existing
      instruction is describing the task reflected by these examples precisely, and
      suggests changes to the prompt to address the incorrect predictions.\n\n## Step
      2\nNext, you will carefully review your reasoning in step 1, integrate the insights
      to refine the prompt, and provide me with the new prompt that improves the model\u2019s
      performance."}, {"role": "assistant", "content": "Sure, I\u2019d be happy to
      help you with this prompt engineering problem. Please provide me with the current
      prompt and the examples with user feedback."}, {"role": "user", "content": "\n##
      Current prompt\nClassify the input text into its correct product category based
      on the description provided. Ensure accuracy by closely aligning the description
      with the most relevant category.\n\n## Examples\n### Example #0\n\nText: Apple
      product with a sleek design.\n\nCategory: Electronics\n\nUser feedback: Prediction
      is incorrect. Correct answer: \"Electronics\"\n\n\n### Example #1\n\nText: Laptop
      stand for the kitchen.\n\nCategory: Electronics\n\nUser feedback: Prediction
      is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n### Example #2\n\nText:
      Chocolate leather boots.\n\nCategory: Footwear/Clothing\n\nUser feedback: Prediction
      is incorrect. Correct answer: \"Footwear/Clothing\"\n\n\n### Example #3\n\nText:
      Wooden cream for surfaces.\n\nCategory: Furniture/Home Decor\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n### Example
      #4\n\nText: Natural finish for your lips.\n\nCategory: Beauty/Personal Care\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Beauty/Personal Care\"\n\n\n\nSummarize
      your analysis about incorrect predictions and suggest changes to the prompt."}],
      "model": "gpt-4-turbo", "max_tokens": 1000, "seed": 47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2993'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//vFZNbxtHDL37VxDrQ1JBVixbrmvdUjdpGhStmzooiqowqFmuduLZ4WKG
        a1kJ8t8Lzn5Iih2gQT8uexiSM3yPXD5+OADIbJ7NITMliqlqd3Qhprxv3s3C28tffn5z9vvri/dn
        r4vNrAnTs+fZWCN4+Y6M9FETw1XtSCz71mwCoZDeOj0/OT2enX7z9TQZKs7JadiqlqPZkTRhyUcn
        xyezo+PZ0fFFF12yNRSzOfxxAADwIX01T5/TfTaH43F/UlGMuKJsPjgBZIGdnmQYo42CXrLx1mjY
        C/mU+uHhITz36DbRRuACfvCGQyAjcBUot0bxxIVf+Lc1ewh0Z2lt/QqkJKB7VMgR6sB3Nqd8DFYA
        65owRJASJbklvE/Ua7gQMOh5FLcBNKYJKDSGZZMCAiVz5IrAesNeEZA3liJYn65sIgUoiPIlmltA
        n+89xI3UjUzgFQV6EgFhGQhvc177uSKZTmA0etHmDofHo9EcFh4AjmA0uqZ70YPntRrrwHljBNZW
        SkCIjugWcop25SdDyJYnDXzhyEhgb00cPN5qti+7bNVpIHnAvAVje5vbQBQUisneVwV9XFMAjLDI
        dt/KYF1aU0KFYsouZkv4Ntu+1prG9Z4P2AhDWj2l+0RHoiqCMCwJ0AOFwGGilJ7sUTodjeYPGP0R
        a+FaIfkcCg7p+lur2f4zMi/3mJnDInvZBG+lCfTslfbQd2Q4LLK/ScHA/yQZU09tgZd4R1CwaSLl
        wB4WWYtrkaVK2pXnQHlXMS90L/pTLbJPAI+HesVmtaIo2qW5LQoK5AUMCq04bBK3p3vcnjzG7WXJ
        hh0KgSPUPwiWzBI/R+tLZlkThmeXjqW0fvVF5D4Izv6d5jLsCxuU5tLGhHy2h/z0MeS/MefkQWdt
        lboqNqFAQ5/H/lhv/F+99cUMnO0xMHuMgZ9QmoAOCuttLBMHG24COFt/loRvCRvZPLuiENmjg0sM
        9CUkPBr/n5GgEvVr+5tQDpcl+hWln1GDrwJXtajb9/aOWnXA7v1xqwpo9d3Y0N782hMMYzDaBKVA
        65pA6tT9wA06+57AisZuZ/NTjHqfV0naTr6vJnDNYCtVxP03agoFhwq9oXE3nTVzMNy4XBMKVFiv
        s4OBqrrEqK+qo61qDqKBOkv6sdKzF2sytrBGaVR7d3XSrZyiCXZJ+Y4WqoTr8LqjoJB3Qqpakj6O
        Rm86n5bc+Wi08Ivs0ukuUWzanHytwqWJWC8MVgZuhtf7KQbLDRgMVDTObSDpeU6hXyLaHOvUHf0e
        MYEr3LTI0AGKLitq72q+S8Ee/Kr1o7zfE5KbMKCzK//guSTrbY2iQCBHd7gzfYfNxG0m8MJHbYs6
        kLGJN+t7R/se++zIl6lOqaUjio0FdgKcKbXXpY1DBboGIG+4CbjqRLsVHOFWZcCzwLsmiorNLW3W
        HPKYpAZdZD38lBCrq11O+SP9MO41p0w9V5KrWxiRIjh7SzuNrL66ie1e//SBji2yr0C3Ia0Aev0t
        rC9cQ958srYMira7hmpLRNRV2DfOdecfh73W8aoOvIydfThvJ91NIIzsdYeNwnWWrB8PAP5M+3Oz
        txJnLdc3wrfk9cKzs4v2vmy7tu9aZ51VWNBtDdPp9PSgyzGLmyhU3RTWryjUwbYLdVHfmPNzOj7P
        Z1RkBx8P/gIAAP//AwCfOKInXgwAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83c275da108ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:18:05 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '23992'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '500'
      x-ratelimit-limit-tokens:
      - '30000'
      x-ratelimit-remaining-requests:
      - '499'
      x-ratelimit-remaining-tokens:
      - '28329'
      x-ratelimit-reset-requests:
      - 120ms
      x-ratelimit-reset-tokens:
      - 3.342s
      x-request-id:
      - req_49fe18641d7a416c40b94cba454097c9
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nText:
      {text}\nCategory: {predicted_category}\n```\n\nHere:\n- \"Text: {text}\" is
      input template,\n- \"{prompt}\" is the LLM prompt,\n- \"Category: {predicted_category}\"
      is the output template.\n\nModel can produce erroneous output if a prompt is
      not well defined. In our collaboration, we\u2019ll work together to refine a
      prompt. The process consists of two main steps:\n\n## Step 1\nI will provide
      you with the current prompt along with prediction examples. Each example contains
      the input text, the final prediction produced by the model, and the user feedback.
      User feedback indicates whether the model prediction is correct or not. Your
      task is to analyze the examples and user feedback, determining whether the existing
      instruction is describing the task reflected by these examples precisely, and
      suggests changes to the prompt to address the incorrect predictions.\n\n## Step
      2\nNext, you will carefully review your reasoning in step 1, integrate the insights
      to refine the prompt, and provide me with the new prompt that improves the model\u2019s
      performance."}, {"role": "assistant", "content": "Sure, I\u2019d be happy to
      help you with this prompt engineering problem. Please provide me with the current
      prompt and the examples with user feedback."}, {"role": "user", "content": "\n##
      Current prompt\nClassify the input text into its correct product category based
      on the description provided. Ensure accuracy by closely aligning the description
      with the most relevant category.\n\n## Examples\n### Example #0\n\nText: Apple
      product with a sleek design.\n\nCategory: Electronics\n\nUser feedback: Prediction
      is incorrect. Correct answer: \"Electronics\"\n\n\n### Example #1\n\nText: Laptop
      stand for the kitchen.\n\nCategory: Electronics\n\nUser feedback: Prediction
      is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n### Example #2\n\nText:
      Chocolate leather boots.\n\nCategory: Footwear/Clothing\n\nUser feedback: Prediction
      is incorrect. Correct answer: \"Footwear/Clothing\"\n\n\n### Example #3\n\nText:
      Wooden cream for surfaces.\n\nCategory: Furniture/Home Decor\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n### Example
      #4\n\nText: Natural finish for your lips.\n\nCategory: Beauty/Personal Care\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Beauty/Personal Care\"\n\n\n\nSummarize
      your analysis about incorrect predictions and suggest changes to the prompt."},
      {"role": "assistant", "content": "### Analysis of Incorrect Predictions\n\nUpon
      reviewing the examples provided, it appears that the model''s predictions are
      mostly accurate, but there are some inconsistencies in the user feedback and
      the model''s output. Here''s a breakdown:\n\n1. **Example #0**: \n   - **Text**:
      Apple product with a sleek design.\n   - **Prediction**: Electronics\n   - **User
      Feedback**: Incorrect, but the feedback incorrectly states the correct answer
      as \"Electronics\" which matches the prediction.\n   - **Analysis**: The prediction
      is correct, and the user feedback seems to be an error.\n\n2. **Example #1**:\n   -
      **Text**: Laptop stand for the kitchen.\n   - **Prediction**: Electronics\n   -
      **User Feedback**: Correct answer: \"Furniture/Home Decor\"\n   - **Analysis**:
      The prediction is incorrect. The model seems to have focused on \"Laptop\" but
      ignored the context of \"for the kitchen,\" which suggests a different category.\n\n3.
      **Example #2**:\n   - **Text**: Chocolate leather boots.\n   - **Prediction**:
      Footwear/Clothing\n   - **User Feedback**: Correct answer: \"Footwear/Clothing\"\n   -
      **Analysis**: The prediction is correct, and the user feedback confirms this.\n\n4.
      **Example #3**:\n   - **Text**: Wooden cream for surfaces.\n   - **Prediction**:
      Furniture/Home Decor\n   - **User Feedback**: Correct answer: \"Furniture/Home
      Decor\"\n   - **Analysis**: The prediction is correct, and the user feedback
      confirms this.\n\n5. **Example #4**:\n   - **Text**: Natural finish for your
      lips.\n   - **Prediction**: Beauty/Personal Care\n   - **User Feedback**: Correct
      answer: \"Beauty/Personal Care\"\n   - **Analysis**: The prediction is correct,
      and the user feedback confirms this.\n\n### Suggested Changes to the Prompt\n\nGiven
      the analysis, the main issue seems to be the model''s occasional failure to
      contextualize items correctly (as seen in Example #1). To improve the model''s
      performance, the prompt could be refined to emphasize the importance of context
      and the specific use of the product described. Here''s a revised version of
      the prompt:\n\n**Revised Prompt:**\n\"Classify the input text into its correct
      product category by carefully considering the description provided. Pay special
      attention to the context and specific use mentioned in the text to align the
      description with the most relevant category accurately. Ensure precision in
      categorization to enhance user satisfaction.\"\n\nThis revised prompt encourages
      the model to focus not just on keywords but also on the context and intended
      use of the product, which should help in cases like Example #1, where the context
      (\"for the kitchen\") significantly influences the correct category."}, {"role":
      "user", "content": "\nNow please carefully review your reasoning in Step 1 and
      help with Step 2: refining the prompt.\n\n## Current prompt\nClassify the input
      text into its correct product category based on the description provided. Ensure
      accuracy by closely aligning the description with the most relevant category.\n\n##
      Follow this guidance to refine the prompt:\n\n1. The new prompt should should
      describe the task precisely, and address the points raised in the user feedback.\n\n2.
      The new prompt should be similar to the current prompt, and only differ in the
      parts that address the issues you identified in Step 1.\n    Example:\n    -
      Current prompt: \"Generate a summary of the input text.\"\n    - New prompt:
      \"Generate a summary of the input text. Pay attention to the original style.\"\n\n3.
      Reply only with the new prompt. Do not include input and output templates in
      the prompt.\n"}], "model": "gpt-4-turbo", "max_tokens": 1000, "seed": 47, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '6613'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//XFJLb9swDL7nVxA6x4GbGM3juK4bdhi2w7AH1iGQJdrWIomCRHcxivz3
        QY6TdLvowO/Bj6ReZgDCaLEDoTrJygVbbFmZj/bh01t/+PHh+/s3Xw7f3n397FtH4bET86yg+jcq
        vqgWilywyIb8GVYRJWN2vVsvV2W12mzuR8CRRptlbeCiKriPNRXLclkVZVWU20ndkVGYxA5+zgAA
        XsY35/Qaj2IH5fxScZiSbFHsriQAEcnmipApmcTSs5jfQEWe0Y/Rn8SDzZxmAO4QjA89A+ORwXgm
        MJxAUYyoGEIk3SsGJRlbigPUMqEG8qNSY1LRhDx/Zj4bjXoBjz71EUEq1UepBqgHUJYS2gHwKJ3x
        xrdQE3ejRwqoTGMUGEaXwKHPdqhBej0SxuBHBoo5HnqNGvp0aV6jBnNOk1lzkNa0Y4f/A/4xU0dH
        iSGixWfpb5MtnsTrdUVs+iTzyXxv7VQ/XfdvqQ2R6jTh13pjvEndPqJM5POuE1MQI3qaAfwa79z/
        czoRIrnAe6YD+mx4t9zenw3F7X/d4GozgUws7SvZqqpmU0aRhsTo9o3xLcYQzfnwTdir9RrLta6w
        EbPT7C8AAAD//wMAyowghAYDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83cbeef3508ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:18:09 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '3682'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '500'
      x-ratelimit-limit-tokens:
      - '30000'
      x-ratelimit-remaining-requests:
      - '499'
      x-ratelimit-remaining-tokens:
      - '27460'
      x-ratelimit-reset-requests:
      - 120ms
      x-ratelimit-reset-tokens:
      - 5.08s
      x-request-id:
      - req_5d52d99792f43ec73369be417e2a09f3
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "\"Classify the input text
      into its correct product category based on the description provided. Ensure
      accuracy by closely examining both the specific items mentioned and the context
      or intended use described in the text, aligning the description with the most
      relevant category.\""}, {"role": "user", "content": "Text: Apple product with
      a sleek design."}], "model": "gpt-3.5-turbo", "max_tokens": 1000, "seed": 47,
      "temperature": 0.0, "tool_choice": {"type": "function", "function": {"name":
      "Output"}}, "tools": [{"type": "function", "function": {"name": "Output", "description":
      "Correctly extracted `Output` with all the required parameters with correct
      types", "parameters": {"$defs": {"Labels": {"enum": ["Footwear/Clothing", "Electronics",
      "Food/Beverages", "Furniture/Home Decor", "Beauty/Personal Care"], "title":
      "Labels", "type": "string"}}, "properties": {"predicted_category": {"allOf":
      [{"$ref": "#/$defs/Labels"}], "description": "The classification label"}}, "required":
      ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '1077'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSy27bMBC86yuIPceBH0ns6N5DkLZOe2jR1oVAUyuZMcllyRVc1/C/F5RVSTGq
        g0DsaB6c1SkTAnQJuQC1k6ysN5NHVvrTejU1x/U6qKfv22f78GT376v5IiDcJAZtX1HxP9atIusN
        siZ3gVVAyZhUZ8v5Ynq3WD1OW8BSiSbRas+Txe39hJuwpcl0Nr/vmDvSCiPk4kcmhBCn9p0yuhJ/
        Qy5anXZiMUZZI+T9R0JAIJMmIGPUkaVjuBlARY7RpdiuMWYEMJEplDRmML48p9F5KEoaU/z5+nwg
        e1h9e/ny4eP+1+vdgczLLH4e+V2kj74NVDVO9QWN8H6eX5kJAU7alrtu2Dd8xRQCZKgbi45Tajht
        wAcstWIsCyUZawrHDeQbeGdQcSCnVdzAGd6onLP/nX+OuglYNVGarrRufu63YKj2gbbxqlSotNNx
        VwSUsb0cRCZ/8U4+rQM0bxYIPpD1XDDt0SXB2UO3bRh+sAFddhgTSzMmLbMuIMRjZLRFpV2NwQfd
        7z47Z38BAAD//wMADnNRfPoCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83cd70d6808ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:18:10 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '393'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9995'
      x-ratelimit-remaining-tokens:
      - '198918'
      x-ratelimit-reset-requests:
      - 38.217s
      x-ratelimit-reset-tokens:
      - 324ms
      x-request-id:
      - req_b0b419f5d8c40d7a1c29a267d7a7dc34
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "\"Classify the input text
      into its correct product category based on the description provided. Ensure
      accuracy by closely examining both the specific items mentioned and the context
      or intended use described in the text, aligning the description with the most
      relevant category.\""}, {"role": "user", "content": "Text: Laptop stand for
      the kitchen."}], "model": "gpt-3.5-turbo", "max_tokens": 1000, "seed": 47, "temperature":
      0.0, "tool_choice": {"type": "function", "function": {"name": "Output"}}, "tools":
      [{"type": "function", "function": {"name": "Output", "description": "Correctly
      extracted `Output` with all the required parameters with correct types", "parameters":
      {"$defs": {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages",
      "Furniture/Home Decor", "Beauty/Personal Care"], "title": "Labels", "type":
      "string"}}, "properties": {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}],
      "description": "The classification label"}}, "required": ["predicted_category"],
      "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '1072'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSXW/TMBR9z6+w7vM6tevarXkDNMQEZZpALRpFkevcph6Or2XfoHVV/ztyEpKs
        Ig+RdU/Oh8/NMRECdA6pALWXrEpnRgtW+vE+vCx/vMvD6onubu9X5oEf8xUu1nARGbR9RsX/WJeK
        SmeQNdkGVh4lY1Sd3FxNx9fT28W4BkrK0URa4Xg0vZyNuPJbGo0nV7OWuSetMEAqfiZCCHGs3zGj
        zfEFUlHr1JMSQ5AFQtp9JAR4MnECMgQdWFqGix5UZBltjG0rYwYAE5lMSWN64+Y5Ds59UdKY7INe
        riffPv15fp1/158/rpfv1/rL9dPXgV8jfXB1oF1lVVfQAO/m6ZmZEGBlWXMfKnYVnzGFAOmLqkTL
        MTUcN+A85lox5pmSjAX5wwbSDdwZVOzJahU2cII3Kqfkf+dfg2487qogTVtaOz91WzBUOE/bcFYq
        7LTVYZ95lKG+HAQm13hHn9oBqjcLBOepdJwx/UYbBSezRaMH/Q/WozctxsTSDEjzedIGhHAIjGW2
        07ZA77zudp+ckr8AAAD//wMAYBhsyfoCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83cdbfba708ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:18:11 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '515'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9994'
      x-ratelimit-remaining-tokens:
      - '198918'
      x-ratelimit-reset-requests:
      - 46.071s
      x-ratelimit-reset-tokens:
      - 324ms
      x-request-id:
      - req_4642505077d650b221cb6140e2e605f5
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "\"Classify the input text
      into its correct product category based on the description provided. Ensure
      accuracy by closely examining both the specific items mentioned and the context
      or intended use described in the text, aligning the description with the most
      relevant category.\""}, {"role": "user", "content": "Text: Chocolate leather
      boots."}], "model": "gpt-3.5-turbo", "max_tokens": 1000, "seed": 47, "temperature":
      0.0, "tool_choice": {"type": "function", "function": {"name": "Output"}}, "tools":
      [{"type": "function", "function": {"name": "Output", "description": "Correctly
      extracted `Output` with all the required parameters with correct types", "parameters":
      {"$defs": {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages",
      "Furniture/Home Decor", "Beauty/Personal Care"], "title": "Labels", "type":
      "string"}}, "properties": {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}],
      "description": "The classification label"}}, "required": ["predicted_category"],
      "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '1067'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSyW7bMBC96yuIOdupZNd1o2sSB+klReEAXVwIFDWS2VAchhyhNQz/e6ElsmJE
        B4F4T2/RcI6REKALSAWovWRVOzO/ZqW/3b64+/JxeVu+PN2pzVd/Hz8smvxLA7NWQfkfVPyqulJU
        O4Osyfa08igZW9dkvVjGH5efr5OOqKlA08oqx/Pl1WrOjc9pHieL1aDck1YYIBW/IiGEOHbvtqMt
        8B+kIp69IjWGICuEdPxICPBkWgRkCDqwtAyzM6nIMtq2tm2MmRBMZDIljTkH989xcj4PShqTlVW+
        jZP8brv+rn8++M3Tjw0mz1s9yeutD64rVDZWjQOa8COeXoQJAVbWnfaxYdfwhVIIkL5qarTctobj
        DpzHQivGIlOSsSJ/2EG6gw0R/0XpP9wY4r221Q5O8MbrFL13/j2ZkMeyCdIMoxvw03gXhirnKQ8X
        o4VSWx32mUcZul+EwOT67DanS4DmzTWC81Q7zpie0baGyWrd+8F5zSbssBDAxNJM8E/raGgI4RAY
        66zUtkLvvB5XIDpF/wEAAP//AwBcHVnBAQMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83ce18b3b08ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:18:12 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '484'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9993'
      x-ratelimit-remaining-tokens:
      - '198921'
      x-ratelimit-reset-requests:
      - 53.811s
      x-ratelimit-reset-tokens:
      - 323ms
      x-request-id:
      - req_499400e2a946be4b970b9b8b53bf7105
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "\"Classify the input text
      into its correct product category based on the description provided. Ensure
      accuracy by closely examining both the specific items mentioned and the context
      or intended use described in the text, aligning the description with the most
      relevant category.\""}, {"role": "user", "content": "Text: Wooden cream for
      surfaces."}], "model": "gpt-3.5-turbo", "max_tokens": 1000, "seed": 47, "temperature":
      0.0, "tool_choice": {"type": "function", "function": {"name": "Output"}}, "tools":
      [{"type": "function", "function": {"name": "Output", "description": "Correctly
      extracted `Output` with all the required parameters with correct types", "parameters":
      {"$defs": {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages",
      "Furniture/Home Decor", "Beauty/Personal Care"], "title": "Labels", "type":
      "string"}}, "properties": {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}],
      "description": "The classification label"}}, "required": ["predicted_category"],
      "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '1069'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSy47aMBTd5yusu4YpkDJAlsMUhaKqaruqShUZ5xJMHdtjX6uDEP9e5TFJBtWL
        yLrH55FjXyPGQOaQMBAnTqK0arwiIX/sztv5IrXx086L749mm/58+bIS+QuMKoY5nFHQG+tBmNIq
        JGl0AwuHnLBSnS5m8eRjvFzNaqA0OaqKVlgaxw/zMQV3MOPJdDZvmScjBXpI2K+IMcau9bfKqHN8
        hYRNRm+TEr3nBULSHWIMnFHVBLj30hPXBKMeFEYT6iq2DkoNADJGZYIr1Rs36zrY90VxpbI43bzm
        3z6v8802pJ/k7vB3mdJ5vR74NdIXWwc6Bi26ggZ4N0/uzBgDzcua+zWQDXTHZAy4K0KJmqrUcN2D
        dZhLQZhnghMWxl32kOxhE5yWFBx+SE2J7BmFcXu4wTu5W/S//e9BSQ6PwXPVttfOb911KFNYZw7+
        rl04Si39KXPIff2X4MnYxrvyqR0gvLtJsM6UljIyf1BXgtP5stGD/qX16KrFyBBXA9LjImoDgr94
        wjI7Sl2gs052jyC6Rf8AAAD//wMAn0h4PQMDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83ce63ade08ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:18:12 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '509'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9992'
      x-ratelimit-remaining-tokens:
      - '198920'
      x-ratelimit-reset-requests:
      - 1m1.709s
      x-ratelimit-reset-tokens:
      - 324ms
      x-request-id:
      - req_7225ca83e598809a4b4bc08e249be396
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "\"Classify the input text
      into its correct product category based on the description provided. Ensure
      accuracy by closely examining both the specific items mentioned and the context
      or intended use described in the text, aligning the description with the most
      relevant category.\""}, {"role": "user", "content": "Text: Natural finish for
      your lips."}], "model": "gpt-3.5-turbo", "max_tokens": 1000, "seed": 47, "temperature":
      0.0, "tool_choice": {"type": "function", "function": {"name": "Output"}}, "tools":
      [{"type": "function", "function": {"name": "Output", "description": "Correctly
      extracted `Output` with all the required parameters with correct types", "parameters":
      {"$defs": {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages",
      "Furniture/Home Decor", "Beauty/Personal Care"], "title": "Labels", "type":
      "string"}}, "properties": {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}],
      "description": "The classification label"}}, "required": ["predicted_category"],
      "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '1072'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFJdb5swFH3nV1j3OemSptkS3rZ2WlW1XaX2KcuEbswFvBnbtS9aWZT/
        PgEJ0Gh+QNY9Ph8cex8JASqFWIAskGXp9HTNUr2k6vbtObu7efj8VOhNfpM/7v58ndEVTBqG3f0i
        ySfWhbSl08TKmg6WnpCpUZ1/ulzMrhar9aIFSpuSbmi54+niYjnlyu/sdDa/XB6ZhVWSAsTiRySE
        EPv222Q0Kb1BLGaT06SkEDAniPtDQoC3upkAhqACo2GYDKC0hsk0sU2l9Qhga3UiUevBuFv70X4o
        CrVOvuHyRd1v8Po+1Fi8slab1S35vyO/Trp2baCsMrIvaIT38/jMTAgwWLbc7xW7is+YQgD6vCrJ
        cJMa9ltwnlIlmdJEIlNufb2FeAtfCCuuPzyRD9agFtfoaQsHeCd3iP63/zkqyVNWBdTH9o7zQ38d
        2ubO2104axcyZVQoEk8Y2r+EwNZ13o1P6wDVu5sE523pOGH7m0wjOF+uOz0YXtqAnjC2jHpE+riK
        jgEh1IGpTDJlcvLOq/4RRIfoHwAAAP//AwCsPVuyAwMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83cebb9fc08ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:18:13 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '514'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9991'
      x-ratelimit-remaining-tokens:
      - '198918'
      x-ratelimit-reset-requests:
      - 1m9.458s
      x-ratelimit-reset-tokens:
      - 324ms
      x-request-id:
      - req_83a9e783dd3ccc9d87fc204f80bcb60d
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nText:
      {text}\nCategory: {predicted_category}\n```\n\nHere:\n- \"Text: {text}\" is
      input template,\n- \"{prompt}\" is the LLM prompt,\n- \"Category: {predicted_category}\"
      is the output template.\n\nModel can produce erroneous output if a prompt is
      not well defined. In our collaboration, we\u2019ll work together to refine a
      prompt. The process consists of two main steps:\n\n## Step 1\nI will provide
      you with the current prompt along with prediction examples. Each example contains
      the input text, the final prediction produced by the model, and the user feedback.
      User feedback indicates whether the model prediction is correct or not. Your
      task is to analyze the examples and user feedback, determining whether the existing
      instruction is describing the task reflected by these examples precisely, and
      suggests changes to the prompt to address the incorrect predictions.\n\n## Step
      2\nNext, you will carefully review your reasoning in step 1, integrate the insights
      to refine the prompt, and provide me with the new prompt that improves the model\u2019s
      performance."}, {"role": "assistant", "content": "Sure, I\u2019d be happy to
      help you with this prompt engineering problem. Please provide me with the current
      prompt and the examples with user feedback."}, {"role": "user", "content": "\n##
      Current prompt\n\"Classify the input text into its correct product category
      based on the description provided. Ensure accuracy by closely examining both
      the specific items mentioned and the context or intended use described in the
      text, aligning the description with the most relevant category.\"\n\n## Examples\n###
      Example #0\n\nText: Apple product with a sleek design.\n\nCategory: Electronics\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Electronics\"\n\n\n###
      Example #1\n\nText: Laptop stand for the kitchen.\n\nCategory: Electronics\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n###
      Example #2\n\nText: Chocolate leather boots.\n\nCategory: Footwear/Clothing\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Footwear/Clothing\"\n\n\n###
      Example #3\n\nText: Wooden cream for surfaces.\n\nCategory: Furniture/Home Decor\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n###
      Example #4\n\nText: Natural finish for your lips.\n\nCategory: Beauty/Personal
      Care\n\nUser feedback: Prediction is incorrect. Correct answer: \"Beauty/Personal
      Care\"\n\n\n\nSummarize your analysis about incorrect predictions and suggest
      changes to the prompt."}], "model": "gpt-4-turbo", "max_tokens": 1000, "seed":
      47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3096'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6RX32/bRgx+z19BKA9uA8dzEgdp8lZkLZZiD0HXYtjmITifKInN6U67o+KoRf/3
        gXeSJbdpUaAvNnA/yO8+kh+pTwcAGeXZFWS6Uqzrxhxfsqb3NZ5+sH/+rcvLVp3fnryt3vx1sXzj
        /svmcsNtPqDm4dZCu7oxyORs2tYeFaNYPbk4PVuuzl5cruJG7XI0cq1s+Hh1zK3fuOPT5enqeLk6
        Xl72tytHGkN2Bf8cAAB8ir+C0+b4mF3Bcj6s1BiCKjG72h0CyLwzspKpECiwspzNx03tLKON0A8P
        D+GlVaYLFMAVcGO18x41w63HnLS8J6zt2r72rgauEPBRyUMDNN49UI75HIhBNQ0qH4ArxfFYfOVM
        Tu3MgPKyHth0oLRuvWKcw6aNFzzG7eBqBLLaWcGNVhMGIAutzdHLQ3KyZXQQH/HI4DyQPCfHHNqA
        8gjZJsY6QI5Be9pgfiVvOFnA0dGrhB8Ol0dHV/CuwglE2KoA6+yVQc3eWdJhnYGyebTYBvRQIOYb
        pe9BmeCAbE5aovz1pdCDTGTKodL5bgHvKgoDhxBQQLKDze6o6UAbiVpBQm3PzhfOAysWXlj80BCy
        OWwr0hXUVFYsJhXUEvx7YTRa2RkgDmiKhZByukfKyUBK5Had/a4adg1E5qFwPpq5J9YV2nUW+Rrh
        wpfszeVIxEQTnIvo4FtBg2cquXsuqBWEBjUVpCEgswT/We/+OYS2LDFwJCJUrjV5JDJxTR/FtqQN
        rLPXrbfErcdffpME+xW184t1lqIxRDEkwvZTbdON6TzAbDzVyndQtDaljZDTGKWxRsvTx0SGz/YY
        Pv1G2g2pogI06L8OejS12jN19jOmzvdMrX7GlIjIHykWmMN1pWyJMa3l+K13dcNy7J0DqkU1cF8h
        0BfO18pqjER6zFudjohCCJ271BmDq6KkzFNaO2PcVqKl93030TfoXWqIrOTop3pwbZSnIkX5pm6c
        54jEFXDdK4yAei8SKxy9slXcn5hnB1g3lQr0Ma3TnpnB6Q8KV+Nd3moepWsoXrnU68eWjIEKTTPJ
        zagizOgnWhmhj/XQi2LU6EEkjBNYDurWMEkqDMcxwEYFzMFF9+R7RE3KeOMsfqUfIUpEZJQ7YevG
        atPmk6bRv2VgTpCQMW3gGOrKbQVLTkWBHi2TLD4FqJVwCIM9mQt4HekMkfU5KJu0xNC9yOA6MxMd
        W2eTjJiIxc6t6SDHBpMAODEV9kNFdjw86FKAZ64oSCM8hMUgkc9HAXiLBVmE35UtWwGfmELl0cON
        Dezb1CXHQowU9bqGj40hTQKN+sP7sW88OU88pOAgTcpEwJIHg34+mVjgHvryLtGiV6bv6CmJPagQ
        2hp3ydSNodDoWZGFe+y2zudhUIRDeIsPJIdGBVhn16lZpHIj20h7E/dk2UWeh0IfymB02EHhdBv6
        mMj9aUIO08gCblWXmoY8gmXQkf1eEX6s+Oaid1s0Rv53DShVT50MiqeXhsqvkWyJqz42gcGjwQdl
        +QnmJNslMNs4/Uxrnyb5lqaDNsg04JVMSlI2Fj60gYfuNNzjrsG+NGNB9GU3BwUz851OPvtu+5w9
        1T1nkLcIfdC+LA4FlRzsM24u9DTEOICYCVDSyphu6OESVWVhNhkeZuPUtM5i/xDp831S7ZdH2VI+
        6SpQO4+ARYGa6QFj0UBO0U1LoYqNHXmLaL+ld7tMEbqS3DxZOHMwqNJQ6pLbYbSdjr6L6fjtsWiD
        kk8A2xrTr3/ezfPGlY13m9Dv79YLshSqO48qOCuze2DXZHH38wHAv/G7od37FMgSS3fs7tGKwfOL
        i2QvGz9XJrvnL/pddqzMuHFycnZ+0GPMQhcY67uCbIm+8ZQ+JIrmTl9c4PIiX2GRHXw++B8AAP//
        AwAncz6OVg0AAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83cf0c92708ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:18:41 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '27845'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '500'
      x-ratelimit-limit-tokens:
      - '30000'
      x-ratelimit-remaining-requests:
      - '499'
      x-ratelimit-remaining-tokens:
      - '28304'
      x-ratelimit-reset-requests:
      - 120ms
      x-ratelimit-reset-tokens:
      - 3.392s
      x-request-id:
      - req_b12c4ae311effa2bb005e8bf1f10bc93
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nText:
      {text}\nCategory: {predicted_category}\n```\n\nHere:\n- \"Text: {text}\" is
      input template,\n- \"{prompt}\" is the LLM prompt,\n- \"Category: {predicted_category}\"
      is the output template.\n\nModel can produce erroneous output if a prompt is
      not well defined. In our collaboration, we\u2019ll work together to refine a
      prompt. The process consists of two main steps:\n\n## Step 1\nI will provide
      you with the current prompt along with prediction examples. Each example contains
      the input text, the final prediction produced by the model, and the user feedback.
      User feedback indicates whether the model prediction is correct or not. Your
      task is to analyze the examples and user feedback, determining whether the existing
      instruction is describing the task reflected by these examples precisely, and
      suggests changes to the prompt to address the incorrect predictions.\n\n## Step
      2\nNext, you will carefully review your reasoning in step 1, integrate the insights
      to refine the prompt, and provide me with the new prompt that improves the model\u2019s
      performance."}, {"role": "assistant", "content": "Sure, I\u2019d be happy to
      help you with this prompt engineering problem. Please provide me with the current
      prompt and the examples with user feedback."}, {"role": "user", "content": "\n##
      Current prompt\n\"Classify the input text into its correct product category
      based on the description provided. Ensure accuracy by closely examining both
      the specific items mentioned and the context or intended use described in the
      text, aligning the description with the most relevant category.\"\n\n## Examples\n###
      Example #0\n\nText: Apple product with a sleek design.\n\nCategory: Electronics\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Electronics\"\n\n\n###
      Example #1\n\nText: Laptop stand for the kitchen.\n\nCategory: Electronics\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n###
      Example #2\n\nText: Chocolate leather boots.\n\nCategory: Footwear/Clothing\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Footwear/Clothing\"\n\n\n###
      Example #3\n\nText: Wooden cream for surfaces.\n\nCategory: Furniture/Home Decor\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n###
      Example #4\n\nText: Natural finish for your lips.\n\nCategory: Beauty/Personal
      Care\n\nUser feedback: Prediction is incorrect. Correct answer: \"Beauty/Personal
      Care\"\n\n\n\nSummarize your analysis about incorrect predictions and suggest
      changes to the prompt."}, {"role": "assistant", "content": "### Analysis of
      Incorrect Predictions\n\nFrom the examples provided, it appears that the model''s
      predictions are mostly accurate, but there are some inconsistencies in understanding
      the context or intended use of the items described:\n\n1. **Example #0**: The
      prediction was \"Electronics\" and the user feedback also indicated \"Electronics\"
      as the correct category. This example seems to be correctly classified, but
      the user feedback states it as incorrect, which might be a mistake in the feedback
      itself.\n\n2. **Example #1**: The text \"Laptop stand for the kitchen\" was
      classified as \"Electronics,\" which is incorrect. The intended use of the item
      (a stand) in a specific setting (kitchen) suggests it should be categorized
      under \"Furniture/Home Decor.\" This indicates a misunderstanding by the model
      of the primary function and placement of the item.\n\n3. **Example #2**: The
      prediction was correct as per the user feedback.\n\n4. **Example #3**: The prediction
      was correct as per the user feedback.\n\n5. **Example #4**: The prediction was
      correct as per the user feedback.\n\n### Suggested Changes to the Prompt\n\nTo
      improve the model''s performance and reduce the rate of incorrect categorizations,
      the following changes to the prompt could be considered:\n\n1. **Clarify the
      Importance of Context and Usage**: Enhance the prompt to emphasize the importance
      of considering the context or intended use of the product described in the text.
      This will help the model to better understand and categorize items that might
      belong to multiple categories based on their description alone.\n\n2. **Examples
      for Clarity**: Include examples in the prompt that illustrate how to differentiate
      categories based on usage or context. For instance, an item like a \"laptop
      stand\" could be categorized differently depending on its intended use in different
      settings (office vs. kitchen).\n\n3. **Refine Language for Clearer Instructions**:
      The prompt should explicitly instruct the model to prioritize the functional
      use and setting described in the text over the general appearance or assumed
      category based on certain keywords.\n\n#### Revised Prompt\n\n\"Classify the
      input text into its correct product category by focusing on the description
      provided. Pay special attention to the context or intended use of the product,
      as well as specific items mentioned. Align the description with the most relevant
      category based on how and where the product is intended to be used, rather than
      just by the product type alone. For example, a ''laptop stand for the kitchen''
      should be categorized under ''Furniture/Home Decor'' due to its intended use
      in a home setting, despite ''laptop'' typically suggesting an ''Electronics''
      category.\"\n\nThis revised prompt should guide the model more effectively in
      distinguishing between categories based on the context and usage described in
      the text, leading to more accurate predictions."}, {"role": "user", "content":
      "\nNow please carefully review your reasoning in Step 1 and help with Step 2:
      refining the prompt.\n\n## Current prompt\n\"Classify the input text into its
      correct product category based on the description provided. Ensure accuracy
      by closely examining both the specific items mentioned and the context or intended
      use described in the text, aligning the description with the most relevant category.\"\n\n##
      Follow this guidance to refine the prompt:\n\n1. The new prompt should should
      describe the task precisely, and address the points raised in the user feedback.\n\n2.
      The new prompt should be similar to the current prompt, and only differ in the
      parts that address the issues you identified in Step 1.\n    Example:\n    -
      Current prompt: \"Generate a summary of the input text.\"\n    - New prompt:
      \"Generate a summary of the input text. Pay attention to the original style.\"\n\n3.
      Reply only with the new prompt. Do not include input and output templates in
      the prompt.\n"}], "model": "gpt-4-turbo", "max_tokens": 1000, "seed": 47, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '7067'
      content-type:
      - application/json
      cookie:
      - __cf_bm=MoCuiOk5CmyB5u9IMWLcCs8yzZB5TdilJgUFket7cpI-1723043823-1.0.1.1-6eBD53hhWf2tCcm0c7WKfVf6fRMhVOQ7HKz_nEjsSau0elhp.Iu.bk5QPPlGzwRJdoAbU_WSb7ka7X8cX3FcHg;
        _cfuvid=MU0ZYpHBIPsmbjFJV7NtbigIGQZIlAbejeO8kto7SA4-1723043823738-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSwW7bMAy95ysInZPAdYKkyW0YtnMHDBiGdQhkiba5yaIm0W3cIv8+yHGSdthF
        B773yEfqvc4AFFm1B2VaLaYLbrETQ887uv/+4eGL0+WL/nZvfInb8Hnz56uaZwVXv9DIRbU03AWH
        QuzPsImoBXPXu225KtarXVmOQMcWXZY1QRbrhfSx4kVZlOtFsV4Uu0ndMhlMag8/ZgAAr+ObfXqL
        R7WHYn6pdJiSblDtryQAFdnlitIpURLtRc1voGEv6Efrj+qjy5x6AGkRyIdeQPAoQF4YSBIYjhGN
        QIhseyNgtGDDcYBKJ7TAflRaTCZSyPtn5hNZtEv45FMfEbQxfdRmgGoA4zihGwCPuiNPvoGKpR17
        pICGajJAgl2CDn1uhxa0tyNhNH4U4JjtobdooU+X4RVaoLObzFrCQySOJPSCoB0147B/vT7TNLzj
        JBDR4ZP2/1syn6Luvckq7cax2VZCEfLNHKKWFiNIqz0kdnnF6TQyBASurwe87rV8VG+/JWLdJ52j
        4Xvnpvrp+s+OmxC5ShN+rdfkKbWHiDqxz3+ahIMa0dMM4OeYp/5dRFSI3AU5CP9GnxverVabc0N1
        y/EN3mwnUFi0eyNbF6vZ5FGlIQl2h5p8gzFEOgesDgez3WKxtWus1ew0+wsAAP//AwCthGflbgMA
        AA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83da03e6008ce-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:18:44 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '2668'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '500'
      x-ratelimit-limit-tokens:
      - '30000'
      x-ratelimit-remaining-requests:
      - '499'
      x-ratelimit-remaining-tokens:
      - '27343'
      x-ratelimit-reset-requests:
      - 120ms
      x-ratelimit-reset-tokens:
      - 5.314s
      x-request-id:
      - req_7e95b9e429dbd9028dc141987a841843
    status:
      code: 200
      message: OK
version: 1
