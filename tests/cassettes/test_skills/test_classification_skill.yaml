interactions:
- request:
    body: '{"messages": [{"role": "user", "content": "Hey, how''s it going?"}], "model":
      "gpt-4-turbo", "max_tokens": 10}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '109'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SQMU/DMBCF9/yKwwtLgtLUojQ7EgyVChIsCEWO4zhuHZ9lO6JQ9b8jJ2kLi4f3
        7r37zscEgKiGlEB4xwLvrc7WeJCb7XKQr/nj2+qlfed0u3E/Gjuxa0kaE1jvBA/n1B3H3moRFJrJ
        5k6wIGLrYlUs1svigd6PRo+N0DEmbchoFgZXY1bkBc1ymuXrOd2h4sKTEj4SAIDj+EZO04gDKSFP
        z0ovvGdSkPIyBEAc6qgQ5r3ygZlA0qvJ0QRhRvTn2x4aVEaCjLwphI6ZvYcWHTC/V0bewBN+kTl8
        umzVKK3DOhKaQeuL3iqjfFc5wTyauEELI0M3FZwSgM/xvuEfMrEOexuqgHthYuWCToXk+qt/zPl2
        EjAwfdULmsyExH/7IPqqVUYKZ52ajm1ttaqX+YpyWuckOSW/AAAA//8DAAQ9JB76AQAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e47c33f996926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:40:47 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        path=/; expires=Thu, 25-Jul-24 19:10:47 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '596'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '2000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '1999984'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_0314de3d0574d7a9bde9a8bb38a4c8dc
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Hey, how''s it going?"}], "model":
      "gpt-3.5-turbo", "max_tokens": 10}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '111'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//VJA/b8IwFMT3fIpXL10IIiGUkrGq+m9AXZiqCpnk4Rhsv8h+kagQ371y
        CNAuHu5859/5mAAIXYsSRNVIrmxr0gUd1PJpRcXDcm/p4zN7UfK51ovXVTdjMYoJ2uyw4ktqXJFt
        DbImd7Yrj5IxtmbzPFtM88di3huWajQxplpOp+NZyp3fUDrJ8tmQbEhXGEQJXwkAwLE/I6Or8SBK
        mIwuisUQpEJRXi8BCE8mKkKGoANLd+YdzIoco+ux39AYAm7Q4x2831vYdYFBQlzSMXpoPSkv7UgM
        8dP1XUOq9bSJjK4z5qpvtdOhWXuUgVx8w6BT3JwLTgnAd7+w+wctWk+25TXTHl2szIpzobj96R9z
        WC+YWJqbnhfJQCjCT2C06612Cn3rdT83cian5BcAAP//AwCf+foD7QEAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e47c8e8fc6926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:40:48 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '297'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49999983'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_bd7657700936742b0e778bf1c58fd818
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify input text."}, {"role":
      "user", "content": "Text: Apple product with a sleek design."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "temperature": 0.0, "tool_choice": {"type": "function",
      "function": {"name": "Output"}}, "tools": [{"type": "function", "function":
      {"name": "Output", "description": "Correctly extracted `Output` with all the
      required parameters with correct types", "parameters": {"$defs": {"Labels":
      {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '805'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSTU/jMBC951dYc24RCa2gubEsEqyQOFRIaLcocpxpanA8Xnsi0Vb97yhJm4SK
        HKzRPL8Pz2QfCQG6gFSA2khWlTPTBX2Wz3fzXy8qCe9/uJj5x7/4WO+W+fJ1CZOGQfk7Kj6xLhRV
        ziBrsh2sPErGRjW+TuLFVXIzu2mBigo0Da10PL26mE+59jlNL+NkfmRuSCsMkIp/kRBC7NuzyWgL
        /IRUXE5OnQpDkCVC2l8SAjyZpgMyBB1YWobJACqyjLaJbWtjRgATmUxJYwbj7tuP6mFQ0phss/v9
        9OHzhztK7OL2/47U2t4GKkZ+nfTWtYHWtVX9gEZ430/PzIQAK6uW+1yzq/mMKQRIX9YVWm5Sw34F
        zmOhFWORKclYkt+uIF3BvUHFnqxWYQUH+KZyiH6q347VoR+2odJ5ysPZ7GCtrQ6bzKMM7RsgMLnO
        opF7a5daf9sTOE+V44zpA20jGMfXnR4M/9GAnjAmlmZESmbRMSCEbWCssrW2JXrndb/i6BB9AQAA
        //8DAEGZNozhAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e47ccdfed6926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:40:48 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '164'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998982'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_1d310c66e92bc12cc5289c2bc0e3d10a
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify input text."}, {"role":
      "user", "content": "Text: Laptop stand for the kitchen."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "temperature": 0.0, "tool_choice": {"type": "function",
      "function": {"name": "Output"}}, "tools": [{"type": "function", "function":
      {"name": "Output", "description": "Correctly extracted `Output` with all the
      required parameters with correct types", "parameters": {"$defs": {"Labels":
      {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '800'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFJLj5swEL7zK6w5J6tAXg23qq362MPmtJXarJAxE+Ku8Vj2UBFF+e8V
        kAU2KgdrNJ+/h2e4REKALiAVoE6SVeXMfEdNuX/a1fW3QB+l/77JP+1p1STPj5vXBmYtg/I/qPiN
        9aCocgZZk+1h5VEytqrxNol3y+TDatcBFRVoWlrpeL58WM+59jnNF3GyvjFPpBUGSMXvSAghLt3Z
        ZrQFNpCKxeytU2EIskRIh0tCgCfTdkCGoANLyzAbQUWW0baxbW3MBGAikylpzGjcf5dJPQ5KGpPh
        1+ZHznuvVz/Xq+L5+Hfx6/PWuMeJXy99dl2gY23VMKAJPvTTOzMhwMqq4z7V7Gq+YwoB0pd1hZbb
        1HA5gPNYaMVYZEoyluTPB0gP8MWgYk9Wq3CAK7xTuUb/q19u1XUYtqHSecrD3ezgqK0Op8yjDN0b
        IDC53qKVe+mWWr/bEzhPleOM6RVtKxjHm14Pxv9oRLc3jImlmZCSZXQLCOEcGKvsqG2J3nk9rDi6
        Rv8AAAD//wMAmxZVAOECAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e47cffd0f6926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:40:49 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '740'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998983'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_ca7eb5cb512129f14343331a33ed28d5
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify input text."}, {"role":
      "user", "content": "Text: Chocolate leather boots."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "temperature": 0.0, "tool_choice": {"type": "function",
      "function": {"name": "Output"}}, "tools": [{"type": "function", "function":
      {"name": "Output", "description": "Correctly extracted `Output` with all the
      required parameters with correct types", "parameters": {"$defs": {"Labels":
      {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '795'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSS2/bMAy++1cIPCdd7aZr41sbbKd2W7vDii6FIcuMo0QWBYlG80D++2A7ddxg
        PggEP30Pkd5HQoAuIBWglpJV5cx4Spvy19Puznz9E/Bbdfv8dL/m1+2KNoV+gVHDoHyFij9YF4oq
        Z5A12Q5WHiVjoxrfJPH0KrmdTFugogJNQysdj68ursdc+5zGl3FyfWQuSSsMkIq/kRBC7NuzyWgL
        3EAqLkcfnQpDkCVC2l8SAjyZpgMyBB1YWobRCVRkGW0T29bGDAAmMpmSxpyMu28/qE+DksZk0+cV
        Pur3vNCzxcMP+n2T73YzTNYDv05669pAi9qqfkADvO+nZ2ZCgJVVy/1Zs6v5jCkESF/WFVpuUsN+
        Ds5joRVjkSnJWJLfziGdw3cifkfpv8wM8VLbcg4H+KR1iP5Xvx2rQz9yQ6XzlIezCcJCWx2WmUcZ
        2pdAYHKdRSP31q62/rQtcJ4qxxnTGm0jGMeTTg9Of9MAPe4dmFiaQT+ZRMeEELaBscoW2pbondf9
        pqND9A8AAP//AwC1qkwI6AIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e47d63fac6926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:40:50 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '256'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998984'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_11c764bf31f1a7d84eab86b4e05eb8cc
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify input text."}, {"role":
      "user", "content": "Text: Wooden cream for surfaces."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "temperature": 0.0, "tool_choice": {"type": "function",
      "function": {"name": "Output"}}, "tools": [{"type": "function", "function":
      {"name": "Output", "description": "Correctly extracted `Output` with all the
      required parameters with correct types", "parameters": {"$defs": {"Labels":
      {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '797'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFLfT9swEH7PX2HdM2UkpYLmDVYNNGnAxMM2rShynWvqYvuMfZGoqv7v
        U5IuCRV5sE73+fvhu+wTIUCXkAtQG8nKejOZ03v18/f6/u45q6LXVbn9wdPtQn2Vb7cPcNYwaLVF
        xf9Z54qsN8iaXAergJKxUU2vsnQ+za5nFy1gqUTT0CrPk+n5bMJ1WNHkIs1mR+aGtMIIufibCCHE
        vj2bjK7Ed8hFq9N2LMYoK4S8vyQEBDJNB2SMOrJ0DGcDqMgxuia2q40ZAUxkCiWNGYy7bz+qh0FJ
        YwqcPz/ZJ3O9cHffby/ta+Bf6g+VNyO/Tnrn20Dr2ql+QCO87+cnZkKAk7blPtbsaz5hCgEyVLVF
        x01q2C/BByy1YiwLJRkrCrsl5Ev4VgenuQ745Z4sigUqCks4wAe5Q/JZ/XKsDv3UDVU+0CqeDBHW
        2um4KQLK2D4GIpPvLBq5l3a79YeFgQ9kPRdMr+gawTSddXow/FADOj9iTCzNiJRdJseAEHeR0RZr
        7SoMPuh+18kh+QcAAP//AwDY97dr6gIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e47d97ccc6926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:40:50 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '298'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998984'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_a9f0b0e75d7607e5df372f7c8907d54f
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify input text."}, {"role":
      "user", "content": "Text: Natural finish for your lips."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "temperature": 0.0, "tool_choice": {"type": "function",
      "function": {"name": "Output"}}, "tools": [{"type": "function", "function":
      {"name": "Output", "description": "Correctly extracted `Output` with all the
      required parameters with correct types", "parameters": {"$defs": {"Labels":
      {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '800'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xS30/bMBB+z19h3TNlJKyM5LHTVGlaBwyQ0FYUuc41zXB8rn2eqKr+7yhJSUK1
        PFin+/z98F32kRBQFZAJUBvJqrZ6ktJreZeGB9I/6od5sn16ebxP5zq+M7PkN5w1DFr9RcXvrHNF
        tdXIFZkOVg4lY6Maf0ni9DK5nl60QE0F6oZWWp5cnk8nHNyKJhdxMj0yN1Qp9JCJP5EQQuzbs8lo
        CnyFTLQ6badG72WJkPWXhABHuumA9L7yLA3D2QAqMoymiW2C1iOAiXSupNaDcfftR/UwKKl1Xnz2
        32aLp9tF/DP9d7/4tf1utu5xLkd+nfTOtoHWwah+QCO872cnZkKAkXXLvQlsA58whQDpylCj4SY1
        7JdgHRaVYixyJRlLcrslZEuYoQy8+3SLzpORWnyVDpdwgA9yh+h/9fOxOvRT11RaRyt/MkRYV6by
        m9yh9O1jwDPZzqKRe263Gz4sDKyj2nLO9IKmEYzjq04Phh9qQNMjxsRSj0jJNDoGBL/zjHW+rkyJ
        zrqq33V0iN4AAAD//wMACblC9+oCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e47dcbabb6926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:40:51 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '173'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998983'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_616f5744fb61a2273fa2ea2c25b3fbc9
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nText:
      {text}\nCategory: {predicted_category}\n```\n\nHere:\n- \"Text: {text}\" is
      input template,\n- \"{prompt}\" is the LLM prompt,\n- \"Category: {predicted_category}\"
      is the output template.\n\nModel can produce erroneous output if a prompt is
      not well defined. In our collaboration, we\u2019ll work together to refine a
      prompt. The process consists of two main steps:\n\n## Step 1\nI will provide
      you with the current prompt along with prediction examples. Each example contains
      the input text, the final prediction produced by the model, and the user feedback.
      User feedback indicates whether the model prediction is correct or not. Your
      task is to analyze the examples and user feedback, determining whether the existing
      instruction is describing the task reflected by these examples precisely, and
      suggests changes to the prompt to address the incorrect predictions.\n\n## Step
      2\nNext, you will carefully review your reasoning in step 1, integrate the insights
      to refine the prompt, and provide me with the new prompt that improves the model\u2019s
      performance."}, {"role": "assistant", "content": "Sure, I\u2019d be happy to
      help you with this prompt engineering problem. Please provide me with the current
      prompt and the examples with user feedback."}, {"role": "user", "content": "\n##
      Current prompt\nClassify input text.\n\n## Examples\n### Example #0\n\nText:
      None\n\nCategory: Labels.Electronics\n\nUser feedback: Prediction is incorrect.
      Correct answer: \"Electronics\"\n\n\n### Example #1\n\nText: None\n\nCategory:
      Labels.Electronics\n\nUser feedback: Prediction is incorrect. Correct answer:
      \"Furniture/Home Decor\"\n\n\n### Example #2\n\nText: None\n\nCategory: Labels.Footwear/Clothing\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Footwear/Clothing\"\n\n\n###
      Example #3\n\nText: None\n\nCategory: Labels.Furniture/Home Decor\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n### Example
      #4\n\nText: None\n\nCategory: Labels.Beauty/Personal Care\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Beauty/Personal Care\"\n\n\n\nSummarize
      your analysis about incorrect predictions and suggest changes to the prompt."}],
      "model": "gpt-4-turbo", "max_tokens": 1000, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2737'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4RV32/bRgx+919BKC+bYbu24zaJ37o0QVOgRZZlw4B5SE4nSrrldKcceYm9Iv/7
        wJP8I0GBvdiASH4kP37kfR8AZKbIlpDpWrFuWjs+8+vq5vbDzR9fvv7+pagv7KcP4Vf60z7enHPM
        RhLh839Q8zZqon3TWmTjXWfWARWjoM5O5rOz4/np+1kyNL5AK2FVy+PFmGPI/Xg+nS/G08V4etZH
        195opGwJfw0AAL6nX6nTFbjOljAdbb80SKQqzJY7J4AseCtfMkVkiJXjbLQ3au8YXSr96OgIPjpl
        N2QIfAlXTvsQUDNcByyMln5o5VbuMvgGuEbAtZJGCdrgn0yBxQgMg2pbVIGAa8XJrVHGgSGKCNYg
        gXHps8oJnUZJpTRHZYFxzWBcGxl+WmW3uOYlfPMOV9nPUPrQgQllwB6UlPovgnIFaCvNlZsJ3O5c
        DAGuW9SMhbhvXUArxsoHKSRXhAX4rpyUvKdjBHlkeDZc+8ig3CZZU3eGIDqVWxTQFkPpg5BhCFjR
        AyitY1CMNtViCAJStJyaNjtC2z2hoAgI0W1Z2XI6EaZlJL/FqkLqfIWE81q5CknSi/918E3L4jyb
        wHB4blWQLsV0g4/RBGzQcYoUQuFK6B0Ol4mpNgUD1T7aQuiyRhu2GyBWjP0E90MxBA61aCxsdgPp
        iTVaSY2Jhb71Z2MtoKMYeqhIGIS+AoMIsUjxDrsB9RqCgBaflOsTS5Ytp9vRbQ74SzTNpfOPRQFX
        jjhEvSfrs3KFNa6Cr4ZI/oWDH3dvnLaxQDCHGN5B7Z8PhNc751irJwRT7qWzo6jpUk3g0oeEppzG
        0QGG7iF2qToCAj5GpNeEl+C8Q0HdrhgI7f5wQG8GoJVzngW+VycWOyULdGLsWBi76KSWFhBusDQO
        i15Pw+Fy5QDg/v4+/V9bVIS7GanDIoXn1zUcrmESwW75DtiSndyvIkVdyypcWNQcvDOaRnAZgzMc
        A7777BuET6h9GMGl9/yMKrw7t55r46oRIOsJXAlZPfrhSfp/fib7XldukagJ4UA9IpgrhsZUdQrM
        0WFptFHpEKW1bn1SqIIGda2coaYfTo36gX4slFXWHTcZKTYtb0bpmJkSyI96dVKKk8U53JGEk2Pp
        A4JilmAR95spSDe/bMDIkOUIiAvXSAi6uyGdKPs1SIPKZZ9RBQyplEYSYFmiZiNyd1BFU/Q4+1Pc
        Bl9EjftF9ZHbyG8O7OGR7+/sbkqTrH+SXnZvmfVVG3wu756L1u6+l8YZqu8CKvJO3i1i33bhLwOA
        v9ObGV89g1nX4h37B3QC+H5+2uFl+6d6bz2eHfdW9qzs3nC6mA36EjPaEGNzVxpXYWiD6d7Qsr07
        yY+nJwu9yKfZ4GXwHwAAAP//AwC8Py4DUQgAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e47e08ac56926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:41:02 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '11437'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '2000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '1998389'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 48ms
      x-request-id:
      - req_d504459c27441ab1743631c4f5b0b44a
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nText:
      {text}\nCategory: {predicted_category}\n```\n\nHere:\n- \"Text: {text}\" is
      input template,\n- \"{prompt}\" is the LLM prompt,\n- \"Category: {predicted_category}\"
      is the output template.\n\nModel can produce erroneous output if a prompt is
      not well defined. In our collaboration, we\u2019ll work together to refine a
      prompt. The process consists of two main steps:\n\n## Step 1\nI will provide
      you with the current prompt along with prediction examples. Each example contains
      the input text, the final prediction produced by the model, and the user feedback.
      User feedback indicates whether the model prediction is correct or not. Your
      task is to analyze the examples and user feedback, determining whether the existing
      instruction is describing the task reflected by these examples precisely, and
      suggests changes to the prompt to address the incorrect predictions.\n\n## Step
      2\nNext, you will carefully review your reasoning in step 1, integrate the insights
      to refine the prompt, and provide me with the new prompt that improves the model\u2019s
      performance."}, {"role": "assistant", "content": "Sure, I\u2019d be happy to
      help you with this prompt engineering problem. Please provide me with the current
      prompt and the examples with user feedback."}, {"role": "user", "content": "\n##
      Current prompt\nClassify input text.\n\n## Examples\n### Example #0\n\nText:
      None\n\nCategory: Labels.Electronics\n\nUser feedback: Prediction is incorrect.
      Correct answer: \"Electronics\"\n\n\n### Example #1\n\nText: None\n\nCategory:
      Labels.Electronics\n\nUser feedback: Prediction is incorrect. Correct answer:
      \"Furniture/Home Decor\"\n\n\n### Example #2\n\nText: None\n\nCategory: Labels.Footwear/Clothing\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Footwear/Clothing\"\n\n\n###
      Example #3\n\nText: None\n\nCategory: Labels.Furniture/Home Decor\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n### Example
      #4\n\nText: None\n\nCategory: Labels.Beauty/Personal Care\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Beauty/Personal Care\"\n\n\n\nSummarize
      your analysis about incorrect predictions and suggest changes to the prompt."},
      {"role": "assistant", "content": "### Analysis of Incorrect Predictions\n\nFrom
      the examples provided, it appears that the main issue lies in the absence of
      actual text input (\"Text: None\") for the model to analyze and classify. The
      model is expected to classify categories based on the text content, but without
      any text, it is unable to perform this task accurately. This results in incorrect
      predictions as seen in the examples.\n\n### Suggestions for Changes to the Prompt\n\n1.
      **Clarify the Requirement for Text Input**: The prompt should explicitly state
      that text input is necessary for the classification task. This will ensure that
      users understand the need to provide relevant text for accurate category prediction.\n\n2.
      **Add Instructions for Handling Missing Text**: The prompt should include instructions
      on how the model should behave if the text input is missing. For instance, the
      model could be instructed to request text input if none is provided or to state
      that classification cannot be performed without text.\n\n3. **Example of a Refined
      Prompt**:\n   ```\n   Please provide a text input for classification. The model
      will classify the text into categories such as Electronics, Furniture/Home Decor,
      Footwear/Clothing, etc. If no text is provided, classification cannot be performed.\n   ```\n\n4.
      **Error Handling**: It might be beneficial to incorporate a mechanism that checks
      if the text input is \"None\" or empty, and if so, prompts the user to provide
      text before attempting classification.\n\nBy implementing these changes, the
      prompt will be clearer and more effective in guiding the model to produce accurate
      outputs based on the actual text content provided."}, {"role": "user", "content":
      "\nNow please carefully review your reasoning in Step 1 and help with Step 2:
      refining the prompt.\n\n## Current prompt\nClassify input text.\n\n## Follow
      this guidance to refine the prompt:\n\n1. The new prompt should should describe
      the task precisely, and address the points raised in the user feedback.\n\n2.
      The new prompt should be similar to the current prompt, and only differ in the
      parts that address the issues you identified in Step 1.\n    Example:\n    -
      Current prompt: \"Generate a summary of the input text.\"\n    - New prompt:
      \"Generate a summary of the input text. Pay attention to the original style.\"\n\n3.
      Reply only with the new prompt. Do not include input and output templates in
      the prompt.\n"}], "model": "gpt-4-turbo", "max_tokens": 1000, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '5189'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1RRyW7bMBC96ysGPEuOvKCOfKzjND301KJAUQQGRY0kphSHHY4SB4H/vaDlBb3w
        8JaZxzcfGYCyjdqAMr0WMwRXVHToGuRvT7u3avta//j+c0f6V2ziZ/wyqDw5qH5BIxfXzNAQHIol
        P9GGUQumqfP1Yl4tF/eflidioAZdsnVBilUhI9dULMrFqihXRVmd3T1Zg1Ft4HcGAPBxelNO3+BB
        baDML8iAMeoO1eYqAlBMLiFKx2ijaC8qv5GGvKA/Rd+6pGjfQXqEwPRqG2xA8CBgvRDoEJgCWy0I
        Rgt2xBYjxNH0oCPsHBph8tbEHB5H9lZGxrsnGhAe0BDn8Egkb6j5butIeuu7HFDMDL624Om8KV5X
        52B9Y9MmkF7LJUkYTyrGv6NlbKAlBjNFT2JLfqbO/ztei3HUBaY6lehH5654a72N/Z5RR/KphCgU
        JvsxA3g+HWD8r1MVmIYge6E/6NPAqqqmeep29xu7vJBCot0Nn5fL++wcUcX3KDjsW+s75MB2Okgb
        9ut6Wa5XZlWXKjtm/wAAAP//AwDfG/oqngIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e482a1cdf6926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:41:05 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '1971'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '2000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '1997803'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 65ms
      x-request-id:
      - req_5c6b9af6256535b61cd549a35f5cc64f
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the provided text
      into appropriate categories such as Electronics, Furniture/Home Decor, Footwear/Clothing,
      etc. If no text is provided, indicate that text input is required for classification."},
      {"role": "user", "content": "Text: Apple product with a sleek design."}], "model":
      "gpt-3.5-turbo", "max_tokens": 1000, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '987'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSTW/bMAy9+1cIPCdFnNZt4uO6YuthGFo0A7alMBSZdpTJoiDRaLIg/32w49pu
        MB8Egk/vQ6SPkRCgc0gFqK1kVTkzXdK+LL59Wv5I/j7c3JercvH4tnpLZrT8cmNh0jBos0PF76wr
        RZUzyJo6WHmUjI1qfDePl9fzxW3SAhXlaBpa6Xh6fZVMufYbms7iedIxt6QVBkjF70gIIY7t2WS0
        Oe4hFbPJe6fCEGSJkPaXhABPpumADEEHlpZhMoCKLKNtYtvamBHARCZT0pjB+PwdR/UwKGlMFu/u
        X37Wvx719ileFfPPYZ/s8ufN15HfWfrg2kBFbVU/oBHe99MLMyHAyqrlfq/Z1XzBFAKkL+sKLTep
        4bgG5zHXijHPlGQsyR/WkK7hwaBiT1arsIYTfFA5Rf+rX7vq1A/bUOk8bcLF7KDQVodt5lGG9g0Q
        mNzZopF7bZdaf9gTOE+V44zpD9pGME7isx4M/9GA3nUYE0szJi2iLiCEQ2CsskLbEr3zul9xdIr+
        AQAA//8DALHxpNPhAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e4839287e6926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:41:05 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '245'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998936'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_b7df8a04e7c464a1f5063bde117dc342
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the provided text
      into appropriate categories such as Electronics, Furniture/Home Decor, Footwear/Clothing,
      etc. If no text is provided, indicate that text input is required for classification."},
      {"role": "user", "content": "Text: Laptop stand for the kitchen."}], "model":
      "gpt-3.5-turbo", "max_tokens": 1000, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '982'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSS4vbMBC++1eIOSdLHmST9a0t26UsNA30UGgWo8gTRVlZo0pjuiHkvxc5Xtsb
        6oMY5tP30IzPmRBgSsgFqINkVXk7fqA3reWfL4vvfuK+Pj7z382c1s8/zHH1GmCUGLQ7ouJ31p2i
        yltkQ+4Kq4CSMalOl7Ppw3y2ur9vgIpKtImmPY/nd4sx12FH48l0tmiZBzIKI+TidyaEEOfmTBld
        iW+Qi8novVNhjFIj5N0lISCQTR2QMZrI0jGMelCRY3QptqutHQBMZAslre2Nr995UPeDktYW32ab
        9a9A+pOuPhv784k3jlby6Tjwu0qffBNoXzvVDWiAd/38xkwIcLJquOuafc03TCFABl1X6DilhvMW
        fMDSKMayUJJRUzhtId/Co0XFgZxRcQsX+KByyf5Xv7TVpRu2Je0D7eLN7GBvnImHIqCMzRsgMvmr
        RZJ7aZZaf9gT+ECV54LpFV0SnC7apUL/H/XossWYWNohaZm1ASGeImNV7I3TGHww3YqzS/YPAAD/
        /wMAzhWA0+ECAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e483caee36926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:41:06 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '183'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998937'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_8d8d66c5172d1d3bbb6c3929b5644008
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the provided text
      into appropriate categories such as Electronics, Furniture/Home Decor, Footwear/Clothing,
      etc. If no text is provided, indicate that text input is required for classification."},
      {"role": "user", "content": "Text: Chocolate leather boots."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "temperature": 0.0, "tool_choice": {"type": "function",
      "function": {"name": "Output"}}, "tools": [{"type": "function", "function":
      {"name": "Output", "description": "Correctly extracted `Output` with all the
      required parameters with correct types", "parameters": {"$defs": {"Labels":
      {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '977'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSS0/jMBC+51dYc25ZUugrtxWoWu1KCxe0YimKXGeamrU9xp6Ilqr/fZWkpKEi
        B2s0n7+HZ7JPhABdQCZAbSQr681wTtuy/P1At3ryvvv+4/7PYvH6d+rSxYufPsKgZtDqBRV/sC4U
        WW+QNbkWVgElY62aTkfp/Go0m0wawFKBpqaVnodXF+MhV2FFw8t0ND4yN6QVRsjEUyKEEPvmrDO6
        AreQicvBR8dijLJEyLpLQkAgU3dAxqgjS8cwOIGKHKOrY7vKmB7ARCZX0piTcfvte/VpUNKY/FXb
        B5zMi2L1K/7E9f3t9d328aZIe36t9M43gdaVU92AenjXz87MhAAnbcO9q9hXfMYUAmQoK4uO69Sw
        X4IPWGjFWORKMpYUdkvIlrAg4jeU4duNId5oVy7hAJ+0DslX9fOxOnQjN1T6QKt4NkFYa6fjJg8o
        Y/MSiEy+tajlnpvVVp+2BT6Q9Zwz/UNXC6bXs1YPTn9TDz3uHZhYml5/PEuOCSHuIqPN19qVGHzQ
        3aaTQ/IfAAD//wMAYFIMbegCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e483fdc3d6926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:41:07 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '350'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998940'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_47c6a8f005311113cd3152c5bb13ced6
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the provided text
      into appropriate categories such as Electronics, Furniture/Home Decor, Footwear/Clothing,
      etc. If no text is provided, indicate that text input is required for classification."},
      {"role": "user", "content": "Text: Wooden cream for surfaces."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "temperature": 0.0, "tool_choice": {"type": "function",
      "function": {"name": "Output"}}, "tools": [{"type": "function", "function":
      {"name": "Output", "description": "Correctly extracted `Output` with all the
      required parameters with correct types", "parameters": {"$defs": {"Labels":
      {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '979'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFLfa9swEH73XyHuOemapGkcP5ZSuo2u0K6FdSlGli+OWlknpDPEhPzv
        w05iu2F+EMd9+n7ozrtICNA5JALURrIqnRkvaVts7m62vxbZuv6MH5+e/7zw8/zm+unHwsKoYVD2
        gYpPrAtFpTPImo6w8igZG9XJYjpZzqbx9aIFSsrRNLTC8Xh2MR9z5TMaX06m8yNzQ1phgET8jYQQ
        YteeTUab4xYScTk6dUoMQRYISXdJCPBkmg7IEHRgaRlGPajIMtomtq2MGQBMZFIljemND99uUPeD
        ksakr0v6uPoev2U1Vb9f3n6614eHODOzgd9BunZtoHVlVTegAd71kzMzIcDKsuU+VuwqPmMKAdIX
        VYmWm9SwW4HzmGvFmKdKMhbk6xUkK7irvNVcefx2TyWKW1TkV7CHL3L76H/1+7Had1M3VDhPWTgb
        Iqy11WGTepShfQwEJnewaOTe2+1WXxYGzlPpOGX6RNsITq6WBz3of6gePWFMLM2ANI+jY0AIdWAs
        07W2BXrndbfraB/9AwAA//8DAEEzP07qAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e4843ab466926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:41:07 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '277'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998939'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_eb84331d7fbd81c9c133ea6f5b7f2937
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the provided text
      into appropriate categories such as Electronics, Furniture/Home Decor, Footwear/Clothing,
      etc. If no text is provided, indicate that text input is required for classification."},
      {"role": "user", "content": "Text: Natural finish for your lips."}], "model":
      "gpt-3.5-turbo", "max_tokens": 1000, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '982'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFJNb9swDL37Vwg8J12cLkvj2zYMHbauCbDDui2FociMolYWBYkGagT5
        74Md13aD+SAQfHofIn1MhABTQCZAHSSr0tvpil704cv7h+eZqu/T+5vA9uf3j+GOdl9vNzBpGLR7
        QsWvrCtFpbfIhtwZVgElY6OaLufp6np+82HZAiUVaBua9jy9vlpMuQo7ms7S+aJjHsgojJCJv4kQ
        Qhzbs8noCnyBTMwmr50SY5QaIesvCQGBbNMBGaOJLB3DZAAVOUbXxHaVtSOAiWyupLWD8fk7juph
        UNLa/MksC830uw7f1vrH7Z+Hzd2vxVoXI7+zdO3bQPvKqX5AI7zvZxdmQoCTZctdV+wrvmAKATLo
        qkTHTWo4bsEHLIxiLHIlGTWFegvZFj6hrLh+t8EQyUkrPsuAWzjBG7lT8r/6satO/dQtaR9oFy+G
        CHvjTDzkAWVsHwORyZ8tGrnHdrvVm4WBD1R6zpme0TWC6aLbLgw/1ICuOoyJpR2TVkkXEGIdGct8
        b5zG4IPpd52ckn8AAAD//wMAO9GDuuoCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e48477a846926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:41:08 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '279'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998937'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_2d2378e9230f925bfb5a6d08ff00ada0
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nText:
      {text}\nCategory: {predicted_category}\n```\n\nHere:\n- \"Text: {text}\" is
      input template,\n- \"{prompt}\" is the LLM prompt,\n- \"Category: {predicted_category}\"
      is the output template.\n\nModel can produce erroneous output if a prompt is
      not well defined. In our collaboration, we\u2019ll work together to refine a
      prompt. The process consists of two main steps:\n\n## Step 1\nI will provide
      you with the current prompt along with prediction examples. Each example contains
      the input text, the final prediction produced by the model, and the user feedback.
      User feedback indicates whether the model prediction is correct or not. Your
      task is to analyze the examples and user feedback, determining whether the existing
      instruction is describing the task reflected by these examples precisely, and
      suggests changes to the prompt to address the incorrect predictions.\n\n## Step
      2\nNext, you will carefully review your reasoning in step 1, integrate the insights
      to refine the prompt, and provide me with the new prompt that improves the model\u2019s
      performance."}, {"role": "assistant", "content": "Sure, I\u2019d be happy to
      help you with this prompt engineering problem. Please provide me with the current
      prompt and the examples with user feedback."}, {"role": "user", "content": "\n##
      Current prompt\nClassify the provided text into appropriate categories such
      as Electronics, Furniture/Home Decor, Footwear/Clothing, etc. If no text is
      provided, indicate that text input is required for classification.\n\n## Examples\n###
      Example #0\n\nText: None\n\nCategory: Labels.Electronics\n\nUser feedback: Prediction
      is incorrect. Correct answer: \"Electronics\"\n\n\n### Example #1\n\nText: None\n\nCategory:
      Labels.Electronics\n\nUser feedback: Prediction is incorrect. Correct answer:
      \"Furniture/Home Decor\"\n\n\n### Example #2\n\nText: None\n\nCategory: Labels.Footwear/Clothing\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Footwear/Clothing\"\n\n\n###
      Example #3\n\nText: None\n\nCategory: Labels.Furniture/Home Decor\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n### Example
      #4\n\nText: None\n\nCategory: Labels.Beauty/Personal Care\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Beauty/Personal Care\"\n\n\n\nSummarize
      your analysis about incorrect predictions and suggest changes to the prompt."}],
      "model": "gpt-4-turbo", "max_tokens": 1000, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2919'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6xV227jRgx991cQylugeB3HzcVvi7Rpgl6wSNPtQ10EoxEtcSMPVQ4VR1jk3wvq
        YjtAWqBoXwx5Zkiec3hm+HUCkFCeLCHxpVO/qauTK34p6OfP54vv7z9z1X4pf7tgiveh/vUs2yap
        RXD2Bb2OUVPPm7pCJQ79thd0ipb19GJ+enU2vzy/7DY2nGNlYUWtJ4sTbSTjk/lsvjiZLU5mV0N0
        yeQxJkv4fQIA8LX7NZwhx5dkCbN0XNlgjK7AZLk7BJAIV7aSuBgpqguapPtNz0ExdNCPjo7gY3BV
        GykCr+EueBZBr/BJMCdvfOIqrMKN8Aa0RMAXZ0Qj1MLPlGOeAilQBLR/QUFLp93JjqjtOFXc1Eqh
        AGXwlYFat6D4ohEo2JpTLFgILQ0G2JYYIHB3xDKMtabw0XuWfEhlVXwjYmVr4U2t6UHlWHJT5UAh
        J8s/AOsyhrrp8gr+2ZBgDmuWEZgdJg5A6/cR3PIWn1HStxxpFK5qwdIUwTAe8IqNL8FF+K5Cr8KB
        fEzhppFA2gh+uOUNwrfoWVK4YdYtOvlwXbGWFIoUUP00hS1pyY2CC+0Bkan1xxr5A7ZwF2ODEe6s
        FbQmzJercDqF4+OfKFJQlFpQe4Jdu6NK03f5+HgJD4eUAiu4vEQ5ULt2ohbYfXeK97LSkCiaGZT3
        ojsIOOh7IP3f99cQoduZauOerLqTjFSctKOiLdR7f05XAQBWYW48f3T+yRBeV05IW6AAnzqgI78B
        9oaKUjuOGYKv0AmwAL7UFXlSwMBNUVr0SK1TYaePMgiuxVGAtV2NEWh4H2LPWEsU7KXtqO8690tT
        FBgVc7guXSgwjnr30FfhgcHluWCMthwtifU5PWzE4PcMQfCZIuaWJDPAgntiLjMHWdjO/K7D+A9N
        uR1gO4g7oF0N4rAcOBzB/VB1xLxKrndXvUfZpRt9oAyuroVrITPK/3pV4O7dy5tCzr2t+xfp8Dk6
        sF7nhqqFqP/+2ZiuEhPkoeyO9YIM/RlbULUH1+U/OupdktuSfDnaocSqNhsL5o0fPYwiHJCbCNxo
        3WgEziLKM9pz+eaZnybD3HjdDZyKi1o4s+EUmqrara8pUCwfBV3kYMMlKtd9+OsE4I9usDVvZlXS
        S/Oo/ITBEn5zPu/zJft5ut89mw1jL1FWV+03Ls/nkwFiEtuouHlcUyjstaN+0K3rx4vsbHax8Its
        lkxeJ38BAAD//wMAdtFz5fYHAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e484ad9516926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:41:21 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '12684'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '2000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '1998344'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 49ms
      x-request-id:
      - req_9ce6c4835ed50e2ccd893c5064009ba6
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nText:
      {text}\nCategory: {predicted_category}\n```\n\nHere:\n- \"Text: {text}\" is
      input template,\n- \"{prompt}\" is the LLM prompt,\n- \"Category: {predicted_category}\"
      is the output template.\n\nModel can produce erroneous output if a prompt is
      not well defined. In our collaboration, we\u2019ll work together to refine a
      prompt. The process consists of two main steps:\n\n## Step 1\nI will provide
      you with the current prompt along with prediction examples. Each example contains
      the input text, the final prediction produced by the model, and the user feedback.
      User feedback indicates whether the model prediction is correct or not. Your
      task is to analyze the examples and user feedback, determining whether the existing
      instruction is describing the task reflected by these examples precisely, and
      suggests changes to the prompt to address the incorrect predictions.\n\n## Step
      2\nNext, you will carefully review your reasoning in step 1, integrate the insights
      to refine the prompt, and provide me with the new prompt that improves the model\u2019s
      performance."}, {"role": "assistant", "content": "Sure, I\u2019d be happy to
      help you with this prompt engineering problem. Please provide me with the current
      prompt and the examples with user feedback."}, {"role": "user", "content": "\n##
      Current prompt\nClassify the provided text into appropriate categories such
      as Electronics, Furniture/Home Decor, Footwear/Clothing, etc. If no text is
      provided, indicate that text input is required for classification.\n\n## Examples\n###
      Example #0\n\nText: None\n\nCategory: Labels.Electronics\n\nUser feedback: Prediction
      is incorrect. Correct answer: \"Electronics\"\n\n\n### Example #1\n\nText: None\n\nCategory:
      Labels.Electronics\n\nUser feedback: Prediction is incorrect. Correct answer:
      \"Furniture/Home Decor\"\n\n\n### Example #2\n\nText: None\n\nCategory: Labels.Footwear/Clothing\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Footwear/Clothing\"\n\n\n###
      Example #3\n\nText: None\n\nCategory: Labels.Furniture/Home Decor\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n### Example
      #4\n\nText: None\n\nCategory: Labels.Beauty/Personal Care\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Beauty/Personal Care\"\n\n\n\nSummarize
      your analysis about incorrect predictions and suggest changes to the prompt."},
      {"role": "assistant", "content": "### Analysis of Incorrect Predictions\n\nFrom
      the examples provided, it is evident that the model is attempting to classify
      texts into categories even when no text is provided. According to the current
      prompt, the model should indicate that text input is required for classification
      if no text is provided. However, the model is incorrectly assigning categories
      such as Electronics, Furniture/Home Decor, Footwear/Clothing, etc., without
      any text input.\n\n### Key Issues Identified:\n1. **Misinterpretation of Instructions**:
      The model is not adhering to the part of the prompt that instructs it to indicate
      a need for text input when no text is provided. Instead, it is making arbitrary
      category predictions.\n   \n2. **Lack of Clarity in Prompt**: The prompt might
      not be clear or explicit enough in instructing the model to refrain from making
      any category predictions when there is no text.\n\n### Suggested Changes to
      the Prompt\nTo address these issues, the prompt should be revised to be more
      explicit about the required action when no text is provided. Here is a suggested
      revision:\n\n#### Revised Prompt\n\"Classify the provided text into appropriate
      categories such as Electronics, Furniture/Home Decor, Footwear/Clothing, etc.
      If no text is provided, do not attempt to classify. Instead, clearly state that
      text input is required for classification.\"\n\nThis revised prompt explicitly
      instructs the model to refrain from making any category predictions when no
      text is provided, which should help in reducing the erroneous outputs observed
      in the examples."}, {"role": "user", "content": "\nNow please carefully review
      your reasoning in Step 1 and help with Step 2: refining the prompt.\n\n## Current
      prompt\nClassify the provided text into appropriate categories such as Electronics,
      Furniture/Home Decor, Footwear/Clothing, etc. If no text is provided, indicate
      that text input is required for classification.\n\n## Follow this guidance to
      refine the prompt:\n\n1. The new prompt should should describe the task precisely,
      and address the points raised in the user feedback.\n\n2. The new prompt should
      be similar to the current prompt, and only differ in the parts that address
      the issues you identified in Step 1.\n    Example:\n    - Current prompt: \"Generate
      a summary of the input text.\"\n    - New prompt: \"Generate a summary of the
      input text. Pay attention to the original style.\"\n\n3. Reply only with the
      new prompt. Do not include input and output templates in the prompt.\n"}], "model":
      "gpt-4-turbo", "max_tokens": 1000, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '5462'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//VFLLbtwwDLz7Kwid7Y3tONjsXtMu0sepQA9FUyy0Mm0rkUWVotM1gvx7
        oX22Fx04M+RwqLcMQNlWrUGZQYsZgytWtO9fH1ek8cd4N2923z7XX788f69fnK9Z5UlBu2c0clYt
        DI3BoVjyR9gwasHUtVrW1eq2vr+vDsBILbok64MUTSET76ioy7opyqYoVyf1QNZgVGv4mQEAvB3e
        5NO3uFdrKPNzZcQYdY9qfSEBKCaXKkrHaKNoLyq/goa8oD9Yf1IPLnG6GWRACEyvtsUWBPcC1guB
        DoEpsNWCYLRgT2wxQpzMADrCR4dGmLw1MYfNxN7KxHjzSCPCBzTEOWyI5A9qvnlwJIP1fQ4oZgGf
        OvB0mhQvo3PAfXDWWHEzREljZdBydhSmA5vx92QZW+iIwRxXsEan+EH7Fhg71tZDxzRCQntvfQ/a
        z+cl5sWTUqdM3i9hOuoD0y4F7yfnLvXOehuHLaOO5FNwUSgc5e8ZwK/D0ab/7qAC0xhkK/SCPjWs
        yrvm2FBdP8sVbpYnUEi0+0dWlVV28qjiHAXHbWd9jxzYHq/Yhe1yd1suG9PsSpW9Z38BAAD//wMA
        ZYqYstMCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e489bbb656926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:41:24 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '2653'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '2000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '1997734'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 67ms
      x-request-id:
      - req_43d4196b5a26709d23994b8eb3a485bf
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "\"Classify the provided text
      into appropriate categories such as Electronics, Furniture/Home Decor, Footwear/Clothing,
      etc. If no text is provided, explicitly state that text input is required for
      classification and refrain from assigning any category.\""}, {"role": "user",
      "content": "Text: Apple product with a sleek design."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "temperature": 0.0, "tool_choice": {"type": "function",
      "function": {"name": "Output"}}, "tools": [{"type": "function", "function":
      {"name": "Output", "description": "Correctly extracted `Output` with all the
      required parameters with correct types", "parameters": {"$defs": {"Labels":
      {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '1039'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSS2/bMAy++1cIPCdFHnXb+NitGbpHA6Q7tGgKQ5EZR50sahK9NQvy3wvbqe0G
        80Eg+Ol7iPQ+EgJ0BokAtZWsCmeGM3rNd9PfX8xmufzxb/nVP4QyxN/v1Lf55CcMKgatX1DxO+tM
        UeEMsibbwMqjZKxUx5eT8Ww6ubo6r4GCMjQVLXc8nJ7FQy79moaj8SQ+MrekFQZIxFMkhBD7+qwy
        2gxfIRGjwXunwBBkjpC0l4QAT6bqgAxBB5aWYdCBiiyjrWLb0pgewEQmVdKYzrj59r26G5Q0Jl3c
        X9+NXm7i6R/9uOCHz/Nbvp///eR7fo30ztWBNqVV7YB6eNtPTsyEACuLmrso2ZV8whQCpM/LAi1X
        qWG/Aucx04oxS5VkzMnvVpCs4MagYk9Wq7CCA3xQOUT/q5+P1aEdtqHceVqHk9nBRlsdtqlHGeo3
        QGByjUUl91wvtfywJ3CeCscp0y+0leA4njV60P1HHXp5xJhYmh7p4iI6BoSwC4xFutE2R++8blcc
        HaI3AAAA//8DADS8dLzhAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e48adfacd6926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:41:24 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '205'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998924'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_569ec72a1e46987150702191d61351a2
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "\"Classify the provided text
      into appropriate categories such as Electronics, Furniture/Home Decor, Footwear/Clothing,
      etc. If no text is provided, explicitly state that text input is required for
      classification and refrain from assigning any category.\""}, {"role": "user",
      "content": "Text: Laptop stand for the kitchen."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "temperature": 0.0, "tool_choice": {"type": "function",
      "function": {"name": "Output"}}, "tools": [{"type": "function", "function":
      {"name": "Output", "description": "Correctly extracted `Output` with all the
      required parameters with correct types", "parameters": {"$defs": {"Labels":
      {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '1034'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFLfT9swEH7PX2Hdc4tIaUbJG0IbAjYYQoxJK4pc55oaHJ9lXxBR1f99
        SlKSUJEH63Sfvx++yzYSAnQOqQC1kaxKZ6Zn9F7Uxd9avbw+/bm4Ld90nvwm8j/zm0eCScOg1Qsq
        /mAdKSqdQdZkO1h5lIyNanw6i89OZovFvAVKytE0tMLx9OQomXLlVzQ9jmfJnrkhrTBAKv5FQgix
        bc8mo83xHVJxPPnolBiCLBDS/pIQ4Mk0HZAh6MDSMkwGUJFltE1sWxkzApjIZEoaMxh333ZUD4OS
        xmQ/HuZ35zjT89XV5f3t2/2v8/jx6drNR36ddO3aQOvKqn5AI7zvpwdmQoCVZcu9q9hVfMAUAqQv
        qhItN6lhuwTnMdeKMc+UZCzI10tIl/DdoGJPVquwhB18UtlFX9XP+2rXD9tQ4TytwsHsYK2tDpvM
        owztGyAwuc6ikXtul1p92hM4T6XjjOkVbSMYJ4tOD4b/aEBP9xgTSzMifUuifUAIdWAss7W2BXrn
        db/iaBf9BwAA//8DAPU/C5DhAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e48b178676926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:41:25 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '223'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998925'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_576303817f6a0ea3becfdce255e6c04c
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "\"Classify the provided text
      into appropriate categories such as Electronics, Furniture/Home Decor, Footwear/Clothing,
      etc. If no text is provided, explicitly state that text input is required for
      classification and refrain from assigning any category.\""}, {"role": "user",
      "content": "Text: Chocolate leather boots."}], "model": "gpt-3.5-turbo", "max_tokens":
      1000, "temperature": 0.0, "tool_choice": {"type": "function", "function": {"name":
      "Output"}}, "tools": [{"type": "function", "function": {"name": "Output", "description":
      "Correctly extracted `Output` with all the required parameters with correct
      types", "parameters": {"$defs": {"Labels": {"enum": ["Footwear/Clothing", "Electronics",
      "Food/Beverages", "Furniture/Home Decor", "Beauty/Personal Care"], "title":
      "Labels", "type": "string"}}, "properties": {"predicted_category": {"allOf":
      [{"$ref": "#/$defs/Labels"}], "description": "The classification label"}}, "required":
      ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '1029'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFJLb9swDL77Vwg8J12cVx0fN2BYsWUDui6HLoUhy4ytThYFicaaBfnv
        hZ3UcYP5IBD89D1E+hAJAbqAVICqJKvamfGKXsp/3+7Dw3119xG/r9Emt/Mvk3jDc/wJo5ZB+TMq
        fmPdKKqdQdZkT7DyKBlb1fh2Gq9m0yRZdEBNBZqWVjoez24WY258TuNJPF2cmRVphQFS8TsSQohD
        d7YZbYEvkIrJ6K1TYwiyREj7S0KAJ9N2QIagA0vLMLqAiiyjbWPbxpgBwEQmU9KYi/HpOwzqy6Ck
        MdlmRc/zu+Qx31Pz8Ovxq9us10luZgO/k/TedYF2jVX9gAZ430+vzIQAK+uO+6Nh1/AVUwiQvmxq
        tNymhsMWnMdCK8YiU5KxJL/fQrqFz0T8F6X/8MkQV9qWWzjCO61j9L/66Vwd+5EbKp2nPFxNEHba
        6lBlHmXoXgKByZ0sWrmnbrXNu22B81Q7zpj+oG0F48XypAeXv2mAnvcOTCzNoL9cRueEEPaBsc52
        2pbondf9pqNj9AoAAP//AwD74qdn6AIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e48b46d766926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:41:25 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '232'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998927'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_8aa965ad5d745bd9afc29f05ea643703
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "\"Classify the provided text
      into appropriate categories such as Electronics, Furniture/Home Decor, Footwear/Clothing,
      etc. If no text is provided, explicitly state that text input is required for
      classification and refrain from assigning any category.\""}, {"role": "user",
      "content": "Text: Wooden cream for surfaces."}], "model": "gpt-3.5-turbo", "max_tokens":
      1000, "temperature": 0.0, "tool_choice": {"type": "function", "function": {"name":
      "Output"}}, "tools": [{"type": "function", "function": {"name": "Output", "description":
      "Correctly extracted `Output` with all the required parameters with correct
      types", "parameters": {"$defs": {"Labels": {"enum": ["Footwear/Clothing", "Electronics",
      "Food/Beverages", "Furniture/Home Decor", "Beauty/Personal Care"], "title":
      "Labels", "type": "string"}}, "properties": {"predicted_category": {"allOf":
      [{"$ref": "#/$defs/Labels"}], "description": "The classification label"}}, "required":
      ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '1031'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSS2/bMAy++1cIPCddHnXa+FZ0WLvLihYFBmwpDEVmHLWyKEhUlyzIfx9sp7Yb
        zAeB4KfvIdKHRAjQBWQC1FayqpwZL2lX/i0ew+T1ly30j+fFd/o5SR/u4i6UNzCqGbR+RcUfrAtF
        lTPImmwLK4+SsVadXs2my/ns+jptgIoKNDWtdDyeX6Rjjn5N48l0lp6YW9IKA2TidyKEEIfmrDPa
        AneQicnoo1NhCLJEyLpLQoAnU3dAhqADS8sw6kFFltHWsW00ZgAwkcmVNKY3br/DoO4HJY3J/zyt
        d0zLcn75dKkc79P3uQ1vz7cDv1Z675pAm2hVN6AB3vWzMzMhwMqq4T5EdpHPmEKA9GWs0HKdGg4r
        cB4LrRiLXEnGkvx+BdkKvkVvNUePX+6pQvEVFfkVHOGT3DH5X/1yqo7d1A2VztM6nA0RNtrqsM09
        ytA8BgKTay1quZdmu/HTwsB5qhznTG9oa8FpetXqQf9D9ejyhDGxNAPSYpGcAkLYB8Yq32hbonde
        d7tOjsk/AAAA//8DAF2tMHrqAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e48b75a6f6926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:41:26 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '285'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998927'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_823f6200d3332d21f0441323df6cc6bd
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "\"Classify the provided text
      into appropriate categories such as Electronics, Furniture/Home Decor, Footwear/Clothing,
      etc. If no text is provided, explicitly state that text input is required for
      classification and refrain from assigning any category.\""}, {"role": "user",
      "content": "Text: Natural finish for your lips."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "temperature": 0.0, "tool_choice": {"type": "function",
      "function": {"name": "Output"}}, "tools": [{"type": "function", "function":
      {"name": "Output", "description": "Correctly extracted `Output` with all the
      required parameters with correct types", "parameters": {"$defs": {"Labels":
      {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '1034'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFJLb9swDL77Vwg8J10ei5P41hbrMGDDgh526FIYiszYXmVRkyggRpD/
        PthObTeYDwLBT99DpM+REFBmkAhQhWRVWT3d0qmYPb+FU/j6VMf3X56OW2R9rz8vv7GCScOgwx9U
        /M66U1RZjVyS6WDlUDI2qvP1Yr5dLjabuAUqylA3tNzydHm3mnJwB5rO5ovVlVlQqdBDIn5HQghx
        bs8mo8nwBImYTd47FXovc4SkvyQEONJNB6T3pWdpGCYDqMgwmia2CVqPACbSqZJaD8bddx7Vw6Ck
        1mm8+/HX/qK4cN93uHje+LAO2Ytdjfw66dq2gY7BqH5AI7zvJzdmQoCRVcv9GdgGvmEKAdLloULD
        TWo478E6zErFmKVKMubk6j0ke3hAGbj+tEPnyUgtHqXDPVzgg9wl+l/9eq0u/dQ15dbRwd8MEY6l
        KX2ROpS+fQx4JttZNHKv7XbDh4WBdVRZTpne0DSC89Wm04PhhxrQ7RVjYqlHpHgdXQOCrz1jlR5L
        k6Ozrux3HV2ifwAAAP//AwBPr6Px6gIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e48bb38f56926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:41:26 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '214'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998925'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_43e4c8f6edd458c966419acaf8b381d0
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nText:
      {text}\nCategory: {predicted_category}\n```\n\nHere:\n- \"Text: {text}\" is
      input template,\n- \"{prompt}\" is the LLM prompt,\n- \"Category: {predicted_category}\"
      is the output template.\n\nModel can produce erroneous output if a prompt is
      not well defined. In our collaboration, we\u2019ll work together to refine a
      prompt. The process consists of two main steps:\n\n## Step 1\nI will provide
      you with the current prompt along with prediction examples. Each example contains
      the input text, the final prediction produced by the model, and the user feedback.
      User feedback indicates whether the model prediction is correct or not. Your
      task is to analyze the examples and user feedback, determining whether the existing
      instruction is describing the task reflected by these examples precisely, and
      suggests changes to the prompt to address the incorrect predictions.\n\n## Step
      2\nNext, you will carefully review your reasoning in step 1, integrate the insights
      to refine the prompt, and provide me with the new prompt that improves the model\u2019s
      performance."}, {"role": "assistant", "content": "Sure, I\u2019d be happy to
      help you with this prompt engineering problem. Please provide me with the current
      prompt and the examples with user feedback."}, {"role": "user", "content": "\n##
      Current prompt\n\"Classify the provided text into appropriate categories such
      as Electronics, Furniture/Home Decor, Footwear/Clothing, etc. If no text is
      provided, explicitly state that text input is required for classification and
      refrain from assigning any category.\"\n\n## Examples\n### Example #0\n\nText:
      None\n\nCategory: Labels.Electronics\n\nUser feedback: Prediction is incorrect.
      Correct answer: \"Electronics\"\n\n\n### Example #1\n\nText: None\n\nCategory:
      Labels.Electronics\n\nUser feedback: Prediction is incorrect. Correct answer:
      \"Furniture/Home Decor\"\n\n\n### Example #2\n\nText: None\n\nCategory: Labels.Footwear/Clothing\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Footwear/Clothing\"\n\n\n###
      Example #3\n\nText: None\n\nCategory: Labels.Furniture/Home Decor\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n### Example
      #4\n\nText: None\n\nCategory: Labels.Beauty/Personal Care\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Beauty/Personal Care\"\n\n\n\nSummarize
      your analysis about incorrect predictions and suggest changes to the prompt."}],
      "model": "gpt-4-turbo", "max_tokens": 1000, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2971'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5xVwW4jNwy9+yuIyaFAYHsTN0ES34J0gwTbLhbbAC3QFIGs4cyw0YhaihN7dpF/
        L6QZ23G7vfRiwKJIPr73xPk2ASioLJZQ2MaobYObXfGmOb29/lJ/NB+/3v7+/Lz4+T1/2DxUv3z4
        bV1MUwav/kKr26y55TY4VGI/hK2gUUxVTy8Wp1c/Li4vL3Kg5RJdSquDzs5m2smKZ4uTxdns5Gx2
        cjVmN0wWY7GEPyYAAN/yb8LpS9wUSziZbk9ajNHUWCx3lwAKYZdOChMjRTVei+k+aNkr+gz96OgI
        rr1xfaQIXMG9tyyCVuGTYEk2zRMf/aO/FW5BGwTcmDRohCD8QiWWUyAFimAdGgFtjOZ7ecx07lnB
        lA0K+RqUc5B8VOmG6hADWqoISyCfo7YTQa+pQxsU1g168AyKm9xo23gO19aylG/qDhnTNwBiw50r
        ATfBkSV1PUQ1iiPOXNGHLtcV/NKRYAkVC1iXqKvImgQSjC9BsBJDHqpERYrWPrU2vgdrFGuWHqj6
        PtI7XuMLyjSNaJzbsfgWKm25d/1YPoLZly4xBsrIEcwqoreYFEu95kmhJOWvXV1jVCzhpjG+xrgl
        5lMmJl17YDBlKRjjoESMHQKvIsrLXoFDeKMOHrHMBVcIgi8UsUz/sA2NifR1QEZtYFEzgsvaf5+p
        /1b1oUluMj71MbYhTMBWPbTmOUt96B9oWXCnbxYqcIy0cj0IhkZMTFmkW1mFtJ/DHUoaHgzEHWfb
        oYZ5l4mt4+PP4+HA4PL4+NE/FjeDO/otPRn51k7KYEIQDkLJaePEhBFiZxswEd47tCrsycYp3Hbi
        STvBd3fcIvyElmUKt8y6RiPvbhxrQ76eAqqdw32Vex46t6WYh2RJamg/hZLfcH9A/BzufVQ05XR4
        sf/zRcwfi+ymJl97yxsYarNN0FFLPpU27YrqjrQf3xH5isXiv6T8x/IY324apDXPeOifsNtPg5W0
        GRXdeSpNMbpprNSgC8MLHB256/VDBO40jb0mbcY3ENAmW6ywMS/EkpTjTh35/UMZRp4X43J93W1l
        x3UQXqUN7jvnducVeYrNk6CJ7NMGjsphSH+dAPyZt393sNCLocmT8jP6VPD8Ytz+xf6js48uzhdj
        VFmN2wcuF4vJCLGIfVRsnyryNUoQGr4GVXjC1enJ+cXZaXlRTF4nfwMAAP//AwDRXJXzGwcAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e48beef616926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:41:35 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '8651'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '2000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '1998331'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 50ms
      x-request-id:
      - req_c77c16eb31d6bd015eb2c258619d6c86
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nText:
      {text}\nCategory: {predicted_category}\n```\n\nHere:\n- \"Text: {text}\" is
      input template,\n- \"{prompt}\" is the LLM prompt,\n- \"Category: {predicted_category}\"
      is the output template.\n\nModel can produce erroneous output if a prompt is
      not well defined. In our collaboration, we\u2019ll work together to refine a
      prompt. The process consists of two main steps:\n\n## Step 1\nI will provide
      you with the current prompt along with prediction examples. Each example contains
      the input text, the final prediction produced by the model, and the user feedback.
      User feedback indicates whether the model prediction is correct or not. Your
      task is to analyze the examples and user feedback, determining whether the existing
      instruction is describing the task reflected by these examples precisely, and
      suggests changes to the prompt to address the incorrect predictions.\n\n## Step
      2\nNext, you will carefully review your reasoning in step 1, integrate the insights
      to refine the prompt, and provide me with the new prompt that improves the model\u2019s
      performance."}, {"role": "assistant", "content": "Sure, I\u2019d be happy to
      help you with this prompt engineering problem. Please provide me with the current
      prompt and the examples with user feedback."}, {"role": "user", "content": "\n##
      Current prompt\n\"Classify the provided text into appropriate categories such
      as Electronics, Furniture/Home Decor, Footwear/Clothing, etc. If no text is
      provided, explicitly state that text input is required for classification and
      refrain from assigning any category.\"\n\n## Examples\n### Example #0\n\nText:
      None\n\nCategory: Labels.Electronics\n\nUser feedback: Prediction is incorrect.
      Correct answer: \"Electronics\"\n\n\n### Example #1\n\nText: None\n\nCategory:
      Labels.Electronics\n\nUser feedback: Prediction is incorrect. Correct answer:
      \"Furniture/Home Decor\"\n\n\n### Example #2\n\nText: None\n\nCategory: Labels.Footwear/Clothing\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Footwear/Clothing\"\n\n\n###
      Example #3\n\nText: None\n\nCategory: Labels.Furniture/Home Decor\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n### Example
      #4\n\nText: None\n\nCategory: Labels.Beauty/Personal Care\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Beauty/Personal Care\"\n\n\n\nSummarize
      your analysis about incorrect predictions and suggest changes to the prompt."},
      {"role": "assistant", "content": "### Analysis of Incorrect Predictions\n\nFrom
      the examples provided, it is clear that the model is not adhering to the instructions
      specified in the current prompt when no text is provided. According to the prompt,
      the model should explicitly state that text input is required for classification
      and refrain from assigning any category if no text is provided. However, in
      all examples, the model incorrectly assigns a category despite the absence of
      text.\n\n### Suggested Changes to the Prompt\n\nTo address the issue observed
      in the examples, the prompt needs to be revised to emphasize the importance
      of not assigning any category when no text is provided. This can be achieved
      by making the instruction more explicit and possibly rephrasing it for clarity.
      Here is a suggested revised prompt:\n\n**Revised Prompt:**\n\"Classify the provided
      text into appropriate categories such as Electronics, Furniture/Home Decor,
      Footwear/Clothing, etc. If the text input is missing or empty, do not assign
      any category. Instead, clearly state that text input is required for classification.\"\n\nThis
      revised prompt aims to eliminate ambiguity and reinforce the instruction that
      the model should not make any category prediction when there is no text input.
      This should help in aligning the model''s output with the expected behavior
      as outlined in the prompt."}, {"role": "user", "content": "\nNow please carefully
      review your reasoning in Step 1 and help with Step 2: refining the prompt.\n\n##
      Current prompt\n\"Classify the provided text into appropriate categories such
      as Electronics, Furniture/Home Decor, Footwear/Clothing, etc. If no text is
      provided, explicitly state that text input is required for classification and
      refrain from assigning any category.\"\n\n## Follow this guidance to refine
      the prompt:\n\n1. The new prompt should should describe the task precisely,
      and address the points raised in the user feedback.\n\n2. The new prompt should
      be similar to the current prompt, and only differ in the parts that address
      the issues you identified in Step 1.\n    Example:\n    - Current prompt: \"Generate
      a summary of the input text.\"\n    - New prompt: \"Generate a summary of the
      input text. Pay attention to the original style.\"\n\n3. Reply only with the
      new prompt. Do not include input and output templates in the prompt.\n"}], "model":
      "gpt-4-turbo", "max_tokens": 1000, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '5347'
      content-type:
      - application/json
      cookie:
      - __cf_bm=T0SJTsQpugGFgupQ3uTMTDB5YvOUZelyJg0Iux5Q058-1721932847-1.0.1.1-MslK6_zOTYF8Xb6ilOAytiCOuXAEIiPbGRpm4A_hdpeK2qjgG8E5.4vCpfgb9dPAgbuLp5MpLX8VYq7AUoBL9A;
        _cfuvid=hVVVlQE.h88njYQd36HSPZM4SGo7RYs_.lTrOzv56_s-1721932847415-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1RSwW7bMAy9+ysIne3UcYxmzm1N1zbYbcB6WYdAkWlbrSyqEt3FKPLvgxIn2S46
        8PE9Pj7qMwEQuhYrEKqTrHpnsor23defP+g5LNbfx83z5m64t9XH4+v7U/Eo0sig3SsqPrNminpn
        kDXZE6w8SsaoOl8W82pRfKluj0BPNZpIax1nZcaD31FW5EWZ5WWWVxO7I60wiBX8SgAAPo9v9Glr
        3IsV5Om50mMIskWxujQBCE8mVoQMQQeWlkV6BRVZRnu0/iLWJvY0I3CH4Dx96BprYNwzaMsE0jlP
        zmvJCEoytuQ1BgiD6kAG+GZQsSerVUjhYfBW8+Dx5ol6hHtU5FN4IOI/KP3N2hB32rYpIKsZbBqw
        NE0Kl9Ep1ASWGKKt1oK043nuCNLWgHtntNJsRggcXXEn+WzYDUcxj++D9lhDQx7UaUOtZLzO7EWI
        KYrDJUNDrfO0i3nbwZhLvdFWh27rUQayMa/A5E70QwLw+3ir4b/4hfPUO94yvaGNgvO8KE6C4vpH
        rnC5nEAmluZf2m2VTB5FGANjv220bdE7r0/Ha9x2uVvky1KVu1wkh+QvAAAA//8DANy/CwzKAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e48f66a116926-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:41:38 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '2531'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '2000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '1997762'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 67ms
      x-request-id:
      - req_42888788dfb5768279b3e7aca322a06c
    status:
      code: 200
      message: OK
version: 1
