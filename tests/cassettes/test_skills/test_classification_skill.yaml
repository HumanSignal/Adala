interactions:
- request:
    body: '{"messages": [{"role": "user", "content": "Hey, how''s it going?"}], "model":
      "gpt-4-turbo", "max_tokens": 10}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '109'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SQMW/CMBSE9/yKVy9dCAohEk1GpraqYGilDlUVOeaRGBw/Y79IRYj/XoUEaBcP
        d77zdz5FAEJvRAFCNZJV60ycHw5Z97TuaJe8mfZ1L/FjvQwrvVq+Vysx6RNU7VDxNTVV1DqDrMkO
        tvIoGfvW2SJN509JukgvRksbNH2sdhxnMXe+ojhN0ixOsjjJx3RDWmEQBXxFAACny9lz2g3+iAKS
        yVVpMQRZoyhulwCEJ9MrQoagA0vLYnI3FVlGe0F/RmPoAV4eW2jQIzBBg8bBkbopfDaSxRg7394z
        VDtPVc9mO2Nu+lZbHZrSowxk+26DtuZmKDhHAN+XZd0/WOE8tY5Lpj3avnKWDYXi/p9/zHG1YGJp
        7nqaRSOhCMfA2JZbbWv0zuth5taVSZ7PVSYzlYjoHP0CAAD//wMAj9uwKfQBAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f33dabbd1044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:57:52 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        path=/; expires=Tue, 30-Jul-24 23:27:52 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '497'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '2000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '1999984'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_fd838f324ad352e18488db4b90bad90b
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Hey, how''s it going?"}], "model":
      "gpt-3.5-turbo", "max_tokens": 10}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '111'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SQQU/CQBCF7/0V4168tKQUGrRngnLQA0YTYgxZytAubnfK7hQ1hP9utpSilz28
        N+/NN3sMAITaiAxEXkrOq1pH9/v9+DBfPKxTE6dvT7Pn2XK6/FKL6Yt6XYjQJ2i9w5wvqUFOVa2R
        FZmznVuUjL51OEmS0V2cTEatUdEGtY8VNUejQRpxY9cUxcMk7ZIlqRydyOA9AAA4tq9nNBv8FhnE
        4UWp0DlZoMj6IQBhSXtFSOeUY2lYhFczJ8NoWuxH1JpuYH5bwa5xDBIOynIjNfTJEByJLnzqt2oq
        aktrT2garXt9q4xy5cqidGT8Bo2m4PJccAoAPtr7mn/IorZU1bxi+kTjK4fjc6G4/ugfs7tdMLHU
        Vz0ZBx2hcD+OsVptlSnQ1la1x3rO4BT8AgAA//8DADtpGbjrAQAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f3421a3e1044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:57:53 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '186'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49999983'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_7cf32c58b1bc95fcb01a47707438d523
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify input text."}, {"role":
      "user", "content": "Text: Apple product with a sleek design."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '817'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xS32vbMBB+918h7jkpsZPOnd9WKC2ULWFdGXQpRpEvjjZZp0jnriHkfx92EtsN
        84M47tP3Q3feR0KALiAToDaSVeXM+PN2O3tLv7/IxY/k5u35m5WL2/Tru5nP68kCRg2DVr9R8Zl1
        pahyBlmTPcLKo2RsVOM0SaY3kySdtkBFBZqGVjoeT6+ux1z7FY0ncXJ9Ym5IKwyQiV+REELs27PJ
        aAt8h0xMRudOhSHIEiHrLgkBnkzTARmCDiwtw6gHFVlG28S2tTEDgIlMrqQxvfHx2w/qflDSmPwv
        P97f0ebp6cvjPb/EzzP6WX7aPviB31F659pA69qqbkADvOtnF2ZCgJVVy53X7Gq+YAoB0pd1hZab
        1LBfgvNYaMVY5EoyluR3S8iWcGdQsSerVVjCAT6oHKL/1a+n6tAN21DpPK3Cxexgra0Om9yjDO0b
        IDC5o0Uj99outf6wJ3CeKsc50x+0jWAcp0c96P+jHj1jTCzNgJTMolNACLvAWOVrbUv0zutuxdEh
        +gcAAP//AwCzlodV4QIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f344ee591044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:57:53 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '172'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998982'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_e9094236fe050d58ef11267e1623cc84
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify input text."}, {"role":
      "user", "content": "Text: Laptop stand for the kitchen."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '812'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFJLT+MwEL7nV1hzblGTAl1yXi4IwQIr0EJR5DrT1OAX9mS7UdX/jpyU
        JFSbgzWaz9/DM9kljIEsIWcgNpyEdmp68fFxun1ozLV+ev95n979ebq4cfior1f3/BEmkWFXbyjo
        i3UirHYKSVrTwcIjJ4yq6SLL5j9m2eK0BbQtUUVa5Wg6PzmbUu1XdjpLs7MDc2OlwAA5e0kYY2zX
        njGjKfEf5Gw2+epoDIFXCHl/iTHwVsUO8BBkIG4IJgMorCE0MbaplRoBZK0qBFdqMO6+3ageBsWV
        Kq4o/Aq+KSvEh+3vZzm/o7/n20s/8uukG9cGWtdG9AMa4X0/PzJjDAzXLfe2JlfTEZMx4L6qNRqK
        qWG3BOexlIKwLAQnrKxvlpAv4VKhIG+NFGEJe/imsk/+V78eqn0/bGUr5+0qHM0O1tLIsCk88tC+
        AQJZ11lEudd2qfW3PYHzVjsqyL6jiYJpet7pwfAfDejigJElrkakbJ4cAkJoAqEu1tJU6J2X/YqT
        ffIJAAD//wMAnHkjJuECAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f347aa5a1044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:57:54 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '175'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998983'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_a074c86d0a8ce93884257747cbec2dc1
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify input text."}, {"role":
      "user", "content": "Text: Chocolate leather boots."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '807'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSTW/bMAy9+1cIPCdd7LjL6uvQ9lCga5F1K7AUhiIzjhpZVCU6XRDkvw+2U8cN
        5oNA8Ol9iPQ+EgJ0AZkAtZasKmfGV29v6fvr9fXzU/zz6i7Z+puncvf4ldP7zSqBUcOg5Ssq/mBd
        KKqcQdZkO1h5lIyNajxLkum3STJLW6CiAk1DKx2PpxeXY679ksaTOLk8MtekFQbIxJ9ICCH27dlk
        tAX+hUxMRh+dCkOQJULWXxICPJmmAzIEHVhahtEJVGQZbRPb1sYMACYyuZLGnIy7bz+oT4OSxuR3
        Drfzrf/laBZuHzbP89+Pdj4tHgZ+nfTOtYFWtVX9gAZ438/OzIQAK6uW+6NmV/MZUwiQvqwrtNyk
        hv0CnMdCK8YiV5KxJL9bQLaAGyJ+R+m/fDfEa23LBRzgk9Yh+l/9cqwO/cgNlc7TMpxNEFba6rDO
        PcrQvgQCk+ssGrmXdrX1p22B81Q5zpk2aBvBOE47PTj9TQP0uHdgYmkG/SSNjgkh7AJjla+0LdE7
        r/tNR4foHwAAAP//AwA3tdWA6AIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f34ade6a1044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:57:54 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '200'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998984'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_b0b4185fa996eff631b7a757c8fc2c9a
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify input text."}, {"role":
      "user", "content": "Text: Wooden cream for surfaces."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '809'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFLbjtowEH3PV1jzDFvIQhfyWNGq23a1F5VWVVlFxpmEtLbH2BNpEeLf
        qyRskkXNgzWa43PxTI6REFBmkAhQO8nKOD1e7vezlydaz76bj3feHRb54ufqg/kWlk/vv8KoZtD2
        Dyp+ZV0pMk4jl2RbWHmUjLXq9CaOrxeT+GbeAIYy1DWtcDy+vpqPufJbGk+m8fzM3FGpMEAifkdC
        CHFszjqjzfAFEjEZvXYMhiALhKS7JAR40nUHZAhlYGkZRj2oyDLaOrattB4ATKRTJbXujdvvOKj7
        QUmtU/d4+2P9Jd8/rG/l/S8ZP6weM7u4w4FfK31wTaC8sqob0ADv+smFmRBgpWm49xW7ii+YQoD0
        RWXQcp0ajhtwHrNSMWapkowF+cMGkg18qrwtufL47jMZFCtU5Ddwgjdyp+h/9fO5OnVT11Q4T9tw
        MUTIS1uGXepRhuYxEJhca1HLPTfbrd4sDJwn4zhl+ou2FpxO560e9D9Ujy7PGBNLPSDFs+gcEMIh
        MJo0L22B3vmy23V0iv4BAAD//wMAXyXQuOoCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f34e0b371044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:57:55 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '206'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998984'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_ac81eda153bc70caf622230e59bdcbe7
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify input text."}, {"role":
      "user", "content": "Text: Natural finish for your lips."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '812'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xS30/bMBB+z19h3XPL2tAAzduK2MuQWGEIxooi17mm3hzb2BdBqPq/T05KEqrl
        wTrd5++H77KLGAOZQ8pAbDmJ0qrx/OVl9uavf81fi6rkTw/XS353fxXfPSWz2Q2MAsOs/6CgD9aJ
        MKVVSNLoFhYOOWFQnZ7H8enFJD5PGqA0OapAKyyNT0+SMVVubcaTaZwcmFsjBXpI2e+IMcZ2zRky
        6hzfIGWT0UenRO95gZB2lxgDZ1ToAPdeeuKaYNSDwmhCHWLrSqkBQMaoTHCleuP22w3qflBcqez9
        6vLrY62XZ5jf+p88jheLx28P35cDv1a6tk2gTaVFN6AB3vXTIzPGQPOy4d5UZCs6YjIG3BVViZpC
        atitwDrMpSDMM8EJC+PqFaQrWCCvqP7yA503mit2yR2uYA+f5PbR/+rnQ7Xvpq5MYZ1Z+6MhwkZq
        6beZQ+6bx4AnY1uLIPfcbLf6tDCwzpSWMjJ/UQfB6fSs1YP+h+rR+QEjQ1wNSHESHQKCrz1hmW2k
        LtBZJ7tdR/voHwAAAP//AwATJQyK6gIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f350cf371044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:57:55 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '202'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998983'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_563925015309c11b179c5092e5addf5d
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nText:
      {text}\nCategory: {predicted_category}\n```\n\nHere:\n- \"Text: {text}\" is
      input template,\n- \"{prompt}\" is the LLM prompt,\n- \"Category: {predicted_category}\"
      is the output template.\n\nModel can produce erroneous output if a prompt is
      not well defined. In our collaboration, we\u2019ll work together to refine a
      prompt. The process consists of two main steps:\n\n## Step 1\nI will provide
      you with the current prompt along with prediction examples. Each example contains
      the input text, the final prediction produced by the model, and the user feedback.
      User feedback indicates whether the model prediction is correct or not. Your
      task is to analyze the examples and user feedback, determining whether the existing
      instruction is describing the task reflected by these examples precisely, and
      suggests changes to the prompt to address the incorrect predictions.\n\n## Step
      2\nNext, you will carefully review your reasoning in step 1, integrate the insights
      to refine the prompt, and provide me with the new prompt that improves the model\u2019s
      performance."}, {"role": "assistant", "content": "Sure, I\u2019d be happy to
      help you with this prompt engineering problem. Please provide me with the current
      prompt and the examples with user feedback."}, {"role": "user", "content": "\n##
      Current prompt\nClassify input text.\n\n## Examples\n### Example #0\n\nText:
      Apple product with a sleek design.\n\nCategory: Labels.Electronics\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Electronics\"\n\n\n### Example #1\n\nText:
      Laptop stand for the kitchen.\n\nCategory: Labels.Electronics\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n### Example
      #2\n\nText: Chocolate leather boots.\n\nCategory: Labels.Footwear/Clothing\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Footwear/Clothing\"\n\n\n###
      Example #3\n\nText: Wooden cream for surfaces.\n\nCategory: Labels.Furniture/Home
      Decor\n\nUser feedback: Prediction is incorrect. Correct answer: \"Furniture/Home
      Decor\"\n\n\n### Example #4\n\nText: Natural finish for your lips.\n\nCategory:
      Labels.Beauty/Personal Care\n\nUser feedback: Prediction is incorrect. Correct
      answer: \"Beauty/Personal Care\"\n\n\n\nSummarize your analysis about incorrect
      predictions and suggest changes to the prompt."}], "model": "gpt-4-turbo", "max_tokens":
      1000, "seed": 47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2871'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//rFffb9s2EH7PX3FQHgIEtus4brvkLU0TpEC7Bf2BDZuHgCJPFhuKVMmT
        bbXo/z4cKcn26hbosJcAOZG8+777+PH85Qgg0yq7hEyWgmRVm/HFp0/z9tn9n/XZ+fpmvqJ3f0xf
        v/lQvLyTs7urbMQ7XP4RJfW7JtJVtUHSzqbP0qMg5FPPns9m579MZ8+fxQ+VU2h427Km8XxMjc/d
        eDadzcfT+Xh60e0unZYYskv46wgA4Ev8y3VahZvsEqajPlJhCGKJ2eWwCCDzznAkEyHoQMJSNtp+
        lM4S2lj68fExXFlh2qADuAJeWem8R0lw71FpyXjCwi7srXcVUImAG8FAA9TerbRCNQJNIOoahQ9A
        paC4LKI84VXDMSA8QnAVkq4wgJCy8YIQhFU7Yd1XMIE79HgSQEDuUTwqt7ZcIgpZ9lVccmlnEzg9
        vUkBOJ6enl7C+76CPj8qWGSvRY4mTG4MSvLOahkWGRTOgwDCDYHIXUMgLFzVfFTtnWokjWBdalmC
        5kp6dqQgXDrfQt4kvE1ADwWiyoV8BG2V5iW8pdKhsQo9t0Fpu2QMvMM1VDfE+StBk1hyPAQ3NXYF
        71e61lS6Ll3tsdCbLaZFxkzM9pg422diINa0ffn6MyoQ8ZSaXA2xxMgI53jUJEu0iwxE+B576xIt
        9z+UrjEKSrFCyBEtLLLbxltNjccnd65CeInS+ckig/elDhCa5RIDHebHc0wa1m7BNGpnIW+3shpB
        7ULQuWlBNQjkekoCWok9v2vnmUMToXUEne8RNOsJ2ooU1iIMTd6FfescrVH4J9fGUantspPOIrsu
        nXSGhWxQUIkecucojBZZFIdYCm1H/4tGGMF8D8H5zyA40I8BxO/OKbTAplXFUGh8ISQOML6tPwLj
        xq9/DsHTPQTzn0DwAkVD7ZN79MFZYeBaeBwQ/Cqo8cJAoa0OZQy2rvFgdP0DEP+tCeya75KCUcF1
        KewSQ6/De++qmnjZCxFQgbMxLDqXTVKomDsdQoMQEKu4Ocf4KeXpkw9Gk6oYzMhK0yhOetAMulWV
        XpYE1hGfPfiK89DhdE71F4tpCRO4UkpzD4QxbazUYzI+i6i4SF2x7+Oex3/DWnxgNsTrxcpp9e19
        DmD0I4K2sLWrZPjxleDTw0CwTARvzf7aCK+LFn5LnbmNjLGQ3jjF8UQKt4FLCDXKPjqQ8EOWJ/Cq
        +B6zOoBFyW+ub6PKtCX0LMfaO44zByw2pl1h0B4V42SCx4WQkaKYJUqBvTB5Z44glPIYWDSoo5No
        u4slJmPvo/FuLiwcP6ylW/O/O4rtBMmZJ9vnwZaCXfI69agRBj7s9o9pfIuFtvgvGrGqSxH05xTX
        Ve08ic5v+4ZrC/t9niS7lxGhtitnVtz1QL6R1Jeb3idyfEzQCn1XtljicHLXKE1YMavS6zzxylFe
        MYqEf2wCbRdqCmiKyeD86Wp28Cq0rJmFBYAxi6rxHi1195dpWGTXCUwL2kZCcUPxJem2vMWV5m4d
        3BKrGLbxPdMKLemi3eIOBB4NroTdHSl2baPHzw9zYuQgExO42URHAGHbXrahkSUb6Emn3hMoeIqL
        tlholuxWKJUgWe4OIOmadu9mbKLv0HaSEDrZ1q4jpJlOtn2Rh6bAvB2kxETsApTpXvf8bB1r14F7
        C+xHDjQ1CKOXdi9jd8Xi0HQAVtZNw1+HMdq4Ze1dziO3bYwZ4uk9efAogrM8Mgdyddr+9Qjg7ziu
        N3sTeJYYeiD3iJYPfDp/ls7Ltr8Sdr4+7b+SI2G2H87OprOjrsYstIGweii0XaKvvU7ze1E/TC8u
        zuVczOU0O/p69A8AAAD//wMA2DZltM0MAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f353dc571044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:58:18 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '22258'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '2000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '1998360'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 49ms
      x-request-id:
      - req_a517b5f167996973758fce04a54d0128
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nText:
      {text}\nCategory: {predicted_category}\n```\n\nHere:\n- \"Text: {text}\" is
      input template,\n- \"{prompt}\" is the LLM prompt,\n- \"Category: {predicted_category}\"
      is the output template.\n\nModel can produce erroneous output if a prompt is
      not well defined. In our collaboration, we\u2019ll work together to refine a
      prompt. The process consists of two main steps:\n\n## Step 1\nI will provide
      you with the current prompt along with prediction examples. Each example contains
      the input text, the final prediction produced by the model, and the user feedback.
      User feedback indicates whether the model prediction is correct or not. Your
      task is to analyze the examples and user feedback, determining whether the existing
      instruction is describing the task reflected by these examples precisely, and
      suggests changes to the prompt to address the incorrect predictions.\n\n## Step
      2\nNext, you will carefully review your reasoning in step 1, integrate the insights
      to refine the prompt, and provide me with the new prompt that improves the model\u2019s
      performance."}, {"role": "assistant", "content": "Sure, I\u2019d be happy to
      help you with this prompt engineering problem. Please provide me with the current
      prompt and the examples with user feedback."}, {"role": "user", "content": "\n##
      Current prompt\nClassify input text.\n\n## Examples\n### Example #0\n\nText:
      Apple product with a sleek design.\n\nCategory: Labels.Electronics\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Electronics\"\n\n\n### Example #1\n\nText:
      Laptop stand for the kitchen.\n\nCategory: Labels.Electronics\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n### Example
      #2\n\nText: Chocolate leather boots.\n\nCategory: Labels.Footwear/Clothing\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Footwear/Clothing\"\n\n\n###
      Example #3\n\nText: Wooden cream for surfaces.\n\nCategory: Labels.Furniture/Home
      Decor\n\nUser feedback: Prediction is incorrect. Correct answer: \"Furniture/Home
      Decor\"\n\n\n### Example #4\n\nText: Natural finish for your lips.\n\nCategory:
      Labels.Beauty/Personal Care\n\nUser feedback: Prediction is incorrect. Correct
      answer: \"Beauty/Personal Care\"\n\n\n\nSummarize your analysis about incorrect
      predictions and suggest changes to the prompt."}, {"role": "assistant", "content":
      "### Analysis of Incorrect Predictions\n\nFrom the examples provided, it appears
      that the model''s predictions are sometimes accurate and sometimes incorrect.
      Here''s a breakdown of each example:\n\n1. **Example #0**: The model predicted
      \"Labels.Electronics\" for a text about an Apple product, which is a correct
      category but the user feedback indicates a misunderstanding of the output format.
      The user expected \"Electronics\" without the prefix \"Labels.\"\n\n2. **Example
      #1**: The model incorrectly categorized a \"Laptop stand for the kitchen\" as
      \"Labels.Electronics\" when it should have been \"Furniture/Home Decor.\" This
      suggests a misunderstanding or misclassification by the model, possibly due
      to the presence of the word \"laptop.\"\n\n3. **Example #2**: The prediction
      was correct as \"Labels.Footwear/Clothing\" for \"Chocolate leather boots,\"
      but again, the user feedback indicates a misunderstanding of the output format.\n\n4.
      **Example #3**: The prediction was correct as \"Labels.Furniture/Home Decor\"
      for \"Wooden cream for surfaces,\" but the user feedback again shows a misunderstanding
      of the output format.\n\n5. **Example #4**: The prediction was correct as \"Labels.Beauty/Personal
      Care\" for \"Natural finish for your lips,\" but the user feedback indicates
      a misunderstanding of the output format.\n\n### Suggested Changes to the Prompt\n\nBased
      on the analysis, the main issue seems to be the format of the category output,
      which includes the prefix \"Labels.\" which might not be expected or understood
      by the users. Additionally, there is a need to improve the model''s understanding
      of context to avoid misclassifications like in Example #1. Here are the suggested
      changes:\n\n1. **Clarify Output Format**: Modify the prompt to specify the expected
      format of the category output. If the prefix \"Labels.\" is necessary for internal
      processing but not desired in user-facing outputs, this should be addressed
      either in the prompt or in post-processing before showing the output to the
      user.\n\n2. **Enhance Contextual Understanding**: Refine the prompt to emphasize
      the importance of context in classification. This could involve instructing
      the model to consider the usage context of the item described in the text, not
      just the item itself.\n\n3. **Prompt Refinement**:\n   - **Current Prompt**:
      \"Classify input text.\"\n   - **Revised Prompt**: \"Classify the input text
      by identifying the most relevant category based on the context and usage of
      the item described. Exclude any prefix such as ''Labels.'' from your final output
      to match user expectations.\"\n\nThis revised prompt aims to improve the accuracy
      of the model''s predictions by emphasizing context and clarifying the expected
      output format, which should help align the model''s outputs with user expectations."},
      {"role": "user", "content": "\nNow please carefully review your reasoning in
      Step 1 and help with Step 2: refining the prompt.\n\n## Current prompt\nClassify
      input text.\n\n## Follow this guidance to refine the prompt:\n\n1. The new prompt
      should should describe the task precisely, and address the points raised in
      the user feedback.\n\n2. The new prompt should be similar to the current prompt,
      and only differ in the parts that address the issues you identified in Step
      1.\n    Example:\n    - Current prompt: \"Generate a summary of the input text.\"\n    -
      New prompt: \"Generate a summary of the input text. Pay attention to the original
      style.\"\n\n3. Reply only with the new prompt. Do not include input and output
      templates in the prompt.\n"}], "model": "gpt-4-turbo", "max_tokens": 1000, "seed":
      47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '6470'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SRzW7bMBCE73qKBS+5WIYsq2nka9BL2ydoURgUtZTYkFyaXLUSAr97QfmvufCw
        s99gdvheAAjTiwMINUpWLtiyPZ0+fXMnOj2Pu+nLrL8G18XXcdE/9EBikwnqfqPiG7VV5IJFNuQv
        soooGbPr7nNd71+qun1ZBUc92owNgcum5Cl2VNZV3ZRVU1btlR7JKEziAD8LAID39c05fY+zOEC1
        uU0cpiQHFIf7EoCIZPNEyJRMYulZbB6iIs/o1+ivNm/oBXhEMD5MDIwzQ7eA6dGz0Yvxw6o6SgwR
        Lf6RnkFJxoHiAp1M2AP5dWd1nhmk72HKqYD0xZrRQY9JRdNhvwH0aYqrM4Gm6CRf+JvrX8MjTdlo
        gRBRmxkTWPOG8PRddmjT9mkrrhed71VYGkKkLtfmJ2vvc228SeMxokzk89mJKVzwcwHwa618+tCi
        CJFc4CPTG/psuKufr52Lx1c/5H1zFZlY2v+xtimuGUVaEqM7auMHjCGayx/ocKzadq8a2ahKFOfi
        HwAAAP//AwAdi6NckQIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f3e0af501044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:58:19 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '1297'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '2000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '1997496'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 75ms
      x-request-id:
      - req_53c7aff9b80234623e1bb176af86e22f
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the input text by
      identifying the most relevant category based on the context and usage of the
      item described, ensuring to format the category without any prefixes like ''Labels.''."},
      {"role": "user", "content": "Text: Apple product with a sleek design."}], "model":
      "gpt-3.5-turbo", "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice":
      {"type": "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '985'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFJLb5wwEL7zK6w5ZyN2N2gJx7ZppT6l5NCm3QgZMwtujcexB6lotf+9
        AjZAVuVgjebz9/AMx0gI0CVkAlQtWTXOrG6fn5MvH37uHg9pco/6kzTvviZp+tC18X0KVz2Dit+o
        +IV1rahxBlmTHWHlUTL2quvdZrNN420cD0BDJZqeVjleba+TFbe+oFW83iRnZk1aYYBM/IqEEOI4
        nH1GW+JfyMSgM3QaDEFWCNl0SQjwZPoOyBB0YGkZrmZQkWW0fWzbGrMAmMjkShozG4/fcVHPg5LG
        5A+2eyzrz+5jWvvbuHhf/Ph+l5Zv3yz8RunODYEOrVXTgBb41M8uzIQAK5uB+61l1/IFUwiQvmob
        tNynhuMenMdSK8YyV5KxIt/tIdvDnUHFnqxWYQ8neKVyiv5XP52r0zRsQ5XzVISL2cFBWx3q3KMM
        wxsgMLnRopd7GpbavtoTOE+N45zpD9pecH2zG/Vg/o9m9AVjYmkWpOQmOgeE0AXGJj9oW6F3Xk8r
        jk7RPwAAAP//AwDw6vfe4QIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f3eacd811044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:58:20 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '187'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998941'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_d0c7e727050153fd85fe09598785c4a1
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the input text by
      identifying the most relevant category based on the context and usage of the
      item described, ensuring to format the category without any prefixes like ''Labels.''."},
      {"role": "user", "content": "Text: Laptop stand for the kitchen."}], "model":
      "gpt-3.5-turbo", "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice":
      {"type": "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '980'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xS32/TMBB+z19h3fM60pYUltdNbEJUoIGYgE6R61xTb47Ptc+wqur/jpKUJKvI
        g3W6z98P3+WQCAG6hFyA2kpWtTOTq90uWy6vP36V93K7u16k2Y9vn25e7m9/ftE1XDQMWj+h4n+s
        S0W1M8iabAcrj5KxUZ2+m83m79N5mrZATSWahlY5nswvswlHv6ZJOp1lJ+aWtMIAufiVCCHEoT2b
        jLbEF8hFq9N2agxBVgh5f0kI8GSaDsgQdGBpGS4GUJFltE1sG40ZAUxkCiWNGYy77zCqh0FJY4qF
        ef6zDPLh9vvvMH1ahshpRQ/2buTXSe9dG2gTreoHNML7fn5mJgRYWbfcz5Fd5DOmECB9FWu03KSG
        wwqcx1IrxrJQkrEiv19BvoIP0VvN0eObO6pR3KAiv4IjvJI7Jv+rH0/VsZ+6ocp5WoezIcJGWx22
        hUcZ2sdAYHKdRSP32G43vloYOE+144LpGW0jOH276PRg+KEG9OqEMbE0I1KWJaeAEPaBsS422lbo
        ndf9rpNj8hcAAP//AwBXHjvh6gIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f3ee0aa21044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:58:20 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '189'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998942'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_8b2138ce3d538f7d7bf8a3af05f75f7e
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the input text by
      identifying the most relevant category based on the context and usage of the
      item described, ensuring to format the category without any prefixes like ''Labels.''."},
      {"role": "user", "content": "Text: Chocolate leather boots."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '975'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFJLb9swDL77Vwg8J53txFjr2x7YugFNil56WApDkRlbiyyqEr02CPLf
        Czup4wbzQSD46XuI9D4SAnQJuQBVS1aNM9Ob5+ds8bC43S6SdHub/XxIEb8s7r8vXx71I0w6Bq3/
        ouJ31pWixhlkTfYIK4+SsVNNPqfp7DqexUkPNFSi6WiV4+nsKpty69c0jZM0OzFr0goD5OJPJIQQ
        +/7sMtoSXyEX8eS902AIskLIh0tCgCfTdUCGoANLyzA5g4oso+1i29aYEcBEplDSmLPx8duP6vOg
        pDHF/K79jfe/tsrcvG7uzELWy6/X8b945HeU3rk+0Ka1ahjQCB/6+YWZEGBl03OXLbuWL5hCgPRV
        26DlLjXsV+A8lloxloWSjBX53QryFfwg4heU/tM3Q1xrW63gAB+0DtH/6qdTdRhGbqhyntbhYoKw
        0VaHuvAoQ/8SCEzuaNHJPfWrbT9sC5ynxnHBtEXbCSbz+VEPzn/TCD3tHZhYmlE/m0enhBB2gbEp
        NtpW6J3Xw6ajQ/QGAAD//wMAMVb26ugCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f3f13ff91044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:58:21 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '258'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998943'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_164bf08c372ab2fb3ef429a3f56d4702
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the input text by
      identifying the most relevant category based on the context and usage of the
      item described, ensuring to format the category without any prefixes like ''Labels.''."},
      {"role": "user", "content": "Text: Wooden cream for surfaces."}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '977'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSTW/bMAy9+1cIPCedE8fI4mO3BU0P2zBgp6UwFJl21MqiKtHLgiD/fbCT2m5Q
        HwSCT+9DpE+REKALyASovWRVOzNdvb6m3x9WazxUaflY/q5/HdYv98u/934jVzBpGbR7RsVvrDtF
        tTPImuwFVh4lY6s6W87nyec4iWcdUFOBpqVVjqfJXTrlxu9oGs/m6ZW5J60wQCb+REIIcerONqMt
        8B9kIp68dWoMQVYIWX9JCPBk2g7IEHRgaRkmA6jIMto2tm2MGQFMZHIljRmML99pVA+DksbkB042
        8bdk8fNRLXVF6vnL3irFm5HfRfroukBlY1U/oBHe97MbMyHAyrrj/mjYNXzDFAKkr5oaLbep4bQF
        57HQirHIlWSsyB+3kG1h3XirufH46YFqFF9Rkd/CGd7JnaOP6qdrde6nbqhynnbhZohQaqvDPvco
        Q/cYCEzuYtHKPXXbbd4tDJyn2nHO9IK2FZwt0oseDD/UgK6uGBNLMyKli+gaEMIxMNZ5qW2F3nnd
        7zo6R/8BAAD//wMAYNQZrOoCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f3f46cbb1044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:58:21 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '177'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998943'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_a1dc0d71522f441acc251fdbe86d2ae3
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the input text by
      identifying the most relevant category based on the context and usage of the
      item described, ensuring to format the category without any prefixes like ''Labels.''."},
      {"role": "user", "content": "Text: Natural finish for your lips."}], "model":
      "gpt-3.5-turbo", "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice":
      {"type": "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["Footwear/Clothing", "Electronics", "Food/Beverages", "Furniture/Home
      Decor", "Beauty/Personal Care"], "title": "Labels", "type": "string"}}, "properties":
      {"predicted_category": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '980'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSTY+bMBC98yusOSdbAqHbcGvTbntL1KqVqmaFHDMQusbj2IMUFOW/V0AWslE5
        WKN5fh+e4RwIAVUOqQB1kKxqq+er4zHZLH+snmTxuPlZ0/q0bSIqDp9/RUkLs45B+7+o+JX1oKi2
        GrkiM8DKoWTsVBePURR/COMw6oGactQdrbQ8jx+SOTduT/NwESVX5oEqhR5S8ScQQohzf3YZTY4n
        SEU4e+3U6L0sEdLxkhDgSHcdkN5XnqVhmE2gIsNoutim0foGYCKdKan1ZDx855t6GpTUOvuK+2/L
        42l95HgRP31c6y+/Q739/nLjN0i3tg9UNEaNA7rBx356ZyYEGFn33E3DtuE7phAgXdnUaLhLDecd
        WId5pRjzTEnGkly7g3QHn1A23L7bovNkpBZr6XAHF3gjdwn+Vz9fq8s4dU2ldbT3d0OEojKVP2QO
        pe8fA57JDhad3HO/3ebNwsA6qi1nTC9oOsHF8v2gB9MPNaGrK8bEUt+QkiS4BgTfesY6KypTorOu
        GncdXIJ/AAAA//8DACqSc/nqAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f3f79a421044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:58:22 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '217'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998942'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_82161af4b5a78da50dedef46bd05c321
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nText:
      {text}\nCategory: {predicted_category}\n```\n\nHere:\n- \"Text: {text}\" is
      input template,\n- \"{prompt}\" is the LLM prompt,\n- \"Category: {predicted_category}\"
      is the output template.\n\nModel can produce erroneous output if a prompt is
      not well defined. In our collaboration, we\u2019ll work together to refine a
      prompt. The process consists of two main steps:\n\n## Step 1\nI will provide
      you with the current prompt along with prediction examples. Each example contains
      the input text, the final prediction produced by the model, and the user feedback.
      User feedback indicates whether the model prediction is correct or not. Your
      task is to analyze the examples and user feedback, determining whether the existing
      instruction is describing the task reflected by these examples precisely, and
      suggests changes to the prompt to address the incorrect predictions.\n\n## Step
      2\nNext, you will carefully review your reasoning in step 1, integrate the insights
      to refine the prompt, and provide me with the new prompt that improves the model\u2019s
      performance."}, {"role": "assistant", "content": "Sure, I\u2019d be happy to
      help you with this prompt engineering problem. Please provide me with the current
      prompt and the examples with user feedback."}, {"role": "user", "content": "\n##
      Current prompt\nClassify the input text by identifying the most relevant category
      based on the context and usage of the item described, ensuring to format the
      category without any prefixes like ''Labels.''.\n\n## Examples\n### Example
      #0\n\nText: Apple product with a sleek design.\n\nCategory: Labels.Electronics\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Electronics\"\n\n\n###
      Example #1\n\nText: Laptop stand for the kitchen.\n\nCategory: Labels.Furniture/Home
      Decor\n\nUser feedback: Prediction is incorrect. Correct answer: \"Furniture/Home
      Decor\"\n\n\n### Example #2\n\nText: Chocolate leather boots.\n\nCategory: Labels.Footwear/Clothing\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Footwear/Clothing\"\n\n\n###
      Example #3\n\nText: Wooden cream for surfaces.\n\nCategory: Labels.Furniture/Home
      Decor\n\nUser feedback: Prediction is incorrect. Correct answer: \"Furniture/Home
      Decor\"\n\n\n### Example #4\n\nText: Natural finish for your lips.\n\nCategory:
      Labels.Beauty/Personal Care\n\nUser feedback: Prediction is incorrect. Correct
      answer: \"Beauty/Personal Care\"\n\n\n\nSummarize your analysis about incorrect
      predictions and suggest changes to the prompt."}], "model": "gpt-4-turbo", "max_tokens":
      1000, "seed": 47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3048'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//fFZNTyQ3EL3zK0rNAQnNjIZhVizcVggEYpXdkL0kmQi57erpCm67cVUD
        kxX/PbLb0z18JBc02PX9Xj33zz2AgkxxBoWuleimtdPTh4dP35Z48+vt95v7X+jmUkJ7df/5lH//
        2v1RTKKHL/9GLVuvmfZNa1HIu/5aB1SCMerRyWJx/Hl+PF+ki8YbtNFt3cp0OZUulH66mC+W0/ly
        Oj/N3rUnjVycwZ97AAA/099YpzP4XJzBfLI9aZBZrbE4G4wAiuBtPCkUM7EoJ8VkvNTeCbpU+v7+
        Pnxxym6YGHwF1077EFALfA9oSMd+eOVW7jL4BqRGwGcVG2Vog38kg2YCJEAMGP9zAlIrSZap0XiT
        Q9oNJAuqNuTWyUQrwbUPhAxll6JUimy69aBMjQHjr2ha+dAoAW5RU0VogFw6b4NvWpnBj+E34HNr
        SVNK6FhCp4V3KhK/DbZTwgZWxRNJ7TsB5TbQBqzoGRks3SMcfFUlWp4drAq48k/4iGECytpcwTAp
        IKdtZ3B7XtEzrIrsvCrgqSZdQ5x/UNGnL2tbZIqwpkd0b5qLAESkfuvWa2RBA+e1cmvk7XC+J7to
        9iPOzQTkHJq5wwgsDcD2vUsccs6SxnLA4DtpO5nsZAaHaFIWbNpaMf3Tt0ZN64Mop1PsBFQGLd6O
        GPURc8oZXEU8VUBg3yDw0E3jDVWkVT8B8dCoe3w/Gm1RBQxnsc+jGRwenlsVqNoky299qsse2Vt8
        6Chgg07ODg9XDgCmcOHqVHKCPbrKJpb/Jg8EXKtgthR91QKUm112sSjp7TKZPoCca99ZA84LlLjl
        x8DePnoCeBE7+mIMKAcX/ZJtrXp4x0auU5SYWbntQkJk7yva9GUZbHxsTgn2lPiABw2ta4Eabbuz
        Jp0zGKJ2mLz3LWoZMe3n1QWEEkUwpB6OYw+3SIIxX/K7fkWVS2+tf4o5r3eQHTtL/QNjFKiElJJc
        iPYhN/CafNUQcVSJTO4d6qj/X6xbfCRGs7NHq+LcRvHM7CIXexZ8ThR4K2ONZ4GAFh+Vk1FRShVj
        epfH7pJ7nGcXBXugnmADBlkHKtHM4DrpoA6dJvWfYpVBGJU1EXNkxY6Acafr2P+gYXFHtqyZAPVV
        vK8+SrpFLcE70jzZXYbM6XKYNxpgalq7SYkuRrcDeC+qM7hwHInDEkhL1vkEd9QP4jc7Rw42vgsQ
        kFvvGGerIildtAwZuMz4XFhiMsVNNp3+gBoYgg8MvmQMj+MybnVwV9DLDQQkV/nwJhCEUWI4odo/
        iGn+vVQNq5mRfrNCsyI/yS/DW279ug2+jO++66wdzityxPVdQMXexXebxbe9+8sewF/pm6F79RlQ
        9CO5E3+PLgb8dHLSxyvGT5Xx9ni5zLfiRdnx4nRxtJdLLHjDgs1dRW6NoQ3Uf0NU7d389PRYL9VS
        z4u9l71/AQAA//8DALp/iltRCQAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f3fa3ecf1044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:58:35 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '13386'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '2000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '1998314'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 50ms
      x-request-id:
      - req_4056395992f116f67daf2e1f2ce2f2d4
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nText:
      {text}\nCategory: {predicted_category}\n```\n\nHere:\n- \"Text: {text}\" is
      input template,\n- \"{prompt}\" is the LLM prompt,\n- \"Category: {predicted_category}\"
      is the output template.\n\nModel can produce erroneous output if a prompt is
      not well defined. In our collaboration, we\u2019ll work together to refine a
      prompt. The process consists of two main steps:\n\n## Step 1\nI will provide
      you with the current prompt along with prediction examples. Each example contains
      the input text, the final prediction produced by the model, and the user feedback.
      User feedback indicates whether the model prediction is correct or not. Your
      task is to analyze the examples and user feedback, determining whether the existing
      instruction is describing the task reflected by these examples precisely, and
      suggests changes to the prompt to address the incorrect predictions.\n\n## Step
      2\nNext, you will carefully review your reasoning in step 1, integrate the insights
      to refine the prompt, and provide me with the new prompt that improves the model\u2019s
      performance."}, {"role": "assistant", "content": "Sure, I\u2019d be happy to
      help you with this prompt engineering problem. Please provide me with the current
      prompt and the examples with user feedback."}, {"role": "user", "content": "\n##
      Current prompt\nClassify the input text by identifying the most relevant category
      based on the context and usage of the item described, ensuring to format the
      category without any prefixes like ''Labels.''.\n\n## Examples\n### Example
      #0\n\nText: Apple product with a sleek design.\n\nCategory: Labels.Electronics\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Electronics\"\n\n\n###
      Example #1\n\nText: Laptop stand for the kitchen.\n\nCategory: Labels.Furniture/Home
      Decor\n\nUser feedback: Prediction is incorrect. Correct answer: \"Furniture/Home
      Decor\"\n\n\n### Example #2\n\nText: Chocolate leather boots.\n\nCategory: Labels.Footwear/Clothing\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Footwear/Clothing\"\n\n\n###
      Example #3\n\nText: Wooden cream for surfaces.\n\nCategory: Labels.Furniture/Home
      Decor\n\nUser feedback: Prediction is incorrect. Correct answer: \"Furniture/Home
      Decor\"\n\n\n### Example #4\n\nText: Natural finish for your lips.\n\nCategory:
      Labels.Beauty/Personal Care\n\nUser feedback: Prediction is incorrect. Correct
      answer: \"Beauty/Personal Care\"\n\n\n\nSummarize your analysis about incorrect
      predictions and suggest changes to the prompt."}, {"role": "assistant", "content":
      "### Analysis of Incorrect Predictions\n\nFrom the examples provided, it is
      evident that the model is correctly identifying the categories but is failing
      to adhere to the format specified in the prompt. The prompt explicitly instructs
      the model to format the category \"without any prefixes like ''Labels.''\" However,
      all the predictions include the prefix \"Labels.\" which contradicts the instructions
      given in the prompt.\n\n### Suggested Changes to the Prompt\n\nTo address the
      issue of incorrect formatting in the model''s output, the prompt needs to emphasize
      the importance of adhering to the specified output format. Here are some suggested
      modifications to make the instructions clearer:\n\n1. **Clarify the Output Format
      Requirement:**\n   - Enhance the clarity of the instruction regarding the output
      format by explicitly stating that the prefix \"Labels.\" should not be included
      in the output.\n\n2. **Add an Example in the Prompt:**\n   - Including an example
      within the prompt that demonstrates the correct formatting might help the model
      understand the expected output structure better.\n\n3. **Reiterate the Importance
      of Following Instructions:**\n   - Add a sentence that underscores the importance
      of following the formatting instructions as given in the prompt.\n\n### Revised
      Prompt\n\n\"Classify the input text by identifying the most relevant category
      based on the context and usage of the item described. It is crucial to format
      the category output correctly by excluding any prefixes such as ''Labels.''
      For example, if the relevant category is electronics, the output should be formatted
      simply as ''Electronics'' without any prefix. Ensure strict adherence to this
      output format in your response.\"\n\nThis revised prompt should help in reducing
      the formatting errors observed in the model''s predictions by reinforcing the
      format requirements and providing a clear example of the expected output."},
      {"role": "user", "content": "\nNow please carefully review your reasoning in
      Step 1 and help with Step 2: refining the prompt.\n\n## Current prompt\nClassify
      the input text by identifying the most relevant category based on the context
      and usage of the item described, ensuring to format the category without any
      prefixes like ''Labels.''.\n\n## Follow this guidance to refine the prompt:\n\n1.
      The new prompt should should describe the task precisely, and address the points
      raised in the user feedback.\n\n2. The new prompt should be similar to the current
      prompt, and only differ in the parts that address the issues you identified
      in Step 1.\n    Example:\n    - Current prompt: \"Generate a summary of the
      input text.\"\n    - New prompt: \"Generate a summary of the input text. Pay
      attention to the original style.\"\n\n3. Reply only with the new prompt. Do
      not include input and output templates in the prompt.\n"}], "model": "gpt-4-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '5924'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//VFK5jtswEO31FQM2bixDPta7dht4iyABtkmRBIFBUSOJMcWROaOshIX/
        PaB8bsNi3jEP8/iRAChbqC0oU2sxTevSzfH4ZJbLH9+Ph57f5df8rXy1P7++Zbv14VlNo4Lyv2jk
        qpoZalqHYsmfYRNQC0bX+fNisXzJlvP1CDRUoIuyqpV0lUoXckoX2WKVZqs021zUNVmDrLbwOwEA
        +BjfmNMX2KstZNPrpEFmXaHa3kgAKpCLE6WZLYv2oqZ30JAX9GP0Ly4yygGkRrC+7QQEe4F8AFug
        F1sO1lcj2hALBHT4T3sBowUrCgPkmrEA8iNndO4FtC+gi6mAyrO1YAMFsgk2x2IGO89dQBCCkkKj
        5ay+ehoKAY24IebA3riuiCm0H6ANWNoeGbgzNWiGyTedo+PZBF4pAPY61jAF+7C3tMJgvdA4QodG
        Anlr+LZxCmyb1g3AogVhsrtzJvBupaZOHtbP1OWYp1sLjqo2UB4b851zt3lpveV6H1Az+XhxFmrP
        8lMC8Gdsu/tUoGoDNa3shQ7oo+F8nm3Ohur+y+7w0xUUEu0eZeuX5JJR8cCCzb60vsLQBnuuv2z3
        2WazNCu9MplKTsl/AAAA//8DAGpXhYwMAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f4513ff21044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:58:38 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '2165'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '2000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '1997623'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 71ms
      x-request-id:
      - req_f6d697f5677f9aed8fda44daf2beeb1b
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the input text by
      identifying the most relevant category based on the context and usage of the
      item described. Ensure to format the category correctly by excluding any prefixes
      such as ''Labels.'' For example, if the item fits into the electronics category,
      simply state ''Electronics'' without any prefix."}, {"role": "user", "content":
      "Text: Apple product with a sleek design."}], "model": "gpt-3.5-turbo", "max_tokens":
      1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type": "function", "function":
      {"name": "Output"}}, "tools": [{"type": "function", "function": {"name": "Output",
      "description": "Correctly extracted `Output` with all the required parameters
      with correct types", "parameters": {"$defs": {"Labels": {"enum": ["Footwear/Clothing",
      "Electronics", "Food/Beverages", "Furniture/Home Decor", "Beauty/Personal Care"],
      "title": "Labels", "type": "string"}}, "properties": {"predicted_category":
      {"allOf": [{"$ref": "#/$defs/Labels"}], "description": "The classification label"}},
      "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '1108'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFJNb9swDL37Vwg8J0U+FjTxbQWKItvQATsM25rCUGTa0SaJikQnC4L8
        98F2arvBdBAIPr3HJ5LnRAjQOaQC1E6yst6MV/v9Au2X0uyq45NaP/465p+MWxfmsP/+EUY1g7a/
        UfEb606R9QZZk2thFVAy1qrT+9lsvpzMp8sGsJSjqWml5/H8bjHmKmxpPJnOFlfmjrTCCKl4SYQQ
        4tzctUeX419IxWT0lrEYoywR0u6REBDI1BmQMerI0jGMelCRY3S1bVcZMwCYyGRKGtMXbs95EPeN
        ksZkk/WKrXc/5f7h8G31/Jmf18cPP4rDoF4rffKNoaJyqmvQAO/y6U0xIcBJ23C/VuwrvmEKATKU
        lUXHtWs4b8AHzLVizDMlGUsKpw2kG3g0qDiQ0ypu4ALvVC7J/+LXa3Tpmm2o9IG28aZ3UGin4y4L
        KGPzB4hMvi1Ry702Q63ezQl8IOs5Y/qDLjY7Mm31oN+jHr2/YkwszZC0TK4GIZ4io80K7UoMPuhu
        xMkl+QcAAP//AwCGaldf4QIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f460bf731044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:58:39 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '222'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998910'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_972fa4def3eea7a4642474dab8a8ddf8
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the input text by
      identifying the most relevant category based on the context and usage of the
      item described. Ensure to format the category correctly by excluding any prefixes
      such as ''Labels.'' For example, if the item fits into the electronics category,
      simply state ''Electronics'' without any prefix."}, {"role": "user", "content":
      "Text: Laptop stand for the kitchen."}], "model": "gpt-3.5-turbo", "max_tokens":
      1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type": "function", "function":
      {"name": "Output"}}, "tools": [{"type": "function", "function": {"name": "Output",
      "description": "Correctly extracted `Output` with all the required parameters
      with correct types", "parameters": {"$defs": {"Labels": {"enum": ["Footwear/Clothing",
      "Electronics", "Food/Beverages", "Furniture/Home Decor", "Beauty/Personal Care"],
      "title": "Labels", "type": "string"}}, "properties": {"predicted_category":
      {"allOf": [{"$ref": "#/$defs/Labels"}], "description": "The classification label"}},
      "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '1103'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFJNb9swDL37Vwg8J10+kC32bWg7FNhhG9AFG5bCUGTaUSeJikRvyYL8
        98KOG7vBdBAIPr3HJ5LHRAjQBWQC1Fayst6M091uUX6zj4/lbXwvV59xtQ9x/3D4u0zddxg1DNo8
        o+JX1o0i6w2yJneGVUDJ2KhOP8xm8+VkPk1bwFKBpqFVnsfzm8WY67Ch8WQ6W3TMLWmFETLxKxFC
        iGN7Nx5dgXvIxGT0mrEYo6wQsssjISCQaTIgY9SRpWMY9aAix+ga2642ZgAwkcmVNKYvfD7HQdw3
        ShqT449qefvz+ePmz+TfLpbz1ZTd1919HNQ7Sx98a6isnbo0aIBf8tlVMSHASdtyv9Tsa75iCgEy
        VLVFx41rOK7BByy0YixyJRkrCoc1ZGv4VAenuQ747oEsijtUFNZwgjdyp+R/8VMXnS5dN1T5QJt4
        1UQotdNxmweUsf0MRCZ/LtHIPbXTrd8MDHwg6zln+o0utsvSTRf6herRtMOYWJohKU06gxAPkdHm
        pXYVBh/0ZdbJKXkBAAD//wMAD7nOw+oCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f463ab811044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:58:39 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '226'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998910'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_57a3de190453f609a351041d5ff89a64
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the input text by
      identifying the most relevant category based on the context and usage of the
      item described. Ensure to format the category correctly by excluding any prefixes
      such as ''Labels.'' For example, if the item fits into the electronics category,
      simply state ''Electronics'' without any prefix."}, {"role": "user", "content":
      "Text: Chocolate leather boots."}], "model": "gpt-3.5-turbo", "max_tokens":
      1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type": "function", "function":
      {"name": "Output"}}, "tools": [{"type": "function", "function": {"name": "Output",
      "description": "Correctly extracted `Output` with all the required parameters
      with correct types", "parameters": {"$defs": {"Labels": {"enum": ["Footwear/Clothing",
      "Electronics", "Food/Beverages", "Furniture/Home Decor", "Beauty/Personal Care"],
      "title": "Labels", "type": "string"}}, "properties": {"predicted_category":
      {"allOf": [{"$ref": "#/$defs/Labels"}], "description": "The classification label"}},
      "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '1098'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFJNa+MwEL37V4g5J21ib7apb+mCYdmWdQ8LhU0xiiw7ykoaVRq3DSH/
        vdhOHTesD2KYp/ehGR8ixkCVkDIQW07COD29fXlZVHXzIJKYkm/m/ufT4x/Mc/OQ7ap3mLQM3Oyk
        oE/WlUDjtCSFtoeFl5xkqzq/ieNkOUvmtx1gsJS6pdWOpsnVYkqN3+B0No8XJ+YWlZABUvY3Yoyx
        Q3e2GW0p3yFls8lnx8gQeC0hHS4xBh512wEeggrELcHkDAq0JG0b2zZajwBC1IXgWp+N++8wqs+D
        4loX+dtuFfK77L7GTGR3r3ncPOWrX6uRXy+9d12gqrFiGNAIH/rphRljYLnpuL8bcg1dMBkD7uvG
        SEttajiswXlZKkGyLAQnWaPfryFdQ4ZIb5L76x8aaatsvYYjfNE6Rv+rn0/VcRi5xtp53ISLCUKl
        rArbwkseupdAIHS9RSv33K22+bItcB6No4Lwn7St4Pz7steD8980Qk97B0LietS/WUanhBD2gaQp
        KmVr6Z1Xw6ajY/QBAAD//wMAktP6eugCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f466b8101044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:58:40 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '246'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998911'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_56924d573061c617e579f4521deeee64
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the input text by
      identifying the most relevant category based on the context and usage of the
      item described. Ensure to format the category correctly by excluding any prefixes
      such as ''Labels.'' For example, if the item fits into the electronics category,
      simply state ''Electronics'' without any prefix."}, {"role": "user", "content":
      "Text: Wooden cream for surfaces."}], "model": "gpt-3.5-turbo", "max_tokens":
      1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type": "function", "function":
      {"name": "Output"}}, "tools": [{"type": "function", "function": {"name": "Output",
      "description": "Correctly extracted `Output` with all the required parameters
      with correct types", "parameters": {"$defs": {"Labels": {"enum": ["Footwear/Clothing",
      "Electronics", "Food/Beverages", "Furniture/Home Decor", "Beauty/Personal Care"],
      "title": "Labels", "type": "string"}}, "properties": {"predicted_category":
      {"allOf": [{"$ref": "#/$defs/Labels"}], "description": "The classification label"}},
      "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '1100'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFLfa9swEH73XyHuuemcZF5Sv7Wsoxsbo6NljKUYRb44ymSdKp1gWcj/
        XmynthvmB3Hcp++H7nxIhABdQi5AbSWr2pnJ1fNzVu3v1dfb5e7zA91c81z9nO4eHx6N/QYXDYPW
        O1T8yrpUVDuDrMl2sPIoGRvV6WI2my/T+SxtgZpKNA2tcjyZX2YTjn5Nk3Q6y07MLWmFAXLxOxFC
        iEN7NhltiX8hF61O26kxBFkh5P0lIcCTaTogQ9CBpWW4GEBFltE2sW00ZgQwkSmUNGYw7r7DqB4G
        JY0p7t6nt8F+SX/9MNmiurc7yv5tZCxHfp303rWBNtGqfkAjvO/nZ2ZCgJV1y/0e2UU+YwoB0lex
        RstNajiswHkstWIsCyUZK/L7FeQr+BS91Rw9vrujGsVHVORXcIQ3csfkf/XTqTr2UzdUOU/rcDZE
        2Girw7bwKEP7GAhMrrNo5J7a7cY3CwPnqXZcMP1B2whOP1x1ejD8UAP6ijGxNCPSYpmcAkLYB8a6
        2GhboXde97tOjskLAAAA//8DAMd7UPHqAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f46a0d611044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:58:40 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '172'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998911'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_a62e11614be58ef352055c75977bb56b
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Classify the input text by
      identifying the most relevant category based on the context and usage of the
      item described. Ensure to format the category correctly by excluding any prefixes
      such as ''Labels.'' For example, if the item fits into the electronics category,
      simply state ''Electronics'' without any prefix."}, {"role": "user", "content":
      "Text: Natural finish for your lips."}], "model": "gpt-3.5-turbo", "max_tokens":
      1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type": "function", "function":
      {"name": "Output"}}, "tools": [{"type": "function", "function": {"name": "Output",
      "description": "Correctly extracted `Output` with all the required parameters
      with correct types", "parameters": {"$defs": {"Labels": {"enum": ["Footwear/Clothing",
      "Electronics", "Food/Beverages", "Furniture/Home Decor", "Beauty/Personal Care"],
      "title": "Labels", "type": "string"}}, "properties": {"predicted_category":
      {"allOf": [{"$ref": "#/$defs/Labels"}], "description": "The classification label"}},
      "required": ["predicted_category"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '1103'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSy47bMAy8+ysEnpNt4sBo41sfh27fXbQoss3CUGRa1laWZIkCGgT598KO1/YG
        1UEgOJrhiOQpYQxUCTkDUXMSjdPLbdtm9btd+uXjbXYv0/D+k6lk1ra7WH6+h0XHsIdHFPTEuhG2
        cRpJWXOBhUdO2KmuX6bp5tVqk657oLEl6o4mHS03N9mSoj/Y5WqdZgOztkpggJz9Thhj7NTfnUdT
        4l/I2WrxlGkwBC4R8vERY+Ct7jLAQ1CBuCFYTKCwhtB0tk3UegaQtboQXOup8OWcZvHUKK51oWr1
        49fru932wFvj5YfH9La6M99/zupdpI+uN1RFI8YGzfAxn18VYwwMb3ru10gu0hWTMeBexgYNda7h
        tAfnsVSCsCwEJ5TWH/eQ7+EN8kjHF9/QB2u4Zm+5xz2c4ZncOflf/DBE57Hr2krn7SFcNREqZVSo
        C4889J+BQNZdSnRyD/1047OBgfO2cVSQ/YMm9MsyTBemhZrQ7YCRJa7npG0yGIRwDIRNUSkj0Tuv
        xlkn5+QfAAAA//8DAAbzqLzqAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f46d7b471044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:58:41 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '176'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998910'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_cb3b97ccbde0c5109e9ae4b97326ec63
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nText:
      {text}\nCategory: {predicted_category}\n```\n\nHere:\n- \"Text: {text}\" is
      input template,\n- \"{prompt}\" is the LLM prompt,\n- \"Category: {predicted_category}\"
      is the output template.\n\nModel can produce erroneous output if a prompt is
      not well defined. In our collaboration, we\u2019ll work together to refine a
      prompt. The process consists of two main steps:\n\n## Step 1\nI will provide
      you with the current prompt along with prediction examples. Each example contains
      the input text, the final prediction produced by the model, and the user feedback.
      User feedback indicates whether the model prediction is correct or not. Your
      task is to analyze the examples and user feedback, determining whether the existing
      instruction is describing the task reflected by these examples precisely, and
      suggests changes to the prompt to address the incorrect predictions.\n\n## Step
      2\nNext, you will carefully review your reasoning in step 1, integrate the insights
      to refine the prompt, and provide me with the new prompt that improves the model\u2019s
      performance."}, {"role": "assistant", "content": "Sure, I\u2019d be happy to
      help you with this prompt engineering problem. Please provide me with the current
      prompt and the examples with user feedback."}, {"role": "user", "content": "\n##
      Current prompt\nClassify the input text by identifying the most relevant category
      based on the context and usage of the item described. Ensure to format the category
      correctly by excluding any prefixes such as ''Labels.'' For example, if the
      item fits into the electronics category, simply state ''Electronics'' without
      any prefix.\n\n## Examples\n### Example #0\n\nText: Apple product with a sleek
      design.\n\nCategory: Labels.Electronics\n\nUser feedback: Prediction is incorrect.
      Correct answer: \"Electronics\"\n\n\n### Example #1\n\nText: Laptop stand for
      the kitchen.\n\nCategory: Labels.Furniture/Home Decor\n\nUser feedback: Prediction
      is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n### Example #2\n\nText:
      Chocolate leather boots.\n\nCategory: Labels.Footwear/Clothing\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Footwear/Clothing\"\n\n\n### Example
      #3\n\nText: Wooden cream for surfaces.\n\nCategory: Labels.Furniture/Home Decor\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n###
      Example #4\n\nText: Natural finish for your lips.\n\nCategory: Labels.Beauty/Personal
      Care\n\nUser feedback: Prediction is incorrect. Correct answer: \"Beauty/Personal
      Care\"\n\n\n\nSummarize your analysis about incorrect predictions and suggest
      changes to the prompt."}], "model": "gpt-4-turbo", "max_tokens": 1000, "seed":
      47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3171'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//rFZdT+Q2FH3nV1yFByQ0MxqGabvwRinsIiF1NYuqfkyFHPsm8eLYwdcB
        0hX/vbqOkwxT1IeqL2jI9f085x772wFAplV2DpmsRJB1Y+Znj4/fVWVhbj/+Sj9u8i/Xnz7+dtk9
        //T8y+9fb7MZe7j8K8oweC2kqxuDQTvbm6VHEZCjnvywWp1+WJ6uTqKhdgoNu5VNmK/nofW5m6+W
        q/V8uZ4vz5J35bREys7hjwMAgG/xL9dpFb5k57CcDV9qJBIlZufjIYDMO8NfMkGkKQgbstlklM4G
        tLH0w8NDuLDCdKQJXAE3VjrvUQb47FFpyf3Q1m7ttXc1hAoBXwQ3StB496QVqhnoAJoA+T8bIFQi
        xJOxUbakkKaDeEIXnbZlPCJFwNJ5jQR5G6MUQptodVA4X6dQrg1NG0AQaEvBtzKggryLtsa7ugkL
        uBt/A740RkvNGSmIgDQVlTJ2QJVrjYIcUx6O+KxD5TiP7aDxWOgXJKBWVpz56FbkaGhxNIMOdzuU
        zvKQ0cYOrTStihk1pSCgLehAqYsFj5Pn/qUtSyTOe1kJW7KPi2E/xy742J0DoZRHomjQRC0yTHqE
        KRXPI9N2KupoyDbbmRFYRBWzYN1UgvRf2IetG+eDsDLGFqpCnyBgKzUodaFRDSj0KRfwCT2C8Ajk
        agQau6md0oWWInJniNJXcM5NnSzg+PjSCK+LDn7uY173WG/wsdUea7SBzo+PtxYA5nBlq1hcxI/9
        QseFxtITHbSz4LEUXg3UwhdpWuLvrhjBXMBNgFqXVWDgKzRN0Zo4kD3G7LM4scW6MCD8liQ5Fs7j
        W4ZZUeM70K+4/QulQFi46pdpgK4Hfmr8JqbijgRIg8IP2xeZmpwStrFgqtxzT5V3+NH3zU3vNNZa
        hZ4VQqWpNRiX6w3WkGMI6BcMUxw5wzEDUQT0cXRC22HuOwn9hOaMux2KN/oBYZu9DZYSHl0ZlME7
        qyUdRTMKxRAO67dr32Yghy0WSqGKAz7lAW9Q28L5xJrrqahNa3Ca8EUPMlo1MKof54zjgQCPNSuu
        B5GzMOw32Bpk9vgxGWM9rdNsFI9ttsEa6xx9z7Z3KBSnMooMFCy4nWv9yJ1sEI4NPmlCtaMTcRU1
        QeWeY40+nUjc6JE3zj3EBdxml4YvhqJLO8SDD/gSWFL3Jbp2FMCjwSdhw0TuXHB8ZxPZbHRnFrV8
        GY3rGbAGhSS9zlEt4MpS63FP3MeY0z2Rd2lGkfv/qsaRk4lZM9A7eYsIhk0ChBNvxowzIF03486/
        5d4/L4N9/v8Xyi7gfyLCHd8vezgnlYorrlkQVSvf2Uv03nl6/77g0dfiYfDa0VfqJYh3wbLIe+yv
        kaDlzna8LyCLLL0+Xsdni3Fl413OTxzbGjN+L7TVVN17FOQsP1EouKZ3fz0A+DM+j9o3L56sb/8+
        uAe0HPD75UkfL5teZZN1vfyQrMEFYSbDyXJ5dpBqzKijgPV9oW2JvvG6fy8Vzf3y7OxUrsVaLrOD
        14O/AQAA//8DADBQ5xI9CgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f470984d1044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:58:57 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '16101'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '2000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '1998285'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 51ms
      x-request-id:
      - req_009aeaf30b20bdfd89bbba31c1049d90
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nText:
      {text}\nCategory: {predicted_category}\n```\n\nHere:\n- \"Text: {text}\" is
      input template,\n- \"{prompt}\" is the LLM prompt,\n- \"Category: {predicted_category}\"
      is the output template.\n\nModel can produce erroneous output if a prompt is
      not well defined. In our collaboration, we\u2019ll work together to refine a
      prompt. The process consists of two main steps:\n\n## Step 1\nI will provide
      you with the current prompt along with prediction examples. Each example contains
      the input text, the final prediction produced by the model, and the user feedback.
      User feedback indicates whether the model prediction is correct or not. Your
      task is to analyze the examples and user feedback, determining whether the existing
      instruction is describing the task reflected by these examples precisely, and
      suggests changes to the prompt to address the incorrect predictions.\n\n## Step
      2\nNext, you will carefully review your reasoning in step 1, integrate the insights
      to refine the prompt, and provide me with the new prompt that improves the model\u2019s
      performance."}, {"role": "assistant", "content": "Sure, I\u2019d be happy to
      help you with this prompt engineering problem. Please provide me with the current
      prompt and the examples with user feedback."}, {"role": "user", "content": "\n##
      Current prompt\nClassify the input text by identifying the most relevant category
      based on the context and usage of the item described. Ensure to format the category
      correctly by excluding any prefixes such as ''Labels.'' For example, if the
      item fits into the electronics category, simply state ''Electronics'' without
      any prefix.\n\n## Examples\n### Example #0\n\nText: Apple product with a sleek
      design.\n\nCategory: Labels.Electronics\n\nUser feedback: Prediction is incorrect.
      Correct answer: \"Electronics\"\n\n\n### Example #1\n\nText: Laptop stand for
      the kitchen.\n\nCategory: Labels.Furniture/Home Decor\n\nUser feedback: Prediction
      is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n### Example #2\n\nText:
      Chocolate leather boots.\n\nCategory: Labels.Footwear/Clothing\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"Footwear/Clothing\"\n\n\n### Example
      #3\n\nText: Wooden cream for surfaces.\n\nCategory: Labels.Furniture/Home Decor\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"Furniture/Home Decor\"\n\n\n###
      Example #4\n\nText: Natural finish for your lips.\n\nCategory: Labels.Beauty/Personal
      Care\n\nUser feedback: Prediction is incorrect. Correct answer: \"Beauty/Personal
      Care\"\n\n\n\nSummarize your analysis about incorrect predictions and suggest
      changes to the prompt."}, {"role": "assistant", "content": "### Analysis of
      Incorrect Predictions\n\nFrom the examples provided, it is evident that the
      model is correctly identifying the categories but is failing to format the output
      as instructed by the prompt. The prompt explicitly states that the category
      should be formatted without any prefixes such as ''Labels.'', yet the model
      consistently includes this prefix in its output.\n\n### Suggested Changes to
      the Prompt\n\nTo address the issue of incorrect formatting in the model''s output,
      the prompt needs to emphasize the importance of adhering to the specified output
      format. Here are some suggested modifications to the prompt:\n\n1. **Clarify
      Output Format Requirements:**\n   - Enhance the clarity of the instruction regarding
      the exclusion of prefixes. It might be helpful to explicitly state that the
      model should not include any prefixes before the category name in its output.\n\n2.
      **Add an Example in the Prompt:**\n   - Including a clear example within the
      prompt that shows the correct formatting might help the model understand the
      expected output format better. For instance, after explaining the formatting
      requirement, an example like \"For instance, output ''Electronics'' instead
      of ''Labels.Electronics''\" could be added.\n\n3. **Reinforce the Formatting
      Rule:**\n   - At the end of the prompt, add a reminder about the formatting
      rule to reinforce its importance, such as \"Remember to exclude any prefixes
      like ''Labels.'' from your output.\"\n\n### Revised Prompt\n\nHere is how the
      revised prompt might look:\n\n\"Classify the input text by identifying the most
      relevant category based on the context and usage of the item described. Ensure
      to format the category correctly by excluding any prefixes such as ''Labels.''
      For example, if the item fits into the electronics category, simply state ''Electronics''
      without any prefix. For instance, output ''Electronics'' instead of ''Labels.Electronics''.
      Remember to exclude any prefixes like ''Labels.'' from your output.\"\n\nThis
      revised prompt should help in reducing the formatting errors in the model''s
      output by making the instructions clearer and more emphatic about the expected
      output format."}, {"role": "user", "content": "\nNow please carefully review
      your reasoning in Step 1 and help with Step 2: refining the prompt.\n\n## Current
      prompt\nClassify the input text by identifying the most relevant category based
      on the context and usage of the item described. Ensure to format the category
      correctly by excluding any prefixes such as ''Labels.'' For example, if the
      item fits into the electronics category, simply state ''Electronics'' without
      any prefix.\n\n## Follow this guidance to refine the prompt:\n\n1. The new prompt
      should should describe the task precisely, and address the points raised in
      the user feedback.\n\n2. The new prompt should be similar to the current prompt,
      and only differ in the parts that address the issues you identified in Step
      1.\n    Example:\n    - Current prompt: \"Generate a summary of the input text.\"\n    -
      New prompt: \"Generate a summary of the input text. Pay attention to the original
      style.\"\n\n3. Reply only with the new prompt. Do not include input and output
      templates in the prompt.\n"}], "model": "gpt-4-turbo", "max_tokens": 1000, "seed":
      47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '6405'
      content-type:
      - application/json
      cookie:
      - __cf_bm=1HMkEaXYWfzcKEpS_ZMVqzKftwmhMS1HvAZexrqEeOU-1722380272-1.0.1.1-E2fTZARhXr9_kZL5Ic1vR4LAwJCqFhBhCP1GV0LW9onj67mT25Vm1zXaWS3ApzwBEP5s7y1ae8VhYxCAlTpcUQ;
        _cfuvid=xVmexA1RD0WJjEjs4c479PSCqRbfs54WCi6XUdeLTTI-1722380272905-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//VFLLjtswDLznKwhdckkC51HsOrcm2PayQIHeiqIIZJmOtSuJjki3Nhb5
        90J2XnvRgeQMh5r5mAAoW6otKFNrMb5x8/x0+tKdTr++7vSuf95/f+t3exvy/NVu6h9qlhBUvKGR
        K2phyDcOxVIY2yaiFkysy6fVav2crddPQ8NTiS7Bjo3MN3NpY0HzVbbazLPNPMsv6JqsQVZb+D0B
        APgY3qQzlNipLWSza8Ujsz6i2t6GAFQklypKM1sWHUTN7k1DQTAM0vcuTVQ9SI1gQ9MKCHYCRQ+2
        xCC26m04Dl1PLBDR4V8dBIwWPFLsodCMJVAYZgbmTkCHEtqkCqgaqQU9lMgm2gLLBbwEbiOCEFQU
        vZYRfeU0FCMacX3SgZ1xbZlU6NBDE7GyHTJwa2rQDNNXXaDjxRS+UQTsdLJhBvZhb2WFwQahoYQO
        jUQK1vBt4wzY+sb1wKIFYfpyn5nCPys1tfKwfgE/0aMvMKYLWKIdxOqyxvEoqS1fL0t/Md6Ad/XO
        vuOD9CqSh57aCNTKYAIBjl+kjWmjNv1CXQw835x3dGwiFSkloXXuVq9ssFwfImqmkFxmoWaEnycA
        f4aEtZ9Co5pIvpGD0DuGRLhcrZYjobon+95+vuRPCYl2D7B1tpxcNCruWdAfKhuOGJtox8hVzSHL
        87XZ6I3J1OQ8+Q8AAP//AwAbYuPbgAMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8f4d65c391044-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:59:00 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '2875'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '2000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '1997504'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 74ms
      x-request-id:
      - req_192a8e817d69b8774cea85d56decbb80
    status:
      code: 200
      message: OK
version: 1
