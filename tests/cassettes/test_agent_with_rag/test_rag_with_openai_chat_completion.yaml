interactions:
- request:
    body: '{"messages": [{"role": "user", "content": "Hey, how''s it going?"}], "model":
      "gpt-3.5-turbo", "max_tokens": 10}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '111'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SQQU/CQBSE7/0Vz714KQQKpGmvRKPRCBovxhiybR9t6XbfsvuaaAj/3WwpoJc9
        zOzMfrOHAEDUhUhB5JXkvDVqlOz3k/fl+n7dPL/sVq+4ert74jKLl81H0YjQJyjbYc7n1Din1ijk
        mvTJzi1KRt86jaNoFidJEvdGSwUqHysNj2bjxYg7m9FoMo0WQ7KiOkcnUvgMAAAO/ekZdYHfIoVJ
        eFZadE6WKNLLJQBhSXlFSOdqx1KzCK9mTppR99gPqBTdwONtC7vOMUjwGzpGC8ZSaWUbgiMxZI+X
        RxWVxlLmAXWn1EXf1rp21caidKT9Awp1ydWp4BgAfPXzun/EwlhqDW+YGtS+cjo/FYrrh/4xh+mC
        iaW66tE8GAiF+3GM7WZb6xKtsXW/1XMGx+AXAAD//wMAovgJ/eoBAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8ec8959d213cd-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:53:18 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=VWtv7ct2bTBPvflVN7EWeUbtPshLjTt1le_oGfTDA6c-1722379998-1.0.1.1-S20e8FZpFE2rXiPsjjdiyrMsS8Q7xXSIR6.FEYTfy1PaElSxu3AmyJfTqKM5i95tFpiXe2HiXJr4lYLpnACoBw;
        path=/; expires=Tue, 30-Jul-24 23:23:18 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=CQVRaXLDoQd7g91QDIHjK0DP3lee0oyZxehRvjLI0Go-1722379998068-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '297'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49999983'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_0ac82f9b16c7cbc5d7f1c374d6d6e10d
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Hey, how''s it going?"}], "model":
      "gpt-4o", "max_tokens": 10}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '104'
      content-type:
      - application/json
      cookie:
      - __cf_bm=VWtv7ct2bTBPvflVN7EWeUbtPshLjTt1le_oGfTDA6c-1722379998-1.0.1.1-S20e8FZpFE2rXiPsjjdiyrMsS8Q7xXSIR6.FEYTfy1PaElSxu3AmyJfTqKM5i95tFpiXe2HiXJr4lYLpnACoBw;
        _cfuvid=CQVRaXLDoQd7g91QDIHjK0DP3lee0oyZxehRvjLI0Go-1722379998068-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1RQy07DMBC85ysWX7g0VeKmapMjB1TEAaSICwhVjrNNQh2va7uCqOq/ozzawmUP
        MzuzM3sKAFhTsgyYrIWXrVFhejhEb4/p90o+1/y9S183D8VLzvN8n+8PbNYrqPhC6S+quaTWKPQN
        6ZGWFoXH3jVecb5YpWm6HoiWSlS9rDI+TCjkEU/CaBnGi0lYUyPRsQw+AgCA0zD7iLrEH5ZBNLsg
        LTonKmTZdQmAWVI9woRzjfNCeza7kZK0Rz2k3qBSdAdP9y3UaBGELsGiKDvwBDUqAx0d52zSnq9H
        FVXGUtEH1Eelrviu0Y2rtxaFI90fUKgrX48G5wDgc6h3/JeYGUut8VtPe9S9ZZyMhuz2zz/kVJ15
        8kLdcJ4EU0LmOuex3e4aXaE1thm77sw2QV7wUizjNQvOwS8AAAD//wMAZgQ3n/QBAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8ec8c4e1a13cd-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:53:18 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '303'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29999984'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_9103e886fcefb8468e3d9ca8ea24be1b
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Text: I am happy", "Text: I am angry", "Text: I am sad"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '133'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8ec9108a1109d-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:53:19 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=vdR3pLVYqU6qBMqXKXuuS0EHwFeK_2X9NGvFU16WSJc-1722379999-1.0.1.1-cYoj3Q5aPZf5nYzVFZPJqx5pisSZREA1.YdUjo8B4ohUNOtcjnSlnB4tqf5LXF5JZlj4zZoM0jFpD4fyF6iCfA;
        path=/; expires=Tue, 30-Jul-24 23:23:19 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=YeU3zeEiN2HPJenk4YWhcM3FXedzlngtWBFkeHErEwU-1722379999011-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - heartex
      openai-processing-ms:
      - '38'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999989'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_c48e4ef1ad72b7e5ad94c77e444fc35e
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text."},
      {"role": "user", "content": "Examples:\n\n\n\nNow recognize:\n\nText: I am happy"}],
      "model": "gpt-3.5-turbo", "max_tokens": 1000, "seed": 47, "temperature": 0.0,
      "tool_choice": {"type": "function", "function": {"name": "Output"}}, "tools":
      [{"type": "function", "function": {"name": "Output", "description": "Correctly
      extracted `Output` with all the required parameters with correct types", "parameters":
      {"$defs": {"Labels": {"enum": ["happy", "sad", "angry", "neutral"], "title":
      "Labels", "type": "string"}}, "properties": {"prediction": {"allOf": [{"$ref":
      "#/$defs/Labels"}], "description": "The classification label"}}, "required":
      ["prediction"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '755'
      content-type:
      - application/json
      cookie:
      - __cf_bm=VWtv7ct2bTBPvflVN7EWeUbtPshLjTt1le_oGfTDA6c-1722379998-1.0.1.1-S20e8FZpFE2rXiPsjjdiyrMsS8Q7xXSIR6.FEYTfy1PaElSxu3AmyJfTqKM5i95tFpiXe2HiXJr4lYLpnACoBw;
        _cfuvid=CQVRaXLDoQd7g91QDIHjK0DP3lee0oyZxehRvjLI0Go-1722379998068-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFLfS8MwEH7vXxHueZN2c2r7JrjBRBBRBHVSsjRrM9MkS67TOfa/S9rZ
        1mEewnFfvh/cZR8QAiKDhAArKLLSyGG82YTP43A+3V6JbEvPZ7NxuJbfs1eL8wIGnqGXa87wl3XG
        dGkkR6FVAzPLKXKvGl2ORuPLOI7jGih1xqWn5QaH47PJECu71MMwGk2OzEILxh0k5C0ghJB9ffuM
        KuNfkJBw8NspuXM055C0jwgBq6XvAHVOOKQKYdCBTCvkysdWlZQ9ALWWKaNSdsbN2ffqblBUytRO
        754eqs2T/Lxe320fd9cvN9ntLI56fo30ztSBVpVi7YB6eNtPTswIAUXLmntfoanwhEkIUJtXJVfo
        U8N+AcbyTNRqC0gWUFBjdgs4wB/eIfivfj9Wh3a8UufG6qU7mRashBKuSC2nrk4NDrVpLLzce73G
        6s9mwFhdGkxRf3DlBaMwavSg+zkdOjliqJHKPukiOAYEt3PIy3QlVM6tsaJdanAIfgAAAP//AwB8
        BFQn0wIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8ec927fe013cd-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:53:19 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '152'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998979'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_1e0c2142543b1cec8c05449bcdd833b7
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text."},
      {"role": "user", "content": "Examples:\n\n\n\nNow recognize:\n\nText: I am angry"}],
      "model": "gpt-3.5-turbo", "max_tokens": 1000, "seed": 47, "temperature": 0.0,
      "tool_choice": {"type": "function", "function": {"name": "Output"}}, "tools":
      [{"type": "function", "function": {"name": "Output", "description": "Correctly
      extracted `Output` with all the required parameters with correct types", "parameters":
      {"$defs": {"Labels": {"enum": ["happy", "sad", "angry", "neutral"], "title":
      "Labels", "type": "string"}}, "properties": {"prediction": {"allOf": [{"$ref":
      "#/$defs/Labels"}], "description": "The classification label"}}, "required":
      ["prediction"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '755'
      content-type:
      - application/json
      cookie:
      - __cf_bm=VWtv7ct2bTBPvflVN7EWeUbtPshLjTt1le_oGfTDA6c-1722379998-1.0.1.1-S20e8FZpFE2rXiPsjjdiyrMsS8Q7xXSIR6.FEYTfy1PaElSxu3AmyJfTqKM5i95tFpiXe2HiXJr4lYLpnACoBw;
        _cfuvid=CQVRaXLDoQd7g91QDIHjK0DP3lee0oyZxehRvjLI0Go-1722379998068-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xS30vDMBB+718R7nmTdVNH+6YgvgwUQUWdlCy7dtnSJCYXcIz975J2tnWYh3Dc
        l+8HdzkkjIFcQ85AbDiJ2qpx9vU1eXlebK9v0jurHrf372GHT8/eu8v7KYwiw6y2KOiXdSFMbRWS
        NLqFhUNOGFXT+XQ6m2dZljVAbdaoIq2yNJ5dXI0puJUZT9Lp1Ym5MVKgh5x9JIwxdmjumFGv8Rty
        Nhn9dmr0nlcIefeIMXBGxQ5w76UnrglGPSiMJtQxtg5KDQAyRhWCK9Ubt+cwqPtBcaWK14XfpeqR
        79+2Int9Cy8llXp1+z7wa6X3tglUBi26AQ3wrp+fmTEGmtcN9yGQDXTGZAy4q0KNmmJqOCzBOlzL
        Rm0J+RK4rtx+CUf4wzsm/9Wfp+rYjVeZyjqz8mfTglJq6TeFQ+6b1ODJ2NYiyn02awx/NgPWmdpS
        QWaHOgqmk7TVg/7n9Oj1CSNDXA1J8+QUEPzeE9ZFKXWFzjrZLTU5Jj8AAAD//wMAxjKfONMCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8ec951bd513cd-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:53:19 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '163'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998978'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_700cccfea1af20b7e078e71779ca246c
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text."},
      {"role": "user", "content": "Examples:\n\n\n\nNow recognize:\n\nText: I am sad"}],
      "model": "gpt-3.5-turbo", "max_tokens": 1000, "seed": 47, "temperature": 0.0,
      "tool_choice": {"type": "function", "function": {"name": "Output"}}, "tools":
      [{"type": "function", "function": {"name": "Output", "description": "Correctly
      extracted `Output` with all the required parameters with correct types", "parameters":
      {"$defs": {"Labels": {"enum": ["happy", "sad", "angry", "neutral"], "title":
      "Labels", "type": "string"}}, "properties": {"prediction": {"allOf": [{"$ref":
      "#/$defs/Labels"}], "description": "The classification label"}}, "required":
      ["prediction"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '753'
      content-type:
      - application/json
      cookie:
      - __cf_bm=VWtv7ct2bTBPvflVN7EWeUbtPshLjTt1le_oGfTDA6c-1722379998-1.0.1.1-S20e8FZpFE2rXiPsjjdiyrMsS8Q7xXSIR6.FEYTfy1PaElSxu3AmyJfTqKM5i95tFpiXe2HiXJr4lYLpnACoBw;
        _cfuvid=CQVRaXLDoQd7g91QDIHjK0DP3lee0oyZxehRvjLI0Go-1722379998068-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xS32/aMBB+z19h3XNBAcZK89hSddLUblKl9aGgyDgm8XB8xr4wKsT/PtlhSYrm
        B+t0n78fuvMpYQxUARkDUXEStdWju/0+fSte3vZVNXvgdrEU6mn55efBLatf3+AmMHDzWwr6xxoL
        rK2WpNC0sHCSkwyqk9vpdLZI0zSNQI2F1IFWWhrNxvMRNW6Do3QynV+YFSohPWTsPWGMsVO8Q0ZT
        yCNkLOrETi2956WErHvEGDjUoQPce+WJG4KbHhRoSJoQ2zRaDwBC1LngWvfG7TkN6n5QXOtcfd89
        p/y4uUe/OOyXT4+Pr7ZxfxYDv1b6w8ZA28aIbkADvOtnV2aMgeF15P5oyDZ0xWQMuCubWhoKqeG0
        AutkoaLaCrIVeF6s4AyfWOfkf/X6Up274WosrcONv5oVbJVRvsqd5D5mBk9oW4sgt45LbD7tBazD
        2lJOuJMmCE7SSasH/b/p0fkFIySuh6SvySUg+A9Pss63ypTSWae6lSbn5C8AAAD//wMADwVi/NEC
        AAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8ec9849a413cd-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:53:20 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '214'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998979'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_11a7565ad1424075cc2db122a25111ee
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Text: I am happy", "Text: I am angry", "Text: I am sad"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '133'
      content-type:
      - application/json
      cookie:
      - __cf_bm=vdR3pLVYqU6qBMqXKXuuS0EHwFeK_2X9NGvFU16WSJc-1722379999-1.0.1.1-cYoj3Q5aPZf5nYzVFZPJqx5pisSZREA1.YdUjo8B4ohUNOtcjnSlnB4tqf5LXF5JZlj4zZoM0jFpD4fyF6iCfA;
        _cfuvid=YeU3zeEiN2HPJenk4YWhcM3FXedzlngtWBFkeHErEwU-1722379999011-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        21/973/9HwAAAP//AwDqKHsEhGEAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8ec9b4f31109d-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:53:20 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - heartex
      openai-processing-ms:
      - '27'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999989'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_d48367526a7333002d2439f173939f25
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nExamples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\nEmotions: {prediction}\n```\n\nHere:\n- \"Examples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\" is input template,\n- \"{prompt}\" is the LLM
      prompt,\n- \"Emotions: {prediction}\" is the output template.\n\nModel can produce
      erroneous output if a prompt is not well defined. In our collaboration, we\u2019ll
      work together to refine a prompt. The process consists of two main steps:\n\n##
      Step 1\nI will provide you with the current prompt along with prediction examples.
      Each example contains the input text, the final prediction produced by the model,
      and the user feedback. User feedback indicates whether the model prediction
      is correct or not. Your task is to analyze the examples and user feedback, determining
      whether the existing instruction is describing the task reflected by these examples
      precisely, and suggests changes to the prompt to address the incorrect predictions.\n\n##
      Step 2\nNext, you will carefully review your reasoning in step 1, integrate
      the insights to refine the prompt, and provide me with the new prompt that improves
      the model\u2019s performance."}, {"role": "assistant", "content": "Sure, I\u2019d
      be happy to help you with this prompt engineering problem. Please provide me
      with the current prompt and the examples with user feedback."}, {"role": "user",
      "content": "\n## Current prompt\nRecognize emotions from text.\n\n## Examples\n###
      Example #0\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am happy\n\nEmotions:
      Labels.happy\n\nUser feedback: Prediction is incorrect. Correct answer: \"happy\"\n\n\n###
      Example #1\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am angry\n\nEmotions:
      Labels.angry\n\nUser feedback: Prediction is incorrect. Correct answer: \"angry\"\n\n\n###
      Example #2\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am sad\n\nEmotions:
      Labels.sad\n\nUser feedback: Prediction is incorrect. Correct answer: \"sad\"\n\n\n\nSummarize
      your analysis about incorrect predictions and suggest changes to the prompt."}],
      "model": "gpt-4o", "max_tokens": 1000, "seed": 47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2571'
      content-type:
      - application/json
      cookie:
      - __cf_bm=VWtv7ct2bTBPvflVN7EWeUbtPshLjTt1le_oGfTDA6c-1722379998-1.0.1.1-S20e8FZpFE2rXiPsjjdiyrMsS8Q7xXSIR6.FEYTfy1PaElSxu3AmyJfTqKM5i95tFpiXe2HiXJr4lYLpnACoBw;
        _cfuvid=CQVRaXLDoQd7g91QDIHjK0DP3lee0oyZxehRvjLI0Go-1722379998068-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4xVbW/bNhD+7l9xUD5sC2zBVtIlFoYBXZFgAYo2aDK0xTTEFHmS2EhHlqRie0H+
        +0CK8ku7AftiyPfCe+557sjnCUAiRZJDwhvmeKfb2fLr1/mnm+yz+nx9Varfzvnrs3LJy5/vyouP
        l8nUZ6jyC3I3ZqVcdbpFJxUNbm6QOfSnLi6y7OxyPp8vgqNTAlufVms3O1ezbJ6dz+avZouzmNgo
        ydEmOfw5AQB4Dr8eIgncJDnMp6OlQ2tZjUm+CwJIjGq9JWHWSusYuWS6d3JFDimgPjmB18TarZUW
        VAU3xJUxyB3cGhSS+05sQQWdnJzA+9KieWLBlhe0SOH0dJ/wlpXYSqrhWpmOudPTHO4bhNAoSAva
        KNFzH9D6SAuSwDUIVQiHVci36S/YKV/h19UU1g0aZDaEjWViuG1U3wooEb701oWImAhrZQT8iGmd
        TqFIGqb1tkj8J6PaxE/LRJH8lBaU+SbeMv7ou7/aMC+fHbHz3hgk56F32oFQaIGUA0m87QUCoy1g
        zPH5I0a95y6F+0Za6GTdOI+Ws956DtyOGqfCmT0JNF4pMTSz0cgdClC90/2ubW2URtNu01GTPywa
        uEYUJeOPeUGzALz31ipagSvyQ4Dk2i1IEpIzh55V5vY4frCHsIEZ9G3GhkSPHueBXKoK/wZ06cBW
        DGZk12iGI6zsdLv9Th4La+ka1Q/1iyRqXyQeQyU3sT246+sarafhTcOo9qAHFLdBkZGEO4caFjl8
        wEoSHgWEIX3TMiOrLbwfuNwP6NVGt5JLz4t1zOE4k1HwY4bGmYuKfDdyQvr2gzZhqm6NepICj6bq
        Jk7Obmq+KahAYKfIOuPR/MvcH/N+RECWwztc7zr/Hb2Ew/KYQIwYywRhtTLMjaPISvWEYAe6434X
        tFqtCvqAXNUk/951a6EyqgOHG5eOlP4nGTuh/a4M4qINuEdaQqV73LgcboB1MCwsXcVi+Wg4ChpW
        +SAoGo6C/JIfhIS/Bb1TazBjTwfFnyXp3r0cZjzvN+IlslFQ2OdvCI2T0WCrD+bl/620d8tOGy+A
        dBY0muAhjmkS7+yX3WXfqlobVfqHgfq23dkrSdI2D/66VOQvduuUHtJfJgB/hUelP3onkgH8g1OP
        SP7A82U2nJfsn7G9N1suo9cpx9q942K5mESIid1ah91DJalGo40cHplKP5xjVmaCvVpcJpOXyT8A
        AAD//wMAgZLf0G0HAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8ec9e1b8113cd-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:53:28 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '7389'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29998434'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 3ms
      x-request-id:
      - req_a962980ef2774b2ae13c1a85a8e171f1
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nExamples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\nEmotions: {prediction}\n```\n\nHere:\n- \"Examples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\" is input template,\n- \"{prompt}\" is the LLM
      prompt,\n- \"Emotions: {prediction}\" is the output template.\n\nModel can produce
      erroneous output if a prompt is not well defined. In our collaboration, we\u2019ll
      work together to refine a prompt. The process consists of two main steps:\n\n##
      Step 1\nI will provide you with the current prompt along with prediction examples.
      Each example contains the input text, the final prediction produced by the model,
      and the user feedback. User feedback indicates whether the model prediction
      is correct or not. Your task is to analyze the examples and user feedback, determining
      whether the existing instruction is describing the task reflected by these examples
      precisely, and suggests changes to the prompt to address the incorrect predictions.\n\n##
      Step 2\nNext, you will carefully review your reasoning in step 1, integrate
      the insights to refine the prompt, and provide me with the new prompt that improves
      the model\u2019s performance."}, {"role": "assistant", "content": "Sure, I\u2019d
      be happy to help you with this prompt engineering problem. Please provide me
      with the current prompt and the examples with user feedback."}, {"role": "user",
      "content": "\n## Current prompt\nRecognize emotions from text.\n\n## Examples\n###
      Example #0\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am happy\n\nEmotions:
      Labels.happy\n\nUser feedback: Prediction is incorrect. Correct answer: \"happy\"\n\n\n###
      Example #1\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am angry\n\nEmotions:
      Labels.angry\n\nUser feedback: Prediction is incorrect. Correct answer: \"angry\"\n\n\n###
      Example #2\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am sad\n\nEmotions:
      Labels.sad\n\nUser feedback: Prediction is incorrect. Correct answer: \"sad\"\n\n\n\nSummarize
      your analysis about incorrect predictions and suggest changes to the prompt."},
      {"role": "assistant", "content": "## Analysis of Incorrect Predictions\n\n###
      Observations:\n1. **Incorrect Labeling Format**: The model is producing labels
      in the format `Labels.<emotion>`, whereas the correct format should be just
      the emotion word (e.g., \"happy\", \"angry\", \"sad\").\n2. **Lack of Examples**:
      The current prompt does not include any examples of correct predictions. This
      might be causing the model to not understand the expected output format properly.\n\n###
      User Feedback:\n- The user feedback consistently indicates that the model''s
      predictions are incorrect due to the format of the output. The correct answers
      are simply the emotion words without the \"Labels.\" prefix.\n\n## Suggested
      Changes to the Prompt\n\n### Step 1: Refine the Prompt\n1. **Clarify Output
      Format**: Explicitly state in the prompt that the model should output the emotion
      word directly.\n2. **Provide Examples**: Include examples in the prompt to demonstrate
      the correct format of the output.\n\n### Step 2: New Prompt\nHere is the refined
      prompt incorporating the above suggestions:\n\n```\nRecognize emotions from
      text. Output the emotion word directly without any prefixes.\n\nExamples:\n\nText:
      I am happy\nEmotions: happy\n\nText: I am angry\nEmotions: angry\n\nText: I
      am sad\nEmotions: sad\n\nNow recognize:\n\nText: {input}\nEmotions: {prediction}\n```\n\nThis
      refined prompt should help the model understand the expected output format and
      improve its performance."}, {"role": "user", "content": "\nNow please carefully
      review your reasoning in Step 1 and help with Step 2: refining the prompt.\n\n##
      Current prompt\nRecognize emotions from text.\n\n## Follow this guidance to
      refine the prompt:\n\n1. The new prompt should should describe the task precisely,
      and address the points raised in the user feedback.\n\n2. The new prompt should
      be similar to the current prompt, and only differ in the parts that address
      the issues you identified in Step 1.\n    Example:\n    - Current prompt: \"Generate
      a summary of the input text.\"\n    - New prompt: \"Generate a summary of the
      input text. Pay attention to the original style.\"\n\n3. Reply only with the
      new prompt. Do not include input and output templates in the prompt.\n"}], "model":
      "gpt-4o", "max_tokens": 1000, "seed": 47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '4809'
      content-type:
      - application/json
      cookie:
      - __cf_bm=VWtv7ct2bTBPvflVN7EWeUbtPshLjTt1le_oGfTDA6c-1722379998-1.0.1.1-S20e8FZpFE2rXiPsjjdiyrMsS8Q7xXSIR6.FEYTfy1PaElSxu3AmyJfTqKM5i95tFpiXe2HiXJr4lYLpnACoBw;
        _cfuvid=CQVRaXLDoQd7g91QDIHjK0DP3lee0oyZxehRvjLI0Go-1722379998068-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//VJDNbsIwEITveYqVzwSFQCjwAG1VVaraQ9UfVcg4m8St4zX2RkAr3r0y
        BGgvPszsrL+dnwRA6FIsQKhGsmqdSefrdYZ3ga+Ri06/jh6f/VtT3ruX3e3NRgxiglafqPiUGipq
        nUHWZI+28igZ49bRVZ6PZ1mWzQ5GSyWaGKsdpxNK8yyfpFmRjsZ9sCGtMIgFvCcAAD+HNyLaErdi
        AdngpLQYgqxRLM5DAMKTiYqQIejA0rIYXExFltEeqJ9QUW31NwK2FLkDVJ5aYNzyEB46dh0DN2cb
        NuRLKLVHxWYHG80NdQzS7sB5rPQWw1D0P+3PiIZq52kVz7GdMWe90laHZulRBrIRJzC5Y3yfAHwc
        quj+XSecp9bxkukLbVw4L/oqxKX8izsqepOJpfmTmhZJTyjCLjC2y0rbGr3z+thM5ZYrlcvZtCqq
        QiT75BcAAP//AwClPEokIgIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8ecceaa7f13cd-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:53:29 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '335'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29997907'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 4ms
      x-request-id:
      - req_eb3f951d8aca0e4cb3b09ae7aec4ead2
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Text: I am happy", "Text: I am angry", "Text: I am sad"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '133'
      content-type:
      - application/json
      cookie:
      - __cf_bm=vdR3pLVYqU6qBMqXKXuuS0EHwFeK_2X9NGvFU16WSJc-1722379999-1.0.1.1-cYoj3Q5aPZf5nYzVFZPJqx5pisSZREA1.YdUjo8B4ohUNOtcjnSlnB4tqf5LXF5JZlj4zZoM0jFpD4fyF6iCfA;
        _cfuvid=YeU3zeEiN2HPJenk4YWhcM3FXedzlngtWBFkeHErEwU-1722379999011-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        P//X+lf/+1//BwAA//8DAOooewSEYQAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8ecd2d9b010c3-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:53:29 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - heartex
      openai-processing-ms:
      - '22'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999989'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_384cc9cc7851f26e46250e39f877a954
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text.
      Output the emotion word directly without any prefixes."}, {"role": "user", "content":
      "Examples:\n\nText: I am happy\nEmotions: happy\n\nText: I am sad\nEmotions:
      sad\n\nNow recognize:\n\nText: I am happy"}], "model": "gpt-3.5-turbo", "max_tokens":
      1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type": "function", "function":
      {"name": "Output"}}, "tools": [{"type": "function", "function": {"name": "Output",
      "description": "Correctly extracted `Output` with all the required parameters
      with correct types", "parameters": {"$defs": {"Labels": {"enum": ["happy", "sad",
      "angry", "neutral"], "title": "Labels", "type": "string"}}, "properties": {"prediction":
      {"allOf": [{"$ref": "#/$defs/Labels"}], "description": "The classification label"}},
      "required": ["prediction"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '876'
      content-type:
      - application/json
      cookie:
      - __cf_bm=VWtv7ct2bTBPvflVN7EWeUbtPshLjTt1le_oGfTDA6c-1722379998-1.0.1.1-S20e8FZpFE2rXiPsjjdiyrMsS8Q7xXSIR6.FEYTfy1PaElSxu3AmyJfTqKM5i95tFpiXe2HiXJr4lYLpnACoBw;
        _cfuvid=CQVRaXLDoQd7g91QDIHjK0DP3lee0oyZxehRvjLI0Go-1722379998068-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSyU7DMBC95yusObcoTSlLjlxARYhDQRwoilzHSUy91Z4Aoeq/IyclCRU+WKN5
        fotmvI8IAZFDSoBVFJmycnq928XF7v1mtfx8jGfLZNFcPOn7l+/t7arKYRIYZvPOGf6yzphRVnIU
        Rncwc5wiD6qzyySZX8VxfN0CyuRcBlppcTo/W0yxdhszjWfJ4sisjGDcQ0peI0II2bd3yKhz/gUp
        iSe/HcW9pyWHtH9ECDgjQweo98Ij1QiTAWRGI9chtq6lHAFojMwYlXIw7s5+VA+DolJm24+71fLh
        4/PivFligfp+Y/3zTsmRXyfd2DZQUWvWD2iE9/30xIwQ0FS13McabY0nTEKAurJWXGNIDfs1WMdz
        0aqtIV1DRa1t1nCAP7xD9F/9dqwO/XilKa0zG38yLSiEFr7KHKe+TQ0eje0sgtxbu8b6z2bAOqMs
        Zmi2XAfB2Tzp9GD4OQO6OGJokMox6TI6BgTfeOQqK4QuubNO9EuNDtEPAAAA//8DAKO6Q3vTAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8ecd45bf513cd-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:53:29 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '197'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998949'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_1a7cd5a03c74d688bcedc845dcffe658
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text.
      Output the emotion word directly without any prefixes."}, {"role": "user", "content":
      "Examples:\n\nText: I am angry\nEmotions: angry\n\nText: I am sad\nEmotions:
      sad\n\nNow recognize:\n\nText: I am angry"}], "model": "gpt-3.5-turbo", "max_tokens":
      1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type": "function", "function":
      {"name": "Output"}}, "tools": [{"type": "function", "function": {"name": "Output",
      "description": "Correctly extracted `Output` with all the required parameters
      with correct types", "parameters": {"$defs": {"Labels": {"enum": ["happy", "sad",
      "angry", "neutral"], "title": "Labels", "type": "string"}}, "properties": {"prediction":
      {"allOf": [{"$ref": "#/$defs/Labels"}], "description": "The classification label"}},
      "required": ["prediction"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '876'
      content-type:
      - application/json
      cookie:
      - __cf_bm=VWtv7ct2bTBPvflVN7EWeUbtPshLjTt1le_oGfTDA6c-1722379998-1.0.1.1-S20e8FZpFE2rXiPsjjdiyrMsS8Q7xXSIR6.FEYTfy1PaElSxu3AmyJfTqKM5i95tFpiXe2HiXJr4lYLpnACoBw;
        _cfuvid=CQVRaXLDoQd7g91QDIHjK0DP3lee0oyZxehRvjLI0Go-1722379998068-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSyU7DMBC95yusOVOUNpQlNxYJISgckBBLUeQ6buriDXsiEar+O7JTklDhgzWa
        57doxpuEEBAl5ATYiiJTVo7OPj/Taikuslt2p76b9Mw317MntWY3X1drOAgMs1hzhr+sQ2aUlRyF
        0S3MHKfIg+r4ZDLJTtN0nEZAmZLLQKssjrLD6QhrtzCjdDyZ7pgrIxj3kJO3hBBCNvEOGXXJvyAn
        USd2FPeeVhzy7hEh4IwMHaDeC49UIxz0IDMauQ6xdS3lAEBjZMGolL1xezaDuh8UlbLIXj+yo9nt
        9fPlfTarH+8vbl6Ozsun6cCvlW5sDLSsNesGNMC7fr5nRghoqiL3oUZb4x6TEKCuqhXXGFLDZg7W
        8VJEtTnkc6C6cs0ctvCHt03+q9931bYbrzSVdWbh96YFS6GFXxWOUx9Tg0djW4sg9x7XWP/ZDFhn
        lMUCzQfXQXCcTVo96H9Ojx7vMDRI5ZB0muwCgm88clUsha64s050S022yQ8AAAD//wMAfmG4jdMC
        AAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8ecd7082f13cd-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:53:30 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '403'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998949'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_20bf83d0dae0cc550cffaeac8550b9af
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text.
      Output the emotion word directly without any prefixes."}, {"role": "user", "content":
      "Examples:\n\nText: I am sad\nEmotions: sad\n\nText: I am angry\nEmotions: angry\n\nNow
      recognize:\n\nText: I am sad"}], "model": "gpt-3.5-turbo", "max_tokens": 1000,
      "seed": 47, "temperature": 0.0, "tool_choice": {"type": "function", "function":
      {"name": "Output"}}, "tools": [{"type": "function", "function": {"name": "Output",
      "description": "Correctly extracted `Output` with all the required parameters
      with correct types", "parameters": {"$defs": {"Labels": {"enum": ["happy", "sad",
      "angry", "neutral"], "title": "Labels", "type": "string"}}, "properties": {"prediction":
      {"allOf": [{"$ref": "#/$defs/Labels"}], "description": "The classification label"}},
      "required": ["prediction"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '874'
      content-type:
      - application/json
      cookie:
      - __cf_bm=VWtv7ct2bTBPvflVN7EWeUbtPshLjTt1le_oGfTDA6c-1722379998-1.0.1.1-S20e8FZpFE2rXiPsjjdiyrMsS8Q7xXSIR6.FEYTfy1PaElSxu3AmyJfTqKM5i95tFpiXe2HiXJr4lYLpnACoBw;
        _cfuvid=CQVRaXLDoQd7g91QDIHjK0DP3lee0oyZxehRvjLI0Go-1722379998068-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFJLaxsxEL7vrxBzjsM+ME72VprQS5O0NNDSOiyydrxWo1ek2VLH+L8X
        ad3djYkOYphP34MZHTLGQLZQMxA7TkI7tbh+ecm71+W13yv8/OV15f50Pz+2WF7dFvgAF5FhN79R
        0H/WpbDaKSRpzQALj5wwqharsqyu8rzIE6BtiyrSOkeL6nK5oN5v7CIvyuWJubNSYICa/coYY+yQ
        7pjRtPgXapZ0UkdjCLxDqMdHjIG3KnaAhyADcUNwMYHCGkITY5teqRlA1qpGcKUm4+EcZvU0KK5U
        c3Mbdvd31f3j1/CpuvtW6ufvjz+w/TDzG6T3LgXa9kaMA5rhY78+M2MMDNeJ+9CT6+mMyRhw3/Ua
        DcXUcFiD89jKpLaGeg2Bt2s4whvWMXuvfjpVx3G4ynbO2004mxVspZFh13jkIWWGQNYNFlHuKS2x
        f7MXcN5qRw3ZZzRRsKjKQQ+mfzOhyxNGlriak1bZKSCEfSDUzVaaDr3zclxpdsz+AQAA//8DAAMr
        SBvRAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8ecdb7fcf13cd-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:53:31 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '186'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998949'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_47aa7acbe650236d39887a9323a38939
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Text: I am happy", "Text: I am angry", "Text: I am sad"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '133'
      content-type:
      - application/json
      cookie:
      - __cf_bm=vdR3pLVYqU6qBMqXKXuuS0EHwFeK_2X9NGvFU16WSJc-1722379999-1.0.1.1-cYoj3Q5aPZf5nYzVFZPJqx5pisSZREA1.YdUjo8B4ohUNOtcjnSlnB4tqf5LXF5JZlj4zZoM0jFpD4fyF6iCfA;
        _cfuvid=YeU3zeEiN2HPJenk4YWhcM3FXedzlngtWBFkeHErEwU-1722379999011-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8ecddcd0710c3-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:53:31 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - heartex
      openai-processing-ms:
      - '23'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999989'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_0c42953365ad8628a390e35ef0224624
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nExamples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\nEmotions: {prediction}\n```\n\nHere:\n- \"Examples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\" is input template,\n- \"{prompt}\" is the LLM
      prompt,\n- \"Emotions: {prediction}\" is the output template.\n\nModel can produce
      erroneous output if a prompt is not well defined. In our collaboration, we\u2019ll
      work together to refine a prompt. The process consists of two main steps:\n\n##
      Step 1\nI will provide you with the current prompt along with prediction examples.
      Each example contains the input text, the final prediction produced by the model,
      and the user feedback. User feedback indicates whether the model prediction
      is correct or not. Your task is to analyze the examples and user feedback, determining
      whether the existing instruction is describing the task reflected by these examples
      precisely, and suggests changes to the prompt to address the incorrect predictions.\n\n##
      Step 2\nNext, you will carefully review your reasoning in step 1, integrate
      the insights to refine the prompt, and provide me with the new prompt that improves
      the model\u2019s performance."}, {"role": "assistant", "content": "Sure, I\u2019d
      be happy to help you with this prompt engineering problem. Please provide me
      with the current prompt and the examples with user feedback."}, {"role": "user",
      "content": "\n## Current prompt\nRecognize emotions from text. Output the emotion
      word directly without any prefixes.\n\n## Examples\n### Example #0\n\nExamples:\n\nText:
      I am happy\nEmotions: happy\n\nText: I am sad\nEmotions: sad\n\nNow recognize:\n\nText:
      I am happy\n\nEmotions: Labels.happy\n\nUser feedback: Prediction is incorrect.
      Correct answer: \"happy\"\n\n\n### Example #1\n\nExamples:\n\nText: I am angry\nEmotions:
      angry\n\nText: I am sad\nEmotions: sad\n\nNow recognize:\n\nText: I am angry\n\nEmotions:
      Labels.angry\n\nUser feedback: Prediction is incorrect. Correct answer: \"angry\"\n\n\n###
      Example #2\n\nExamples:\n\nText: I am sad\nEmotions: sad\n\nText: I am angry\nEmotions:
      angry\n\nNow recognize:\n\nText: I am sad\n\nEmotions: Labels.sad\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"sad\"\n\n\n\nSummarize your analysis
      about incorrect predictions and suggest changes to the prompt."}], "model":
      "gpt-4o", "max_tokens": 1000, "seed": 47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2824'
      content-type:
      - application/json
      cookie:
      - __cf_bm=VWtv7ct2bTBPvflVN7EWeUbtPshLjTt1le_oGfTDA6c-1722379998-1.0.1.1-S20e8FZpFE2rXiPsjjdiyrMsS8Q7xXSIR6.FEYTfy1PaElSxu3AmyJfTqKM5i95tFpiXe2HiXJr4lYLpnACoBw;
        _cfuvid=CQVRaXLDoQd7g91QDIHjK0DP3lee0oyZxehRvjLI0Go-1722379998068-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//nFbbbuM2EH33VwyYlzZwDF/iJvHbbpqiQZtdIw0KFFWR0OJI4kaa0ZJU
        bDfIvxekrk66CNoXA+ZohuecOUPyeQQgtBIrEHEmXVyU+cnF169TfbM//fEmnv/yE3+a5WcXH9eL
        3e/LP77ciLHP4M0XjF2bNYm5KHN0mqkOxwalQ191djafL86n09k8BApWmPu0tHQnp3wyn85PT6bL
        k9miScxYx2jFCv4cAQA8h18PkRTuxAqm43alQGtlimLVfQQgDOd+RUhrtXWSnBj3wZjJIQXUR0dH
        8IFkvrfaAidwTTEbg7GDtUGlY0/FRhTRXYYQV8YgOSgNF6UDTdaZKnYWXIYQGIFjiMTnypWVC6tY
        sC8BWzYKlPaV8z1stcu4ciBpD6XBRO/QTiIBP/MWn9CMBwW1hZjJk0DyqRxqO03pYX3tMpAQiV/l
        BvNQrC4M3+EknYz7SCbLch+JgB6l8qQj0Sx+P4G7TFvQpHQsHXpm0h2iIXYgVYYmQOAQbJXwSByD
        fGKtBsQoIq/zmq3VmxzhFqVlspCw+bbgswkcH38oNjqttNuDJrjudzk+XsHdq43/p+6RgEKnmQvE
        NghxjtIAEldpFhB27Cdhy1qIPqUihcZbTMHWixWJb+2Ckry04LK6qQ53bhLR3BO92kk/ORbWhp+0
        QtUyxDZQNgFQHPbFXZnrWHtaCgv2QkiHAW2raMKmkM532K/WznlLYuNlTNCY1lNNWmK4qLVsIRjp
        MvSCSHrd9q7Jv1VpitahgstMUuotVHtkHYam6+xlLo1O9iH0qrE38hHf2Kpggx1n8GqHRrX6NbLB
        Zeheq6avdkW2Mtgb+a2godB/lbHle4uJJlQDeg8PDxHdYswp6b87J9pGT99zeM+oY48yOFZa8HTL
        EqVpzIOhyLg3s1K+c0O3ARuwVdKPXyvIKhxluHMruAZZQD33dNVgXLULBx9ZqYafhL8RfeItmJbl
        oO6zprJyL8OM57Ib7ZdGn1q8q12ZS5JBAE5ax7zyiEb13ugTb4fzYF19dnHTrLdCR+JdgSMRXNYd
        Z5F4V2jRmPGyO7APnPjv4ywNDk74+iD3GBRabVC1FGoTjsGgpoRN3A5ra9INZvJJs3l1ZHktP+6h
        kI9NgkWIa5nrW6a5y2zGVa66889POfdlxrUUQ/xNQgvncGLeYFZVBzjXj5jrjDlcPWgME3LlBemO
        /4lo7uqX7pLPOS0Nb/yDgKo879YTTdpm9ybcKP5Ct47LOv1lBPBXeExUB+8DUVO+d/yI5Asufzir
        64n++dJHF+eLJurYybwPXCynowaisHvrsLhPNKVoSqPrx0VS3p/ifDNXcjk7F6OX0T8AAAD//wMA
        00FziWUJAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8ecdf2e1113cd-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:53:38 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '6373'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29998375'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 3ms
      x-request-id:
      - req_052a86a75911d7ef20d6dc8e1ff8fcb5
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nExamples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\nEmotions: {prediction}\n```\n\nHere:\n- \"Examples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\" is input template,\n- \"{prompt}\" is the LLM
      prompt,\n- \"Emotions: {prediction}\" is the output template.\n\nModel can produce
      erroneous output if a prompt is not well defined. In our collaboration, we\u2019ll
      work together to refine a prompt. The process consists of two main steps:\n\n##
      Step 1\nI will provide you with the current prompt along with prediction examples.
      Each example contains the input text, the final prediction produced by the model,
      and the user feedback. User feedback indicates whether the model prediction
      is correct or not. Your task is to analyze the examples and user feedback, determining
      whether the existing instruction is describing the task reflected by these examples
      precisely, and suggests changes to the prompt to address the incorrect predictions.\n\n##
      Step 2\nNext, you will carefully review your reasoning in step 1, integrate
      the insights to refine the prompt, and provide me with the new prompt that improves
      the model\u2019s performance."}, {"role": "assistant", "content": "Sure, I\u2019d
      be happy to help you with this prompt engineering problem. Please provide me
      with the current prompt and the examples with user feedback."}, {"role": "user",
      "content": "\n## Current prompt\nRecognize emotions from text. Output the emotion
      word directly without any prefixes.\n\n## Examples\n### Example #0\n\nExamples:\n\nText:
      I am happy\nEmotions: happy\n\nText: I am sad\nEmotions: sad\n\nNow recognize:\n\nText:
      I am happy\n\nEmotions: Labels.happy\n\nUser feedback: Prediction is incorrect.
      Correct answer: \"happy\"\n\n\n### Example #1\n\nExamples:\n\nText: I am angry\nEmotions:
      angry\n\nText: I am sad\nEmotions: sad\n\nNow recognize:\n\nText: I am angry\n\nEmotions:
      Labels.angry\n\nUser feedback: Prediction is incorrect. Correct answer: \"angry\"\n\n\n###
      Example #2\n\nExamples:\n\nText: I am sad\nEmotions: sad\n\nText: I am angry\nEmotions:
      angry\n\nNow recognize:\n\nText: I am sad\n\nEmotions: Labels.sad\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"sad\"\n\n\n\nSummarize your analysis
      about incorrect predictions and suggest changes to the prompt."}, {"role": "assistant",
      "content": "### Analysis of Incorrect Predictions\n\nThe current prompt instructs
      the model to \"Output the emotion word directly without any prefixes.\" However,
      the model is consistently outputting the emotion with a \"Labels.\" prefix (e.g.,
      \"Labels.happy\" instead of \"happy\"). This indicates that the model is not
      adhering to the instruction to avoid prefixes.\n\n### Possible Reasons for Incorrect
      Predictions\n\n1. **Ambiguity in Instruction**: The instruction \"Output the
      emotion word directly without any prefixes\" might not be clear enough for the
      model. The model might not understand what \"without any prefixes\" means in
      this context.\n2. **Examples Provided**: The examples provided do not explicitly
      demonstrate the correct format of the output. The model might be inferring the
      format from the examples rather than the instruction.\n\n### Suggested Changes
      to the Prompt\n\n1. **Clarify the Instruction**: Make the instruction more explicit
      and clear.\n2. **Provide Clear Examples**: Ensure that the examples provided
      clearly demonstrate the correct format of the output.\n\n### Refined Prompt\n\n```\nRecognize
      emotions from text. Output the emotion word directly, exactly as it appears
      in the text, without adding any prefixes or suffixes.\n\nExamples:\n\nText:
      I am happy\nEmotions: happy\n\nText: I am sad\nEmotions: sad\n\nNow recognize:\n\nText:
      {input}\nEmotions: {prediction}\n```\n\n### Explanation of Changes\n\n1. **Clarified
      Instruction**: The instruction now explicitly states to output the emotion word
      \"exactly as it appears in the text\" and to avoid \"adding any prefixes or
      suffixes.\"\n2. **Consistent Examples**: The examples provided are consistent
      with the desired output format, reinforcing the correct behavior for the model.\n\nBy
      making these changes, the prompt should be clearer to the model, and the examples
      should reinforce the correct output format, reducing the likelihood of erroneous
      predictions."}, {"role": "user", "content": "\nNow please carefully review your
      reasoning in Step 1 and help with Step 2: refining the prompt.\n\n## Current
      prompt\nRecognize emotions from text. Output the emotion word directly without
      any prefixes.\n\n## Follow this guidance to refine the prompt:\n\n1. The new
      prompt should should describe the task precisely, and address the points raised
      in the user feedback.\n\n2. The new prompt should be similar to the current
      prompt, and only differ in the parts that address the issues you identified
      in Step 1.\n    Example:\n    - Current prompt: \"Generate a summary of the
      input text.\"\n    - New prompt: \"Generate a summary of the input text. Pay
      attention to the original style.\"\n\n3. Reply only with the new prompt. Do
      not include input and output templates in the prompt.\n"}], "model": "gpt-4o",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '5621'
      content-type:
      - application/json
      cookie:
      - __cf_bm=VWtv7ct2bTBPvflVN7EWeUbtPshLjTt1le_oGfTDA6c-1722379998-1.0.1.1-S20e8FZpFE2rXiPsjjdiyrMsS8Q7xXSIR6.FEYTfy1PaElSxu3AmyJfTqKM5i95tFpiXe2HiXJr4lYLpnACoBw;
        _cfuvid=CQVRaXLDoQd7g91QDIHjK0DP3lee0oyZxehRvjLI0Go-1722379998068-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SRT2/bMAzF7/4UhM5xYLvukuU+oIcBTXvoocMQKDJtq5NFVaRRJ0W++yDnT7eL
        IPDxRzw+fmYAyjZqA8r0WswQXP79/b2g1fbH2/i6/blerR62HIrjy/Ghm16e1CIRtH9DI1dqaWgI
        DsWSP8smohZMU8tVVd2ti6Jcz8JADbqEdUHymvKqqOq8uM/LuwvYkzXIagO/MgCAz/lNFn2Dk9pA
        sbhWBmTWHarNrQlARXKpojSzZdFe1OJLNOQF/ez6GQ113h4RcKDkm6GNNIDgJEt4HCWMAtLfZPig
        2ABO2og7gGawAjoE1JHB+rkzoQv4sNLTKKCbxvoOtD9AiNjaCRkoAo/t/F+qi63TbR9HXYi0T7v7
        0blbvbXecr+LqJl88s5C4YyfMoDfc27jf1GoEGkIshP6gz4NLMtz/nMI11N9ydW3iygk2v2L1XV2
        8aj4wILDrrW+wxiiPQfZhl2N1b5q9H25Vtkp+wsAAP//AwDiakR3UQIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab8ed0b790713cd-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 22:53:39 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '523'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29997709'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 4ms
      x-request-id:
      - req_523044824dfa69cf77af6a3da9e153ad
    status:
      code: 200
      message: OK
version: 1
