interactions:
- request:
    body: '{"messages": [{"role": "user", "content": "Hey, how''s it going?"}], "model":
      "gpt-3.5-turbo", "max_tokens": 10}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '111'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//VJBBT8JAEIXv/RXjXrxQQgtI6FUSNdGDB6NoDFnKtF3c3Wl2p4gS/rvZ
        Uote9vDevDff7CECEGojMhB5JTk3tY7ntL8xi/vn5Xj5OLteFNOX19nu6bPIv03yIAYhQest5vyb
        GuZkao2syJ7s3KFkDK3JLE3m4yS9GrWGoQ3qECtrjsfDacyNW1M8StJpl6xI5ehFBm8RAMChfQOj
        3eBeZND2tIpB72WJIuuHAIQjHRQhvVeepWUxOJs5WUbbYt+i1nQBd5cGto1nkLBTjhupoU8OwJPo
        wsd+q6aydrQOhLbRutcLZZWvVg6lJxs2aLQlV6eCYwTw3t7X/EMWtSNT84rpA22oTCanQnH+0T9m
        d7tgYqnPejqJOkLhvzyjWRXKluhqp9pjA2d0jH4AAAD//wMAjMj6uusBAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e2106ffa6338d-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:14:20 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=hiR8gaz16Ht0jAYxRynZILSrAhS8fEptru2rCtlIeBc-1721931260-1.0.1.1-P.uGeiWXb8I5GU6v2gUE13wSWMYLCEc6tsuIiZLJalY.8XNe2zN54S.HpNIq2tK8Rp21QI5ehjph7WgmjO54cA;
        path=/; expires=Thu, 25-Jul-24 18:44:20 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=UJt4BSPi4SQ.kl267vx8ZRE36qhsO_3u2QXG3h4WCEw-1721931260493-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '175'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49999983'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_b177f3d4dce5aa88c9fbda0721a16712
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Hey, how''s it going?"}], "model":
      "gpt-4o", "max_tokens": 10}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '104'
      content-type:
      - application/json
      cookie:
      - __cf_bm=hiR8gaz16Ht0jAYxRynZILSrAhS8fEptru2rCtlIeBc-1721931260-1.0.1.1-P.uGeiWXb8I5GU6v2gUE13wSWMYLCEc6tsuIiZLJalY.8XNe2zN54S.HpNIq2tK8Rp21QI5ehjph7WgmjO54cA;
        _cfuvid=UJt4BSPi4SQ.kl267vx8ZRE36qhsO_3u2QXG3h4WCEw-1721931260493-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//VFDLTsMwELznK5a9cGlQnIZWzR0VuFAhcUIoMskmcet4LdsVfaj/jpKm
        LVz2MLMzO7PHCABVhTlg2cpQdlbHC94tzXplD+IjLGc+ed29u6c3eVgl08UGJ72Cv9dUhovqoeTO
        agqKzZkuHclAvauYp2IxFelMDETHFele1tgQZxynSZrFyWMspqOwZVWSxxw+IwCA4zD7iKaiHeaQ
        TC5IR97LhjC/LgGgY90jKL1XPkgTcHIjSzaBzJD6mbTmO3i576AlRyBNBY5ktYfA0JK2sOct/KjQ
        4qg/XQ9rbqzj7z6k2Wp9xWtllG8LR9Kz6Y9oMs3F4BQBfA0Vt/9So3Xc2VAE3pDpLUV2NsTbT/+Q
        Y30MHKS+4WkWjQnR732grqiVachZp859a1tkSVKn81qKGqNT9AsAAP//AwAVaZlc+AEAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e210a5d2d338d-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:14:21 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '442'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29999984'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_a35053fc85965b2d4bbf88820634f957
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Text: I am happy", "Text: I am angry", "Text: I am sad"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '133'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e21110b6a6932-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:14:22 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=f.iNTERrw.WZBisihovsnl_nkHvsg9XMeck2CWMxOvI-1721931262-1.0.1.1-OZqRIUcTAmzMhv02P3RGrNAJBr4gVhCkyN__qJbpkd3pekJnmUuCLUYVh3_b5zrp7.c3HGInZZRuJjpgE8KK_A;
        path=/; expires=Thu, 25-Jul-24 18:44:22 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=7hHPxI3BZmgBscgvKHNNoctOCpWh3PKPe8ilzPs3.8Y-1721931262562-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - heartex
      openai-processing-ms:
      - '733'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999989'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_6cf0225342e063dcd63e018d04249b01
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text."},
      {"role": "user", "content": "Examples:\n\n\n\nNow recognize:\n\nText: I am happy"}],
      "model": "gpt-3.5-turbo", "max_tokens": 1000, "temperature": 0.0, "tool_choice":
      {"type": "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["happy", "sad", "angry", "neutral"], "title": "Labels",
      "type": "string"}}, "properties": {"prediction": {"allOf": [{"$ref": "#/$defs/Labels"}],
      "description": "The classification label"}}, "required": ["prediction"], "type":
      "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '743'
      content-type:
      - application/json
      cookie:
      - __cf_bm=hiR8gaz16Ht0jAYxRynZILSrAhS8fEptru2rCtlIeBc-1721931260-1.0.1.1-P.uGeiWXb8I5GU6v2gUE13wSWMYLCEc6tsuIiZLJalY.8XNe2zN54S.HpNIq2tK8Rp21QI5ehjph7WgmjO54cA;
        _cfuvid=UJt4BSPi4SQ.kl267vx8ZRE36qhsO_3u2QXG3h4WCEw-1721931260493-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFLLTuswEN3nK6xZt6hp1QJZIui9uhcJhLpBFEWuO00MfmFPoKXqvyMn
        JQkVXlijOT4PzXifMAZyDRkDUXIS2qnhpd3+cfPH+Ye+LlP6fEi5fl/8u73fbBFLGESGXb2goG/W
        mbDaKSRpTQMLj5wwqqbn4/Ryko5nkxrQdo0q0gpHw8nZdEiVX9nhKB1Pj8zSSoEBMvaUMMbYvr5j
        RrPGLWRsNPjuaAyBFwhZ+4gx8FbFDvAQZCBuCAYdKKwhNDG2qZTqAWStygVXqjNuzr5Xd4PiSuVX
        /293L7gQN5PZ/ObvYkur1/vH0dtFz6+R3rk60KYyoh1QD2/72YkZY2C4rrl3FbmKTpiMAfdFpdFQ
        TA37JTiPa1mrLSFbQsmd2y3hAD94h+S3+vlYHdrxKls4b1fhZFqwkUaGMvfIQ50aAlnXWES553qN
        1Y/NgPNWO8rJvqKJgukobfSg+zkdOj1iZImrPmmWHANC2AVCnW+kKdA7L9ulJofkCwAA//8DAK3a
        M8vTAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e21180ba9338d-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:14:23 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '206'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998979'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_b96b4277a02a30b537b906bd6ed218e6
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text."},
      {"role": "user", "content": "Examples:\n\n\n\nNow recognize:\n\nText: I am angry"}],
      "model": "gpt-3.5-turbo", "max_tokens": 1000, "temperature": 0.0, "tool_choice":
      {"type": "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["happy", "sad", "angry", "neutral"], "title": "Labels",
      "type": "string"}}, "properties": {"prediction": {"allOf": [{"$ref": "#/$defs/Labels"}],
      "description": "The classification label"}}, "required": ["prediction"], "type":
      "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '743'
      content-type:
      - application/json
      cookie:
      - __cf_bm=hiR8gaz16Ht0jAYxRynZILSrAhS8fEptru2rCtlIeBc-1721931260-1.0.1.1-P.uGeiWXb8I5GU6v2gUE13wSWMYLCEc6tsuIiZLJalY.8XNe2zN54S.HpNIq2tK8Rp21QI5ehjph7WgmjO54cA;
        _cfuvid=UJt4BSPi4SQ.kl267vx8ZRE36qhsO_3u2QXG3h4WCEw-1721931260493-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xS22rjMBB991eIeU5KnPRC/dalsKUsW7q7Lb2kGEWZKGpljZDGIRfy78V2arth
        9SCGOToXZrRLhAAzh0yAWkpWhbfDS1r/9I8TvLrdPt5c47+npzV9rO5X4+2v1Q0MKgbN3lHxF+tE
        UeEtsiHXwCqgZKxU04txejlJx+eTGihojraiac/DycnZkMswo+EoHZ8dmEsyCiNk4jURQohdfVcZ
        3RzXkInR4KtTYIxSI2TtIyEgkK06IGM0kaVjGHSgIsfoqtiutLYHMJHNlbS2M27Orld3g5LW5vpe
        P2yvHu5efqzM32v1fPqS/vl9a3TPr5He+DrQonSqHVAPb/vZkZkQ4GRRc+9K9iUfMYUAGXRZoOMq
        Neym4APOTa02hWwK0umwmcIevvH2yf/qt0O1b8drSftAs3g0LVgYZ+IyDyhjnRoik28sKrm3eo3l
        t82AD1R4zpk+0FWC6Sht9KD7OR16fsCYWNo+6SI5BIS4iYxFvjBOY/DBtEtN9sknAAAA//8DAEt2
        Cz7TAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e211d5d17338d-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:14:24 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '225'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998979'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_bfe7e952c3384455b786fbd740a9b570
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text."},
      {"role": "user", "content": "Examples:\n\n\n\nNow recognize:\n\nText: I am sad"}],
      "model": "gpt-3.5-turbo", "max_tokens": 1000, "temperature": 0.0, "tool_choice":
      {"type": "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["happy", "sad", "angry", "neutral"], "title": "Labels",
      "type": "string"}}, "properties": {"prediction": {"allOf": [{"$ref": "#/$defs/Labels"}],
      "description": "The classification label"}}, "required": ["prediction"], "type":
      "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '741'
      content-type:
      - application/json
      cookie:
      - __cf_bm=hiR8gaz16Ht0jAYxRynZILSrAhS8fEptru2rCtlIeBc-1721931260-1.0.1.1-P.uGeiWXb8I5GU6v2gUE13wSWMYLCEc6tsuIiZLJalY.8XNe2zN54S.HpNIq2tK8Rp21QI5ehjph7WgmjO54cA;
        _cfuvid=UJt4BSPi4SQ.kl267vx8ZRE36qhsO_3u2QXG3h4WCEw-1721931260493-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSTWvjMBC9+1eIOSclSuqE+rZdSqGw9JClXdgUI8uK4lbSaKUxtIT890V2aruh
        Oohhnt4HMzpmjEFTQ8FAHgRJ6838Bt/v/2n3tM1vI//x516Rvq1er/PV761YwywxsHpVkj5ZVxKt
        N4oadD0sgxKkkirfLPnNii/X1x1gsVYm0bSn+eoqn1MbKpwv+DI/Mw/YSBWhYH8zxhg7dnfK6Gr1
        DgVbzD47VsUotIJieMQYBDSpAyLGJpJwBLMRlOhIuRTbtcZMAEI0pRTGjMb9OU7qcVDCmPLXAz4/
        am653tLTs0e+qX4u7u42E79e+sN3gfatk8OAJvjQLy7MGAMnbMd9bMm3dMFkDETQrVWOUmo47sAH
        VTed2g6KHURR7+AEX1in7Lv65VydhuEa1D5gFS9mBfvGNfFQBiVilxkioe8tktxLt8T2y17AB7Se
        SsI35ZIgX/BeD8Z/M6L5GSMkYaakdXYOCPEjkrLlvnFaBR+aYaXZKfsPAAD//wMAmWuuBtECAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e2120cab5338d-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:14:24 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '160'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998980'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_a3b7992a804b3e525844668381b47dda
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Text: I am happy", "Text: I am angry", "Text: I am sad"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '133'
      content-type:
      - application/json
      cookie:
      - __cf_bm=f.iNTERrw.WZBisihovsnl_nkHvsg9XMeck2CWMxOvI-1721931262-1.0.1.1-OZqRIUcTAmzMhv02P3RGrNAJBr4gVhCkyN__qJbpkd3pekJnmUuCLUYVh3_b5zrp7.c3HGInZZRuJjpgE8KK_A;
        _cfuvid=7hHPxI3BZmgBscgvKHNNoctOCpWh3PKPe8ilzPs3.8Y-1721931262562-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        ++T9f//8X9Of+l//+t8AAAD//wMA6ih7BIRhAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e21241ce36932-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:14:24 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - heartex
      openai-processing-ms:
      - '34'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999989'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_efb703d37ce0ed09561291f51a72a8eb
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nExamples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\nEmotions: {prediction}\n```\n\nHere:\n- \"Examples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\" is input template,\n- \"{prompt}\" is the LLM
      prompt,\n- \"Emotions: {prediction}\" is the output template.\n\nModel can produce
      erroneous output if a prompt is not well defined. In our collaboration, we\u2019ll
      work together to refine a prompt. The process consists of two main steps:\n\n##
      Step 1\nI will provide you with the current prompt along with prediction examples.
      Each example contains the input text, the final prediction produced by the model,
      and the user feedback. User feedback indicates whether the model prediction
      is correct or not. Your task is to analyze the examples and user feedback, determining
      whether the existing instruction is describing the task reflected by these examples
      precisely, and suggests changes to the prompt to address the incorrect predictions.\n\n##
      Step 2\nNext, you will carefully review your reasoning in step 1, integrate
      the insights to refine the prompt, and provide me with the new prompt that improves
      the model\u2019s performance."}, {"role": "assistant", "content": "Sure, I\u2019d
      be happy to help you with this prompt engineering problem. Please provide me
      with the current prompt and the examples with user feedback."}, {"role": "user",
      "content": "\n## Current prompt\nRecognize emotions from text.\n\n## Examples\n###
      Example #0\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am happy\n\nEmotions:
      Labels.happy\n\nUser feedback: Prediction is incorrect. Correct answer: \"happy\"\n\n\n###
      Example #1\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am angry\n\nEmotions:
      Labels.angry\n\nUser feedback: Prediction is incorrect. Correct answer: \"angry\"\n\n\n###
      Example #2\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am sad\n\nEmotions:
      Labels.sad\n\nUser feedback: Prediction is incorrect. Correct answer: \"sad\"\n\n\n\nSummarize
      your analysis about incorrect predictions and suggest changes to the prompt."}],
      "model": "gpt-4o", "max_tokens": 1000, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2559'
      content-type:
      - application/json
      cookie:
      - __cf_bm=hiR8gaz16Ht0jAYxRynZILSrAhS8fEptru2rCtlIeBc-1721931260-1.0.1.1-P.uGeiWXb8I5GU6v2gUE13wSWMYLCEc6tsuIiZLJalY.8XNe2zN54S.HpNIq2tK8Rp21QI5ehjph7WgmjO54cA;
        _cfuvid=UJt4BSPi4SQ.kl267vx8ZRE36qhsO_3u2QXG3h4WCEw-1721931260493-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5RV227jNhB991cMlIe2gW3YTrKbGEWBxSJpA2ybdJu2KKoiocmRxI00I5BUYjfI
        vy+GonzBLgr0xZDnQp6ZczjzMgLIrMmWkOlKBd209eSC1z+6s9nqnDd/dTfMv7bnNyf08x9/Xi3C
        RTaWDF59Qh2GrKnmpq0xWKberR2qgHLq/O1ifnEyX7w5i46GDdaSVrZhcsqTxWxxOpmdTeYnKbFi
        q9FnS/h7BADwEn8FIhlcZ0uYjQdLg96rErPlNgggc1yLJVPeWx8UhWy8c2qmgBRRHx3BO1L1xlsP
        XMA1aXYOdYBbh8ZqqcTnlNPR0RHcrDy6JxVty5zmUzg+vmLXqADX3nd4fLyEuwoh1gbWQ+vYdNpS
        CdyFtgseLEGoEIo+6+GDWmHtp99jw3LqDw9jeK7QofIxbMCSwn3FXW1ghfCp8yFGpER4ZmfgW5yW
        0zHkWaXadpNn8qmodOnTK5Nn301zWgjwD0o/SsWXayWU+QG87pxDCoK9aQMYRg/EASzpujMIijaA
        KQcCQ9lZgxFLLHsKd5X10NiyCoJUq85LA7YBkmOwUF0d5FMNxdkAlfLgEUm6xKFCB5GodfDTgYLf
        PTq4QjQrpR+XOU0i5k6sRbJKknCOFOoNWDJWqyBYKxV2ML4RdrYMg3IoFaZ+mw4F2x5TXMR/PY0J
        DfzWlSX6gAbeV4rKvh8Sdht7N2D+iE/Wo0nWZU53DMoYh75n2Yp2PHBUF5oxPCMQooHAg8re18rZ
        YhPDbyIG6IUnrF2u29pq21frg+t0OGx3j/rrohnkcOv4SYjcl8N1onxLd1JvksaX5AP3AbhuUUtf
        0s19E2PbfkLpdF+4S41ph8bk9PDwkNNH1FyS/XeL1EPhuAGRwnSof78Q5UGByKzG//cSchrqjbff
        4Tos4RpUA30iXSYAy8FwENQfuReUDAdBctleSPyb0y/8DG6oc+/yF0ttF173M152Qn1NHeqFJcQr
        ivMoPoVBJxYNXCclWKbhZdudCYifhaVBNz4cPpHE227gHLR32l+W5GEONPPOiGV/QBhsWG5WAb82
        1L58WXGAHGpjQFJh3e7JrSODTqa7+Q/Zgbht0zp+QrDBQ4suekjjNEtL4XW7TWouW8cr2TzU1fXW
        XliyvrqX2cwkm8MHbvv01xHAP3FrdQeLKOvB3wd+RJIDTy8W/XnZbk/uvCeLi+QNHFS9c5wv5qME
        MfMbH7C5LyyV6Fpn+y1WtPens1mxeFuoeZGNXkefAQAA//8DAP4OTwPOBwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e21279e05338d-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:14:30 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '5079'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29998435'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 3ms
      x-request-id:
      - req_d7db33f13b2e779fbbed2c6a7bb587d0
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nExamples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\nEmotions: {prediction}\n```\n\nHere:\n- \"Examples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\" is input template,\n- \"{prompt}\" is the LLM
      prompt,\n- \"Emotions: {prediction}\" is the output template.\n\nModel can produce
      erroneous output if a prompt is not well defined. In our collaboration, we\u2019ll
      work together to refine a prompt. The process consists of two main steps:\n\n##
      Step 1\nI will provide you with the current prompt along with prediction examples.
      Each example contains the input text, the final prediction produced by the model,
      and the user feedback. User feedback indicates whether the model prediction
      is correct or not. Your task is to analyze the examples and user feedback, determining
      whether the existing instruction is describing the task reflected by these examples
      precisely, and suggests changes to the prompt to address the incorrect predictions.\n\n##
      Step 2\nNext, you will carefully review your reasoning in step 1, integrate
      the insights to refine the prompt, and provide me with the new prompt that improves
      the model\u2019s performance."}, {"role": "assistant", "content": "Sure, I\u2019d
      be happy to help you with this prompt engineering problem. Please provide me
      with the current prompt and the examples with user feedback."}, {"role": "user",
      "content": "\n## Current prompt\nRecognize emotions from text.\n\n## Examples\n###
      Example #0\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am happy\n\nEmotions:
      Labels.happy\n\nUser feedback: Prediction is incorrect. Correct answer: \"happy\"\n\n\n###
      Example #1\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am angry\n\nEmotions:
      Labels.angry\n\nUser feedback: Prediction is incorrect. Correct answer: \"angry\"\n\n\n###
      Example #2\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am sad\n\nEmotions:
      Labels.sad\n\nUser feedback: Prediction is incorrect. Correct answer: \"sad\"\n\n\n\nSummarize
      your analysis about incorrect predictions and suggest changes to the prompt."},
      {"role": "assistant", "content": "## Analysis of Incorrect Predictions\n\n###
      Observations:\n1. **Format Issue**: The model is producing outputs in the format
      `Labels.<emotion>`, whereas the correct format should be just the emotion word
      (e.g., \"happy\", \"angry\", \"sad\").\n2. **Lack of Examples**: The current
      prompt does not include any examples to guide the model. This might be causing
      the model to default to a format it has seen in other contexts.\n\n### User
      Feedback:\n- The user feedback consistently indicates that the model''s predictions
      are incorrect due to the format of the output.\n\n## Suggested Changes to the
      Prompt\n\n### Revised Prompt:\nTo address the issues observed, we need to:\n1.
      **Clarify the Output Format**: Explicitly instruct the model to output just
      the emotion word.\n2. **Provide Examples**: Include examples in the prompt to
      guide the model on the expected output format.\n\nHere is the revised prompt:\n\n```\nRecognize
      emotions from text. Output the emotion as a single word (e.g., \"happy\", \"angry\",
      \"sad\").\n\nExamples:\n\nText: I am happy\nEmotions: happy\n\nText: I am angry\nEmotions:
      angry\n\nText: I am sad\nEmotions: sad\n\nNow recognize:\n\nText: {input}\nEmotions:
      {prediction}\n```\n\n### Explanation:\n- **Clarified Instruction**: The instruction
      now explicitly states that the output should be a single word.\n- **Included
      Examples**: Added examples to demonstrate the correct format of the output.\n\nThis
      revised prompt should help the model understand the expected output format and
      improve its performance."}, {"role": "user", "content": "\nNow please carefully
      review your reasoning in Step 1 and help with Step 2: refining the prompt.\n\n##
      Current prompt\nRecognize emotions from text.\n\n## Follow this guidance to
      refine the prompt:\n\n1. The new prompt should should describe the task precisely,
      and address the points raised in the user feedback.\n\n2. The new prompt should
      be similar to the current prompt, and only differ in the parts that address
      the issues you identified in Step 1.\n    Example:\n    - Current prompt: \"Generate
      a summary of the input text.\"\n    - New prompt: \"Generate a summary of the
      input text. Pay attention to the original style.\"\n\n3. Reply only with the
      new prompt. Do not include input and output templates in the prompt.\n"}], "model":
      "gpt-4o", "max_tokens": 1000, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '4894'
      content-type:
      - application/json
      cookie:
      - __cf_bm=hiR8gaz16Ht0jAYxRynZILSrAhS8fEptru2rCtlIeBc-1721931260-1.0.1.1-P.uGeiWXb8I5GU6v2gUE13wSWMYLCEc6tsuIiZLJalY.8XNe2zN54S.HpNIq2tK8Rp21QI5ehjph7WgmjO54cA;
        _cfuvid=UJt4BSPi4SQ.kl267vx8ZRE36qhsO_3u2QXG3h4WCEw-1721931260493-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//VFFBbtswELzrFYs9NYAlSIpTxb62SU6FgRY91YVBSyuJDcklyDXsNPDf
        C8qKjV6IxQxnODt8zwBQd7gGbEclrfUmX/Hp5fjjqfz84Hr7dfm4et0cn/dD93Pz5ZvGRVLw/g+1
        8qEqWrbekGh2F7oNpISSa9XU1eq+qptyIix3ZJJs8JIvOa/LepmXD3l1PwtH1i1FXMOvDADgfTpT
        RNfRCdcw2UyIpRjVQLi+XgLAwCYhqGLUUZQTXNzIlp2Qm1J/p5YHp/8SkOWUO0If2ILQSQrYHMQf
        BGS80qAiKIjaDYbgyKGDT1QMxQK2OCrv37aYRuWGMI9RdVu8K3B+/XyNbXjwgfdpRXcw5or32uk4
        7gKpyC5FjML+Ij9nAL+neg7/bYw+sPWyE34llwxXj3M9ePuQG1s3MyksytzwqiybbI6I8S0K2V2v
        3UDBB32pq/e7ZVn2ddOrqsfsnP0DAAD//wMAN68NUDcCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e2148b962338d-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:14:31 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '630'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29997885'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 4ms
      x-request-id:
      - req_5ba076bcc94f2c3cb7dd21c9bbfbe262
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Text: I am happy", "Text: I am angry", "Text: I am sad"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '133'
      content-type:
      - application/json
      cookie:
      - __cf_bm=f.iNTERrw.WZBisihovsnl_nkHvsg9XMeck2CWMxOvI-1721931262-1.0.1.1-OZqRIUcTAmzMhv02P3RGrNAJBr4gVhCkyN__qJbpkd3pekJnmUuCLUYVh3_b5zrp7.c3HGInZZRuJjpgE8KK_A;
        _cfuvid=7hHPxI3BZmgBscgvKHNNoctOCpWh3PKPe8ilzPs3.8Y-1721931262562-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1RXW8+yvrK/X5/iyXvLTgREOv7vEOQMLQgq7ivxgIAoUijQ9eV3fN5kr6ybpplO
        mmb6O8z8+18/P3/eeXW79H/++fnzLGn/53++seu5P//55+d///Xz8/Pz79/1vzJvTX67XstX8Zv+
        e1i+rrfpzz8/4v9H/pP0z88f39ZbtiUHE82h4RZI5RZl3oHXvMuYQkF28JNpqyROqGFmKvok3R6z
        x02vJikkGcS3k8BsaDJ/rINMQ8bjescPUHQu5qUQIDfanIkuiiOauC8KyFsEEiFKc0iGIUc6StaP
        N7MWjKJZkBRnde/fO2bkT5uPE/I+IPjGSDbl5plPYhd4cDmamNj3V99xvGsPoE+PmDnRXcoHyLwC
        ntpHxIuBLSpqPucCys9mTQK9iNDEPpq85s/9Hu9mWvFpszR0QP7rPkCceYiqbk6htR2LXNfmAY24
        UgcIj4QOyw11Od3sFRE261Iizu3Qock/4hsiGKFhXipLn2pmoUNqHi/EfIRL3tvS+QCOE2eDdAnS
        apJO8Yyug0fwQsmtfGKIB2h40s0gR6vAH7IdFVT5JQfEoVfIqddIInR5fsCz2GqoXx9jgJfmLFmM
        E8Voq2kxghOZAdEO5dmgYfJQEenlkvi41pH8RsVtrcerD5YxMGM+FJEC2fHsEBK1HX9v9qMIvnAz
        iEbDOpl9+7iFqpafTNMOhdF6ko+RqaUpcxPDSF7d+nKAWTrZmG9Yz+e2uFO0FrYH4purezeG88oC
        u5AEolNm++PevA9QrFc2cROjSvqAt29Q7kXO8F1Tu+m+CQ9o8CptmIuxqsadPosQMDseRvcS+ly1
        Nbqm50/N9FSTuymQ9x/YSdNrEDyNc4YUL4LW9qxBllerjiaTdgbtutAIWZ5LxAX3WUMsSSfmCCfo
        aC+YM3LumU9u8/DiVH1lNxB784DH7L70P/KJYxXvtPSLx4CPngQYkkA5E3/fc5/HkgxwK72OkHK8
        GMNpAgcCGZn4YeEhGbevyxa24qwyzTwaCX+N+ANVNGfEkAofTcVsKdAP7wWJrdMtoehES7S9fO4s
        3CeXZBbsT42yY+aQeNAcJNvPD4B35Dlz3qHeUZ7XKaCKqbgd9R5NT3g3oLfalR0KhVRcl1oNhtWI
        CZmuljGjl6NCau4vRFslUz6p/oHCM1rnJEx8ktO8lAOoT+SEAd/FnBOjFBaeoWOm6TeKKCBGVYmm
        Ncn7TjVGehNq5N/kC56jqfB56zspSL1RM0PjYjKDu/WQLYY+Vu67Z8LbizrAdmNawxwrbsUV/7YD
        N685llfz6I/dgqXI5qWPv/g3Jrn91BA2UkK2kl91fTUtZrQftzsM22vPZz9pb1B8Hirxh1dSTcrJ
        +6Dv/5HdzlhVBfusZOjmwiMOxAS9o807gwa2LTvH86bjYvvxIFqfj1+92Odz/kgDpI9yTLbU0xLW
        rS8pYC8ohlVoWdVY99q8dl7qAs+n2Uj4hy1KNGeyRfymdPnSzl4N2EthwpPtvTiVzt6M2sztB/UK
        kj+noyKinemcBom7ijHo2XWHJGd9ZEZLlYSrLgyrNscJVr/v++qfB0aq3IijZzUfh/NDA7oMn8TU
        cNjxLGWgvqi+JNonspP5Okw60PKWDeMqiXPubDcBKAtJZzhYebkUGnOB2ENpieuYVdJrjRqgr15g
        Rbks+GC8BwuFzTLBTSeTajzw5w7o7ewRb558PkpgCsgqgpF4ufg2hmvZvNEXH8SXH2EyBs90pz6k
        1mVhabjJ2F5iCu/U3w1o/VlX/TV+7mBZJJjZU4V9/pgWByTIVca2cVLyST7XAUTuUA1tA0U3I4Xv
        1Pb+WWH0rW8P7toDyk4T2ebFKmGPaXmA6HYdmfdZ7vzZPtQNKMlCJ4GYzv6sy2cNzNYfMMV3Melb
        cjuodZGGJPPewtcP1AKmvjMHaTQnNGZVmKJFeTqxkFhmN7vW9g1jLC/Zhmw33ThdQxUW0tgQ/NUL
        dozaEmUvyobJwkM+tcEnhS1EFnFlT+0ormYKGzPLiR4rbcVf+XsHheo/iF4qYzJ//Q6OwbNg3iTN
        eW8frw2qpu1ikA3nu0kVio65WjDbr7Sk983LFu3Xm26Qp77JpzomOgL5sGe4G18dX38OB7Aca09I
        IOaovRbdG72UOCbuw0sQ56c4RVJ4WhNL4Ek+nYmWrfH5YZNYUstqXliuDq0tWbiVFl41zeGthFRs
        PsTWxjGnX36qL/ttsI1mPSreU8jgpS2XeL7pa4NKF2FESp20BEdC6vfuHjRkX7YjuxTRls+CQj30
        qzf6UlkafXYvUtg8FhfmOhHPh9cljmCWcpv4w8Wo5tvo35B7lMJh9tQ2oYIbNMjzHxuiXfefhN9m
        fFPRp7DY0Zx4Nz3igwNOoAtkM/gZ59V4neGxdva4VgMLTVXoNOj2VGNie/OB16HUb+GxytggiuRj
        jFF58v7qxe45WYjn87VG/cvnuJry0vj1d4iw7xK9G4xqfK/1C6iLo/mLZ6OPjC4DFoo5c+9CkX/x
        jNfiFoAZ5xYnvSE9brAL24Btzru8ovH8APjlU3K/b6plEikfREzqkFCCpmLNdSOCuCEHrK7Ui0/v
        G/kAcj01zFEudzSOnmuBKWoOblNy4PwRao5atLJKLAzMZ2ywROjsoztw+WIm85R3CnwyEzFXsY8d
        l99ODfUmb0j42tKqX1iqhtKiuLJIPZ/5JL0jb/31G6xmaOLckbxRDeTAxKOXNRXjIYbffgcL+tKo
        JHP1UgB9SmtYv7ZBxx8EHCQIek18Ibd9bqWtB1//JmZqf9CQj7sGKYGLmXlKbv5E2UJQp1OjkNB1
        HdS/rt4OBH8zMof7ZfeZPuUOAr2IWRQ913krn2kApyo4Mic7MWOa6XMAjyxew0KTlISW9w7WfXPh
        xKiLpzHSThNAzA7uX/xQc0lV6HdZw+LlhvpzFCsz6FK0ZLbdNhXTVkKNTmIo/PKrGjKiCHCd8RW/
        9Srlcxf6M0rSAf/Ws5o0SanBHq9PPHbHkXNwEgfy5qKx4/BZVkNW31N1eZzPX/+o8rmlpQWNa0tE
        F1uN8+ApRajeXgKWBU9UNbx1KHCTDXgVeb0xL5FwXrkvL8RqMzvJuFwqGdTTURzEilQGt9KHB9bF
        Kdmeq49qWtnRbj08hw3zIauN0bEuGC5nUfz2F5BPY7DdQhWePGLwQUA81KNy1WTswgJ9X6Bpp7si
        mizSMa/jXUVvxlGF5q1fmOu7bTeT5uj91mOo6X7MJzdxNMTkTh4QVKnRH0U8wPc+DJS8E84vYYq2
        j7wflmVR+3S7bwdYfMKAmOet3fEeqTO8u8gk2tKv87/91vmg+FiZElZNNI8bxCSQmbmGd/KX781C
        JliWV6fub3+RV/mZ6Jncov4eGfSX78yAG/W/80ypMj3R8VRuzHx+hzsVkP+8M5+/ZT4X5bGA3fjZ
        EPzkHl8aK3b7Ow+Mx1tSjfu43EKgvjvi9Pj5t15ol44auRxO2JgsxUoBbNPG/wcAAP//LJnb3npM
        GIYPqI1KMo9Ny5LFjBep9pCEJDSDOfrvp/93Bszifu7rmrXFZmea7bKAty7e2XXnD+GcaKYCH+Us
        MY+vT9UvTyRnfdLxHmQbjbrliqhLrSfxBFHRWYWDBpIdnpmnEuaM35U374Ot8WanILjxOV+fBHDC
        UGcOvzdo7JPRgvUXZjodbqt0bNdCDm82/uuD/dzBLIJzZB/a8a8ZbvVjKko3pNjk+Pls0u5N9RZ9
        m5zjZ4vBmWocaiCFD5NysZ5T5r5k/9//3kTxqY/7vbaRLhWNMHrUp2o0TpcY/p6GyzDbTim/Ru8V
        tEdJJKdxdQxHz6iW9W1Vcv+on57+vn/JC2LdzlY1uJukQ3sUd8wUVq0znLV+QKWKKtp/0iId5asN
        aM93Od5Fn2/VvFZ9DefWzxnO5EtFT2dd2cs0Z8S9FJd+LspH8csXzIJJ7P+dx5fvp7jpWKO/n9M6
        Qkt+ksi9s4p/HCWSl/ymgX16oElA2UoqTmVIlnxxmGlcY1j4lE6tPjif2e4KwNo3+rf+E+FBKVtk
        rIkC7pHPX6fDsE7eL7L0h+rVwi0H/UVMpvzyNXzeFLgHtUB3q7zXZ54JEbwvqw6jqeicGXY3uhtf
        yMAVy01nmZ8WhO2cYrFJz9XMZAH//ofpb4bC+VVQAU2wMpnuNHU4HbdJBEIWzBSMu4d4B6oEbUse
        7HBdbTlv5Sr/9Uvmro+aM9i1ugHlj77Zwd8P+tisag1GW9eJKTs5nybp1km/PNQ/wzVkTDYxfB+X
        NW7T+zYd45qKcInSiO7VY6UP7+Ltg6q2W2Ksvc7hOQuyfVZdWrpry45Pszge5EiRBHZyz7JDp33b
        gsibz5KHBZq3aTajR/casGi3ec9L5sTIEMsCA2lkNKRMadArYiozT8RH0/54DYDEX4bFa/1wpnTS
        a5Q37z+G/ySv6hnFAhrx44NBrXch1wWeo/W+dJl5MhTOu69T/Hidbp3LveJhOHRwQ1+bmfUBp9NF
        uVlgr9EWv5PGTmeQzAHgkByxfhl3iD3wZ9j793kkhtqtQ5b91YJ0Y9nIlPhi6zOzrRayRNhgJmen
        ftJeficv/Zjoh5eqDwmZrr8+i9/xU+kFMn8KGFg6YaGTBH3hM4z8lXlhWrW+ocl8b0tIQvtF9Kad
        0Hd3ETHYa7z9+Qedjncvl4RMnvGLGTQdeFdSeEy0oFX6enN+D3YByvernCK4Gs5kN66ArEfiUHTo
        Pvo3p0ouF/OFMidqPj2//nFA31XQUD6lmjN3ayqhVJ84FaeQ9Lu/rbCCh/YImOYegA8tBhEe862g
        8zxUiF6fVSQjSfjihhwf+liWlxXSIyln5PF89R/ncshBeG9cZu9m5nyWvg5MrTXmnEtd31Lv20nr
        Mr1hoVKycCqKrERsuxLwOim0dPrbDIBiY/ug66QowyEw6Qb1DYxMk6ZvP4W1qYBsJyXd7EI/5Cn7
        NJI57COid/cnn4tHVaDl/i2+Q9HHnO5zyLRYZdrue9RH41DF0IZZwK7GWeVTtmqvSHaOJX4/3l4/
        esdH8Y8vT/Hxgz7EdAFk+1ou89fQJ/ljxPCOPINhLLwdTlNbkdwkNnBTy/t0fq4WvyRYIY38yyec
        vjRP4DtrHlNH64y4XXcbRLoDYGFer9HSx2N0fhFx4cmrM0lOPsCbb3qmUijT/pPNA+RBZRDtsm1C
        KscFyDfjbyRdzcx088DKAMo3UMgh3Q36KCfCCh1EpfrHB6NzdnLpdmllzPWdVA0l7aJ9DMEed4sP
        pPpmzECZYsy0s8xTPt7aXPK9/MTUxVfs3nnkS9V0WDPDqM5oovbUwfMVl8Tx+G3JpyCGhY+JoidN
        ONaur6B38cgZXn9qNP+Vpxr8gFzoOmtZ+s+HOWtHJ6fRu6OXp0sFPNQxYKfIaPgo7G8A7ToKyImp
        drrVbjhAq+fokPtW8ZzffsOFrb7s6NcV/57LPodXa2By9Gudb9PHzYVor/qMvBsW9uJwVMBNIgPz
        6Kn2wqk+Jf98087aJvqsWkaO4vp+IF7q35x5A2YB6kvTmIdt15m73ipQ23oPdrjrj+pL6swGufue
        iCmDFfKe4Blq8+SyY1pWvH0P+w7JnXbC6081hJ3xkg7QjmqIxdu5rXid9wmc2EfBz/PBSoW4MkRk
        C4P2my89x3VIpeW+4vUzL3t+8Z8F3B72iXmyKXDeuh8R7uGfsPAg5/yiVjZ4q8+B5vrq6yz+K4Mo
        ywh5LD6WR1smoCyvE6aawQYt61fDcn4YSfogneusvf78BtMXPvr5E6nwYI/fi/9lWiQGaOEpdlLi
        ff99/uW2dI3Oy32oImfpSzFMLzsgTv3y9C4urhLQwyFhBzZ+Unr2LQN6LJwZ3rFeH5V35QLQ4kkM
        yW3QyNM6hvPIA2J3g+bw8VZkcA8aga4z/gh/9wHFKQS//0eLDy6hqjcvYlamjWhoXnxIpdJb+ELr
        pzvrtB8PMYPfhIrZ/IMBH3KJuf0t4hOO17G0+Dh2WeW9w4PNOYHxEN6JF5AzmiXEfOSSR0dOahDq
        n+sU0H9+z7UTuxe/nuHCdAr+8Hp8Dn2nXe8+uoZtuZx3g49ao3bQ9oGJ+bcJdObsWCvy+/PJbCZu
        05m6mxbmW3Wgcmy8+KQ0EgZ7hoz81of7pWQBlqUIVwtPTgULRPkknjbMvkg0pHZLNmg3PN/kWBaG
        vlm16QzpasUplxOzF8IqUyS2HzIqmIKmfzeSVsA5wn90nG3VmV5j7qLvym/ojnaXiid+coXgqSX/
        fMbUYl2E4BtwKpvRlY+3sbOA4Sqlm9Pt5Pzrs0tfI6R7vNCUryUBxX6yp5f0G/LJij419If2xPSg
        rqtx8bFS7MY90W5zFbKnZ9mw5CVxeYj7qb7/XQF/NkcqDLvQWfxxBEPlXJkb/akhfxTRAbV+OjDL
        vtNqyOmUSepL0ajs4bnqlz4kiyjJsHwwy3D88fUWeoc+tZNRbVH3kkB6VwEW6vmUFug2FHB4iBYh
        UWX2I27ogFyp6/FmDjxdkG/ZCtQ7xsxZ+jALy0qBxrVS4m0VT6dlrgJo6lunWR6+0TANhg9JaL2o
        tPgr9utnS//CxcLXXHpPGUTfu0CIshXT9qWYLZwj9MfUWHvy4fPwBnSO9n/E6s4k5L0cRbD0Z7oT
        nzSdl/2EeCeEeCyf92o7pLd6D2VgMaXOk2pKFU2D+yoTmDUEQ7p70Q0GwWc3Kg53COd0TGq015GP
        96PmofEptwOsnrODd8mUhHxtGRrgQIvYcTPkKXdjQUTnlycSTGalHyuVuftfnyjX7wLNcXEVYY+i
        jiW+YOlT8Ge5kOaty24n1+Uj248Y7Znhs3wApE/X8P7/+4ZbRb1Dd5YloIfgHIglRTPiRmxTWPwP
        LgavTqlpqjF4gh1i9ByEnv36bf+wAXNzc+n57mZjaN/FA+8yeknncwCHf/nv3u5Rz1BilqCoV4X9
        wfGW8mbtaVBZq5q4S18cba644JGb+Ms3nQ/0vAJ5LmRyQnBMh0j9CyAhxoXdkbXny/ooUJzn7+K3
        fX3pmxksfpF4ZiTy4Vy0GWLJYUtMfhIdfhDqCDrm0v/9UTFjCa5uRZnj9EPI06LHiFtjxPz5PDnj
        3joFMK5uO9y4Gy0cfSO7okEoX8xefM34JKmFGt/9EPwRN/3vvEAh4yM5BcEejc/8r4RlPtFJMIOK
        uhEXpUO1iom3de7Ov3wJollhutLWqWDrfisvfEHX/qdH4+aj2rDKrzILck12hrxkB4jqtc5cP5vS
        xadZwP3aIsek6cKBQY1h//bvzLHm2Gn2u1ZA7Cl9sLjzh3QIS02RlSnCRE3x2aGwuw1AV+6GGKd6
        7wy768f98QVzSSNzjj6O9NvPf/Pz22JHgqdkMrqLNnI1ZXOuwd9NvtImFiw0/ZVzLTetkpHf+Wd7
        qwzkK5qBftkpDmfaTQm4lzCn7N2Q8Ocf4Vn+AX6Kq48+Lf4V6GFK6OoqfvkkWSVFpbqvKE9fbzRl
        qyKRg6eSkOyvknhnvt1yP3v+wE4fw6uEXJUl2PE2JcY+vads6J8AC88TbT2PqL0EmwL6hwXMQ/sq
        HafPNYDZCwYqxRpKv/G88WWxn7eLH2v53KxXClprfKZXN+l76oSfDHU8AEKW+dKvLVdBi69jB1EQ
        qlmKR0Neabuaisv7aIdLn8pWKMzEaP1DvwnMRoCX0m4W/1pVC59vANnig0q7menjL39eQ7khOJN3
        1fRxyxjQqgkxLPONW7vVjDKKVaI8rt9wfq5mKv/4NP6dT7NtCjTlak4OF/WK+oHeAZnW7ki8uyc4
        s3VsXMhlahAzPBxD9nsfWniV2H+zWo3OWc9Bi8An4bvu0zkf9UwiwjnG49qnehuGegfXwTlTvi0c
        PvxVVQP+q6mx5Jt5P++QsOzvX07M8jSFn8pTGmj5uCf3yJ0RXfqUvEsL5V+fYo4+H2DxhxSFo6DT
        F/u6aBsVE8GV4KH5u36MaHONTsSKs8CZK6I3QAXWMte9HHvhxV4Y+CgyplTBW/9+pWKEYz9ciNKl
        u3A+1eoVhJo3NCfqRZ/jypWk5T2ZeUt+zMdXt4LC9kL6HwAAAP//nJrL0oI8EobvZbZMFXKQtEvk
        LGAiAgo78ICAiIJJgKq59ym/fzurWWaRqqTz9ttPp1p8vOeBK7vPCl3Kx4rZl3A1TPTS6ihv1mcS
        xFwOJmWNMlSwQqBtnoXDBxVCBUPgMLZL9aocxdOjgLK76fglt1EsvcktQaMhTwyTrWJSJy18+Nff
        VMB//v1/TBRI/3uiwDfGhJ30Lwmm6MUL8LMip6jdVsH3eGs9GPrYZbuaBTFVzgWg7rF8qeCNbzSo
        8+jBxZI9Rrp4Cj54bDSIrxdKfLCsWLoENIPkWljEeZF3Oe+LO0bvvHsSPFW2yRr26VH4chCFwb4O
        PDIL0PYpslj4+tCmd/sRQ6+cbiRI1p9gPrhrB2pxXrB63ygl97xeRqvATtkWKbuBV46mQvVwjlRR
        j7+MIK8aseDmE1eQbyU3ZUrhWu1OmF/q20DLdebAIzJTpucuaxZZKVuY2GoiW/cUBlPXXR3Ye9jD
        /LlpmyE91ABHV4mJ8yDnYOGX4oCKm3unaiQkcV8eohlqSCQS5psiGFD5wJAfrhhzyZYWZkXaDezT
        XcG3N47Qsj6HGdyM/Ep8x7PLqU4SjIyzfCTWvqjLj/LuLmB19Qo/B3UXLL7oXQC5AWYuCW2TKZQk
        MMf7hZjWad/Mkv7pEaNKQEzmy+UUm2EB9zqSqaKf6maSqwdAZIQBya3puIzxeOOo4OcXVmSdmvO+
        1w8gXBdgPh5f5ryx3gZEKI6YpZyH4fvxa7oJmTth7bYZzMny1BGux0uBOfHGcpou9xndpdElwdOn
        5miLzIeDmTPM01Ef5ssGjaBhd0UXifqDlLpvDPTLEV0uxjPmk7JcQA4thMWsg4aaKFyhN5JH5kVu
        guZ52Z9Ave1LPB/HqzkTgbebiogWBSx5aLoEXQF6++jJrkyUgfPl1MMGNRLbDfE3GElx1bQvMS9k
        X7Oq5NNZ1tBk3V5UNmUWj06ENG26dh88s0U2l0OYC7DYlz3xT/munGLOV+jjuB8qIlEu2fpY8c2u
        mF22u3ZZM19XrwsaXt6eZea3bqYmcAXU6OqWnLbyNZifKz8Eka7u5O6GfvnsutRCt/JRMbtJ3PKb
        vNpO00A9kFsPTTmfai2DNzt8mJFKRsyr3MnATpMNsdXdt5w1xaTgFuuSRVVwNOdfvOA0Oh3ZmkiN
        KYlCH16zfCDB4Oul3FxzFbxGkH7nP8V8vGgeOLVIaGqfKOKCbmjiWy0oM5qVXfLeXx/gXLUSIUbf
        N8sUO7pmi+2ehdWDlsw1Bf6nP7a7XP2G26XuQxVkIfH243Oh4n0lQH10n1iUWyl435PegKhMMPGL
        4YzmsGkuqBOSLQnXlt3MbzUOQdDdLYYoV8tvLPRUU203o8g4Pc0pjAoK8NS+WM3qvpmT11ter5Zt
        TWK69WKarT8U8es7IYbzDeNZ//YcDUUbsOgW3Ac+2UMBaaTG7Bre/GDZC6sPWGKvkBDuycBfXa7D
        1ggV4qrtpqnzmyGAbkQPzFlmL5xh+YY2T9kke6Y0y1IEjKLQO850VebPeLaiDUbbOLFw+3Jew3I0
        9yNKGscnGO0TxMU3ptBndYo3R/5ZFt26YvS4Pk/EtO9l853xw9mEibwiQRn4y3JNHift0FZAwnwY
        hvnFCo6UnO0xmvXGnAV5sn7/jA8WSLtm+AbhRoWBHyNmb62qnJ1C6rWvVr6w5nh2/ArM0UcePjIs
        Gppifs+15IO7XTIsScoYz7Zln+BwFjSCP2dx4fdV56M+tc5k31NhGY2jU/+zDpf3PZ7XVZyh9tTs
        GL4SiEf1uavApledip+nFc+PrgW0vGjCtkj3A27OpgPWQWZs72q9OSvnI0B01g54TdIOfVfPqIA8
        1XMs7m5DydIUdyCu7SvR9eN74beNVoDW8D1ekVEop58fwXZt7IjXL+PA2wxxWB/ZB8/iHDQ8DuMM
        5Me0Jcf3I42Hc4AqEOrUYybdeuVq/gQtSiDcM3umwzL8+Xn56RSmdysrmArjKUCXOBPZuX3bzKFZ
        OeiYQUW27fVZcstDF+0rrRhWGYRo0lGZoTw1crwcUiGmu/6oQVH3A9F//j8XriPDfulihotNFYzP
        a9ZBT4oIb37xnfND6cD1bpRsB18r+DLofTRLd42+OjUL+EEQHAjcsGbmzz9/95014ZNEhBA+mrW1
        z1swZ6Mju+jlInoZqhC2TLOJh5tnOX6yNIH9LjVIHIfcHMQ2XaGU0wuVI2lu6he5Yfj5GdnFL6mk
        dLkDsq4Z/0fvXHorHFbPU0e8NTqYSzZwC82FZZCUmE28HF7TCBNkCyt0cW462XaOsPQKJrZzfzST
        eOIXOH7cgk75qx6mn17Rnz7XzvQ06XYOC+2w6UWyW+3qeHov2gm9xFxg+zIJm9kV0xUKvPOFOZ5n
        ICldrw/AUdIQN3l1Da/Wv3zd+i+6tN0rmLb7yoeeZBGxdLlEwz4cW7DI94H5eaTmVF3ZEf3tv+/5
        Gk17SVM1FH8PxO59ZeHwLmroU+dMtuIxa6Y0hxEgWSoqDdv3MJaHiG+GmAHlp6Yy//HbTUJltuv9
        cGGXQ1hDOhgnoifS1qT3a1tByLFIvI3Fm2WBwEANlyxijvEunpI0t2C7eW3p5sJoMLxi0UL54Y4p
        5JvCHJtaNzZOeoipJu7bZv7T1zAwm2zXuoIGA/kWjPtNiCVJHxfOH6YHlRamJOAKL2f36ycgMjEn
        WzyVASNmVMNhbbks2psXczmt6QxOeoyJu/keYi7ovgrdY/r+/Mpf5suVJ3DtvTvB2kmK5yNfaeCO
        Rs+2u/5rfh9sAbgU1Z6EzDZKHkmNDr/6TDxTnEym7KoTXDiOGb5lJBjHi+ZDhWWfmNdgKVv3dKBg
        h3iNq7fzDCblqDmq/VY9dnys4oDbPdc33vSeqCpa9TK79+IGxmwfmKG9s2UMtK+18c7FQoxEqNHz
        x29IYfmRkDTYD3Ne0w6OrhSzc3N9B/z0qupNuzmVNHFkHCz7sG2BW4+Ibeugjal4BwGWXsLMks55
        /PNbBzJD/psieS4j0Y4X8MV9xpzVeW9O0xk8FKYiZTg6BM0UCxWF6I4c+mgME63UeV3A8xvdiBNL
        LfoYVu4hT611ZoQFlNVpDTrMZQhUxoXZyJngJCgZXB1Pv3o+PNTNiIi9XGmL3oXZS3Y2w/1gMmZX
        17RZrquRwn3sTGZ9HnIzamgtw/54dZgryEI5E/NyQJf9Rv3xpVHKXiNb6Cx5OsvUuQ6+P55DP75j
        zmVI41k5FwKUdbtlnutNwwyVPiMp0Ae8FK8GTeruu0Li8XDD46keAtplnxuoN1JivvM0k036XKGH
        qFxxrpYHtEz4U8AxEyqyRcp7+D6TXfenRwzn/DNwV744cJD6HTFvxrzwV/YStEft1zhPjdPy47sM
        ZjjtsNx/PujDz+sCfvEmO/3elqOiv08abh4nRh6+UDL9aDvoWDst7kyZlbOwsz6IPrnN9HolxvP7
        0yRod09Esr0FYjMjVNXwXqQGN798nJ9dkUCEecjcn17mgek+8t9N/Je/w/f33vDKOpF4u2Ieeida
        VMgfbcmy6+b980uRQ6x8R+aQJmp+PPr541OGT0OIFpV6NTydy50E27vdLHmyCLBJRpk511Uf8Ff2
        8MBhzYHZTScty51tjug7FxPzhL0wLKmxOLB9b2W273xWLkjf3tB4t3KWcpoPk9AyDwmfU0T3D1Vf
        ZGXXOIB3h4w4iRs33+m88iCLYcc8dTYCuXYe3d/58PJR3WXuPhIgcK2WZBXxl9esULyuV+eRBMfX
        2xxblZ/gbiQL23p3rVyC6dBtntKxJ3/91ORFzxMia28icfKKBpbdPIxucfX54+mYzQoNkZp/GuYk
        7tJ8HTlKIHzCltnWnZWfg6uoWuRMJtPv+aHkq+fFg4WvMhbovWNO9rSq/9Hb5qFW6K8f0yIztZkd
        pW38V6838hd7VLCbd/yLzwWMNkvIacJjMwnzIdyAqHPm5cNpWARR6tA9vuk/ngiHaXtfPqC97yKF
        Pz4M5N0FfvWdyruIo7/32nC4/hcAAP//pJvJtrKwtoUfiIaISBZNSkWKRMUCe4IVoCJFEpKnP4P9
        33Fbp3f6e7g1yVxrfnMltz8edGW4Kxwgy3AkmP/8rpew3ZvH0y1iE2+kfdRcangW1Yr++TfOqbQA
        DuMTn/1xFnULxDNAK+uA5xtj20lbG7aw3Hw/+PN9LSRbJa6FHmWq0WVyVCu+eVzCZbpgPXNjl0nx
        CUUN2ucQsyg7XCIpN4YCj7522YVT+seHLZzmuKWLVVPl4mEyHSncOTPrWVapSNfvLXIf4k6CxflZ
        CX4er0h++wNbF4dGDqnrXeG0h4qs+btHwvBQA8t7MDKvJkfJrQ1eob27z+k7HHkkyyi8IwP7Ku0+
        9lCNprVS4LLYPlmSOst8mPopQo/wTDwqN/LtCOsEEw+w0JnVaFS8SoAiiyOJhFVFcvW4l+jPP9mH
        +JXLue9O/Wu1ZtZT3SF+VrYaxDqZM+I0QTfagoTGc2hTilDupVx98hKmesIiRktX6DTawsTLbOLt
        6Xxs7vBYLTvix/Guk8/D7QmiP2u0L18I9cFA1L/+z/yaNUhu4llsPF/enkQnJ3NHZrvan/+b+oeX
        zht2e8J8XQ/EHtNjx9M4v0LoLjBZPz/nXDwulg7ucLsS10F9xDlFFgzbsJ3qqyt5SdAJHdTEI9N5
        j2h+yZ/IZ1+DEL4/5BK8YQXZ9qXjq5ns869dXwTqn+SAoZGvih/d4ICK8ZiQxG1UOe77gwN+wBE1
        N8df1+763R7l3TCy0NXqnB23rfLHpyxX97NcRsdFg+KZ5xHXzGNJTY9pqP3GC6x9sg1aXLbZCQ3p
        p2HJM7y5w7p5FWaVPBhmaHbK2efmHsxF8EnJ+rr8piKeKwr6DFilGu73kdxxEUIaH1/Tfto5yzq+
        gon3WGigMZULpGcg7/WW2Ic7k7LRszvKEfVok/RvxBfW72Ak3XvDcONXiCL0PRjZs4yY//40OV89
        Kg5TPfzzI9MN7uIJU970j/8H08IKSm7GH8/itC/U5T/eY952vkt5HI8aQMF/bHf83iSb+q+x9/Ij
        jcTC6SRbGBZ8yR3RWb/wU5Evt95fHsEiYSn5v/WChfulBvXtaN6B4H/6obqS3Dvev24ClnrmUDSd
        H5kYFweG165mIT+XEU+3MwtpQsfk77zzcxwINP0926wbrxoqHTLox9MLD3seIn68LAoQ85tBwsNl
        4TY0C/t/57l+dBLxwdcseKH9G89ujKQyN7ny5+9I6O/eaLzx1QeKqtmRpKdVJdAmu8Oa3T9UnOdM
        srWrcdgN9ZFhw/sgUZPWWbb6yWPu85CiRXm7AYJC/Ng6ifdoLFf9aZn9OkTc871Kv/sq3P/Tw+Zt
        96ksI+cO6ecj2Cq83tHoCOtgTn6NkXn+jab1U9GU1xG30Y/V5H8t4PY6xV+v2bnya3c1VP59SVuU
        zJA8zaMQlupsJA4OrGg0rSCESQ/Mmvh9DGYXAb/gkVEm9qtKOyrXADrPWGGU8oU7ULrwQPvxcNKz
        Hglfu12RdpELvMuX94rn2ws37qb84rH7vLv2voIYsJ0SFvOni0bcuA4Y2Fuzv/yth3Oiob/+sBH0
        KUcz4Y55f656qpmJmVPjTIJ/vy+2AzX/dSw04MqPXxJas33F4+uPQhz1nODW3+Wq/XMaWFbqgo43
        ZzednyOHjGQmcX6vec5/r98HTf6ZBf7MrdRddTpAPS4PJGZnLvnxMrsj18U3ugiMOp/46gD1vdyT
        2NodJLVQ1sJ82Avan7uL+/3jD0yVG8PFiv77PSB0I2L2+fiquHeqToZ/ui3ocuLjiTcx4lS8cJmt
        q/znapUCG4crzEv7KpLRcdYs4a0PLJnXKWL36LYCI5cuNddG4FJmbzwwFDdkDtlRV/jaMfvjxb/8
        AfUn5dyC5aQvYqcuzv/yKPirT76T0FSk810PxrLYMwyntRwfKx6i3ikzrETz0OW76n6ArqKEWd+V
        6ETRNRguRn9np5vauEOfViE8z4DZZnhjV+acGGjks545j1JE//Sq80dFEn045OJx659oy8Alt09h
        Str7egmCLx3mLPAGLWGTxoD31wKLRynctm/Pzz89Mhe7t7RPxqsDR94XJMDzVA4WSjO0Uxj5f//3
        BZgfAobVXi4qMYSHEM6F+8NC+At3KJZXFXLPEFg7blep8GtbNx8oX1I1CuycGb+d95dfYIGvuJrv
        46wF9MuP1Hi9jE7slVrAYtefmc2Lk/vPD9EXNuhypj26vloxD93D64dFnqFWw/4aPGHzdn3i3VU1
        HY39ZwvUrTpqVjpN/+VnE9/hAWbriq+Dbwt/+fK8iL7Rv/p2U/sXS962nWqroA3gHBpsyvPPKQ+G
        tQaa9VMJORxwJG+r8Q6fUBmIny9lR/l5zIy9TO54PH5v6POXJ//t1x8fiCY7tai7fiIWaM+XK9HT
        U5EczT1Nq9shGqNe3M3w4x+nfvpx//0/5zEPsH7ptIob1Fag3szWWF/8mDuEJycwcVWdqBnzrOOw
        cDLg8LhRPvEDP647BQ7HDGG0ib9ofEY5/5ePrYxfIqU4typMvIVnhMeRCHZtDf3Z3zKvMr/RWHSl
        AuSOnvg5zRekO841hMbsMeUVCPUPlQaoC786S/JPHtGia2IUku2R/PntoSa9MLyX+SN4dW3Q6Mz0
        GP782spMbqmqizGDSt05ZDP5xVHRpAoieVrspszmkfqxdQ2+67tPDYaZKy3viFHFFx4eD3eG+qNr
        HcyRm/3E04o7SrnZg6K7CUuGxdjJ1t4qqEhm+j9eaPO15UCiDgnzWLvJ+bq2atP+GsCIWq8rmlzP
        MVKO44rhSY/itrUKiFGzYpeN8a74/hpt//wb7VK+iFhwioqlh/x+yg920egPmQH5rlCpSHbPrk+3
        MwcVPE6pYgXBxPNNCX5nO8Sezscopvt+2N4RZqv0lw//8ryl0Ig/t2LJaeZQ6JrdmvnEVbr+UV5b
        eJ4VTGJIVq4qirSHiW+Zs6vIlBd99zDqypxMvB/xvzy0A23Poial1Z9fgvBV3qj5tl/p+JeHTP0Q
        L6Auc1GZxy2whUn+8kAkkibYQqh4d7byZk4+Jm6rQWNVMQuepJVTPmTB+1GX7Pi8zTvB3789fOnO
        w4vys6mkNVs+pxe2wFxsvCr5YScVFeM5wWyax/WnpWqZ461uibedbnxPPAyTP8LK1UT50KSmQAYY
        W2yquY/k3XyHwNyHTekze3Va588OoH+PD7y/lXUnrk6FwV5aG3Yfn/4fr1xNm+k+O6m/vJP74zX7
        8x9YJDurGyOjPMHvE3zZPz6+fAtqXLL7GeuQ7KJPPL3QXC2eVxL82j6SgWZZoFvlk7jlYeWKpfjo
        YNd3hXmeZlUabz0DJj/EAo6fKWtfxQlaT+G4ZK9vJcPxcUWiP2rMHvRV1b9uVWz+5Udun/5S+W4R
        hscv8Nlmpj0qsYsLCk/vZRLnst2lvP0kGLTLuJj6UePKa/TtIXv9fELMWSOF6b0cYHQeMT931Gis
        Izs0vWzxJpM+3b9+guZx9KZaUnmuerroLXy0g46n+VYu7P3GgrmWaVj85Vn3ra+gqd5M86sGCWGZ
        exQWs9001TlG7G//UU4vZPKzqfiyPYfXxbmTSV8pa/THHk37STaRIaP34KM9ct4vTFsyn7uy4BsP
        fu70Qk3SJGpbEn2gDtSErN2HEvHz/bCH7PmMWFiRZVcZv4sH2eDFeCDfMO2rMrBg1SoZmea7rsBx
        UyL0uxyJFWhRx01EHSQdhxC8TNapWF3NFtY+OTHL/J2rekzzrdFvsgNb9f4F9R9bV+Hu5DeStIXT
        qT9petCbRjnNV71u2Iw/A2wRGWTiKylfukmNHRYxwRc1yWX7XgBq+QGR5Pd23X/9dtIDS8SmRtRF
        ngaTH8XqJmARf3X5ajnVf1xaedf1ZiIEhEbzJOe/efCqJhk8jP2MjrzQoh4fjT2YCqwS4ytRStP1
        sDUWp5RgfXF+duPuq1/Rn192vdPQ0RNv92hxDI6sqCWgcbsLJj8zurRj1HHvZeTHcHH4ntjvgydV
        JN41vPugJrEqRDo+lmsHkpuesEtToJSj534FIlwzyi9r0i269zJE9ryOmLt5PPNRERlGi3Kxw6JS
        3/noIlKjZHeI/3g4Heew6WGTGhFLpv0bbbEO//VjXqqPVF6/QYumeRkjHRV596eH/+FGgfbfbxS0
        wWnLVgVxkSzXlxPKZLZhFsRjWv/YrQDTFgXDoazS0aM7HUXYmGH+s/K8OmS73qQQDCzsZwc04Gqx
        R4/yIAgOpZsu8vYC8H2KmqxmT5SLkz4LDfdiZcS/4HUlSGtxWCiix01zFWiM3sseqUdRs/Wc36rR
        tTEGbY464iblkMtn2GMYbXmms/5TdoIfPwpkynBgCU83aDTuGxWC99Vi632/S/kKLzL4ZdaFrMxz
        jUY3He/m7eTZWP6svho2P+8D1tGOWKQ+bDkef40FF+O0Ju4n8yNx2cYCBv5COL2/txXL42+DfCd5
        EedjzhFT94GK7ni2p6NrPyP+zS8CaZbBSeS8Gsm8WYbhUNgFVV+fXnb5mVKUHF4/3D5gzDunCRuI
        zkWIf9j2Or4M7oCOXfkm/unzdJmTlDEMB0PHxs55Ih5usYpkFt/ZLb/tUNP1Tm3ur+mGhGWto/bi
        JxT583RDSP9xusVtUwiYPg+rj5vhimQNIVp+nJLg7Jh3NNjMauRdToSsPD9ItXWrcvCUc8is6OKn
        7S/aG/DhxcDiMprnn3DVU6ickWPDM1133p6hgcPV25A1DXnHw+DSwjCeLgS/xIgGZZOH4MQ7iwo1
        sSR9fxUOPDN85lsZQwKT5wmwYyS0Wd40dzgu7QwC0RKG26qTf+sLi3zwmB89vkjKsGjhivGNzlw9
        S1sD32MorjdM9edXyVuEXgbkij2QWHO/nXh5ux60+bJjEYxRNMJ5WBm9nzMS7hwLjXO/1gB78yc1
        d4dZyjDP90ZDNmdmi99dynumhCAuCwMvP62KxrkxUONXPhfMPQbXfAjqdgtok9ks6WcrV2xp5YGN
        J3+GPsSle59T8BbMJeFoGnlXeusC/JV+JOf+iSU7ZBeKmOV6zBlWTUWHuDwY7ybbkJ1CoRPXsw5w
        aXKPbYzjrGuCU1XDmPZXspnXdqcm9aaE8XSP2I2nGznOlIMFl5vxIQGMF/kSy/sekk/RkxUaHLQY
        QGugSbCHtXLRuf01KgCC3lmTDZ61kUC81GZYqQhbl/4eSSuHAAXL/YmsrNp0+fB+q6DdAwVryjHM
        hTbXpxsJC8Ls1/oj+as57MF5pUCry7dzRVUd7nCsjTttIiVBRf2rKChLazfpL+5Eerx6KCi0OYmr
        U5nKYN7UkD+aJdk8vC9ierlsUXnIAHcnnUmhZb4G7v66I25Qr6UQV2sP0kwu5HRbvrtun/cf5G4W
        K5Lg/izFla2fMNPqM7s3yzaif9+nnFcvtmnhHvWHQFkh1TYwWRWkQuze/TKYlb1NImNTVbJtDAUq
        o4zxHMuuGueCl+j4WYzEahdeNd812w+Ia5PRbrb+ubIa89BYJ8eegs14x2Nb1cFw7i7ZXK4rl4fm
        tQS8DQv6ZoSn0sfLFhRf+ZH1cteg3u32e+Ct0xJvLUhKg4PSovlqlZN1jd9d79+CAzrW+p140Uq6
        o5bsHNRdRE+lv60j2lq5Cuy1+VHjsZ1HgjzsHozd701iRX1VDV2LEobxcCEePX/QMMugNIbh7tDZ
        8RpXXEpXgFO7A/GHN63GR+v9Wy88s913NbaxWRuD0e8IWYZHV76DRiBV12IWB1qAWmP1ssz3u81Y
        sDMuURv2HoY+1g4s3pTviPu1WSJeXStmd+4oR2um9KjV2zU21XcajdP3Qe7uK3EZWTaSp/52hbjc
        P/Bc7T+SXkrdgcG2yr/+lItlfTgB2ylr4uC1Esm442B+ulGn4/5qV+MtsilYdjAn28NPTQcw4xqs
        D/xfvRDjLQ//9p/OTqsGUZMMjWHsujezkhIihkMkQATDkWB/86o4we40wbK22KugRfRP7+7aP1Kt
        qr65VAa/R8N+syYBrd4pS56jAcHMuJHoi6QrNWtwQCVBwTY59yJx/oQGyOtmxGNvLyqRLhg1woFf
        mXO9VPkgbacEGSqEzh8aRSJdfCmUACsWvFKjo3ZY1kbfPM54Zv7eiBq7xoM3s7bEunwvSBxmqQ5I
        pCmeO87Y0eXltoWbWszJRVG3qQzMm1jCkuzocoW3EXusbMN8M2dLkt3rIxvr4XK0Dt8Io9uscblF
        ygzCsRnJyl2XlUSdsjf2RHQkvCqdHOdZ5gGxipQV4TOshFJmBnwLIyGTP5D8x44FMIaPzHPTezeW
        W1RANYYHsjarvSvLnqtwOZSUfqzajNj3W5UQDOaVAr+85dhpsyviu8eT+W9hRKIj8xg25r0inju7
        SrE2Gweaa5GysB66TpxHG4wqPxjEHmOvGk/pS/+rz/Sjxwspy17XkJLGOimi6Q3MzQwVCD/HOUaM
        fqvRXWYKTOszEeDF7cPtSoW93plUi7UyZ98k8uA811yG9X3U9RudY/NekBdLenHvut053APvZibV
        nde5Gi5GpqKNLhlx6xeS4m20zr/zGYBvVo2xjQJYF6VCTXaso2HdPwqkhL+BEcqWUXtylT2UN6HS
        Gbnb6ahQ0cJ8/lWJt19+O1qZoIP+0o5s83tUkpUEP5F2fi6otg0/kXg/NzV46zwmzmvG88E30XZZ
        v4qIbbXtx5V02QlY5V5J/MtQpKOI7XqJ5q6Hl+ddmsrtT3uiih814ixb5AoFxgNq6OHHNvs0kdIx
        FF3/xcMNy5k9z/stzxxkD0ZM8EJeu0+z4h89ucQ35khK0GgW5GrMujTHbTlaOcXloUYOOzR0WR80
        NAyXeIWMdbRm4eQ32vx7PYBxWYV0SW+/lCe1XUJ/gyXD/sbuhnMWx2a93y+JBfrQdcrgUyjjlpAo
        uB0itg4KA9poZbOzgdpOvqm1Nx12aqim6odI6mejRhseH1l4bht3fOVGCVmrKcyylE0lTq/nB9bz
        1YY5y+iTytc7btBcP77Z5nL9uPIgRIDwPDqzYL9+VswfyR49j9crNv3iF/GvNZ7A1q8tCWXwzYdT
        UKqwxVbGTuFAquF+7Ty4JpcZCdLRSef7N+4N+7z1SdTy0h1v64UKW2J2LNjhQnI/vK1QR7aY3cX8
        6MreCj5wgpnNPIOYLt+9twooeiKZPcZ1x7e3nsPt/ssJ5o9FxIuyfKL7h81Y+NgeI96f4gKdL1nJ
        DuTtyvH7y+6AUuNBda9tc85AXmE6T1ib1zznuzVtEbkCJ367a2Wz0XUMO9qusHK/Y1emVcbR0Wcx
        5iHO8nEkxR2m9yDYMKsqpV0QOHAYVY345f2UC2+8lNDQ048eTN6kYzxPPZjPRMisn5WnginZAfR5
        32HF37w6CThUwNuhliRHyaN+u3/3yD7vfUZeyiMaE08tgay9K8EBXCNh4BOGh64smWegZSqv5Zv/
        6Yusbku/0prXxYH0PCfU1MhBUmdWFfDy6Q7r+7XVLZT3toT+U3rEuyvvlMW77Ant+SWI68Mz5wkL
        amimS8mX5NikfJmHMVhhOTBbaKtcDqC1ECLnx6zdkXfizx8eUEyJ97vYqRTHlCLTvNyZo50W+fic
        XmLfaVizTaAtKjFPqxLF7jphazWt8jHUBzAeXd+yyQ8hrZsXFJSOOyx/v4/RuMRNgYxFoRDXZ7rk
        D43GSNqf8z890zu/Axof9hur+mrVqd+MGOgkvxs82lrq9ttQf4Iovh3ZPJ2kEsP0RuGWPDXixbtn
        yq3W0eBjUkSL+bnLhbqMHNgVzCVxotJU1NsmRv7tWZAdvD8RR4fhjhY588j6qhhVGzWTHqb9Wmfz
        OqKbolShq9OQGtE7zOVv9TnA1zu71Lz7y7Qv5icOhyfd/ePDAduvFu37OCaO/ggj6e29558+qfmA
        sqpKj9zB/FUBi+btXo5oqGL4/AcAAP//TJ1bD7LKkobv16/YWbdmRUSgm7njJKIgjaKIyc4OIHJQ
        5Njd0Mn89wn4zWRujSKBrqr3fapoos5HRngISpbdOg9eovOBKHmE4/GbniM4cvwa6bE8T5AUWQqv
        fqphrnmo8ZCitwKEXN0SswzWYLQepStb6F2h43hO9ekl2Eeo1ThHu29TxsN0V1o5DnyV2A9VK/v7
        zXkvesLl9hPxx4fk8aJQjjXezvqOhtuzA61scJDpy2lMNLLm4JitGhdafM3IunBrsC8PJtlxSltO
        UDEuIPnQI7kdNpXOEhFcobQ/7Ik+jlVHql0qgWprcMTX4o1Oi1ut/fKXreUWmDD/tqTccwmmfueW
        jKqhBoL9ylzyZ8m45h4CYzvoRDm6oT/oqulI9+0YuNTvcEfBq8/gRlYeZM+4iz+dw/dKgqfKdYtI
        EGwmWA9HjLWwI9a+f5cjjeICchU4EHNHWpsYa8+BpK5cpO8rzWbjTrqK9FU4rsRNTUwFP9DgCl1z
        pDXTG0zftXGVlvq7qs5FN/aHFsOiU3VyMF066wHZBbx89chFtM2YUT6UIM9syRVmf/nTs7O+JuZB
        H9i4+NfFr0zNR/bHud7AqmOCK+l+blPBTxWIrtcGr0ONsxl8HJWl/hKnhSSmekgUUEepjxQeFj7r
        P5khzesZs/RDS6axQw+z6xe6RUjybjyf6FE2XN1HhskdAIOuBmHHuyf36hghoLfu2EOQWxi5XwwZ
        8bvdSlr05wlEORg3oWcA505VlNyNp92b22yS53yDZdHQWV9s5VoCvvDC2/ae6HSrczW081WNC5dF
        PkvP1grid6iSvfDpuwK1ygQfn8YnKs2seDgGXiCvrD4ij13BwKKvxV6KInfQp72Oz2WvwR1uVGQY
        qQ22lvykYNY7eO2fxZ/egFPy6ZCen4R5w46NImtvdXCh/rj4E0MH95ffTpr1iYckUCiQw7D86fnh
        ZbxX4HbWLGLHd6Xko+kRwsjgPi4IHFbS425PgUiiCMsgUsG4J80VhE5yJMhL9jqtqpADdg5ropn5
        aLPzXfPAzBOwcJYeOjH6N4RzvUc7l9klfXXfI0C1uybqrL/J7N+gE6znp5U5vaT6bpqg7XE6ic5a
        xujpnHoSrr07HoO+BSOw7H7x91gcxsEeOnV+RujtH2e+gUD/4isXnIF0W47XbS+qYUkQY+ZOc3xM
        de+Zcr5dx242r5/xZijF4teW/NWNLl5dweyXkUWQ2lGzbzCwH48n2eHyatPN8RHCx3mS8XtqPHvy
        xMKCo1Fa6CDyRzaQAVF4bc4d6hpTiTdygkKQ+vXeFRN8YOOE7y6k5lpzxXHngXF7ZgF0ArnEYxj0
        rF8fNzycr+ecj1ufjN2Zg8Umz8nJKfN46oo6BZn0uBEjqffxduuHFzDrxbkCIHu0P2MPvuk2Q9Zl
        r5Sj0ybaz38u8TJVpIVA29UicYA62DSiXALzrRwTdb/edeTjPeGPJ5qk/uhDGs18pRx4tPhHKozK
        VQaqnLiFe/10Y7QCRzj7IXQMXsAms76HafOkxPxuaEmoJ0Zwmh67hY+VnN5FHvwET5Oolyjv2khy
        q82sd+Y9thywIfTcwt3VehPFlK4l7czOlLRdKyJrt4njSTEtD4qXo0MclXgd5dfRBWRSfJvjD9rD
        vdQvcOS4NXEDIbffKh6OsH40mz/1bmO9k4V3IdfynqyfVkceHr+Wj/n0k7Np+5o0mPrtHuk8cWw+
        TnwPinFm/Pl9ZykKVPgDRYdxR8F4eT4KsDa9jGhP9cg2D8njoKicDmhXfxt90ptPsPAb4n4+ZjxK
        /pHC5rHukXlUmT++XrtQ6vbbBouC8ImZ16wy6QMvL7fdUBfQhym1cPNYjRi+yhObLqdBkBa9LmTc
        hxHhPr2lBEGKheeaB8RLtyk8A+FGEF8M3ez/MymXiIOzYH2JqWBnvAySp0iUb5mB/jnZAhTNrUf0
        uV5NayeiEAe3649XjoYlRUDqYYYC637u2hqICbB3+R6H0mHyJ0GKksXPuVOif+IeHqpoyX/utunW
        jNCYJnK5T98/njnyp4cGdVK/SJp9Mzac67CCq+y5J9rHv+rYyOkRdkOnkcUvjdrdCOBT5gekCuYt
        puH28cd/Lnrmlx9vj2+B+Xt66AA41DVc6wVxeV9exe3DMyg8xSuXnIp3q1esaVpobgsdubN+p+Tu
        S+Kcv8ni58bnp7V+vONwHDLGrpkpQTmzPUyD9eSPn8tRgKVrdu7w8kyf4VYL5bL+HGaeX7IP/xUT
        eC7vNjoegFVud9ANJOc+qRjM9Z+b/Rlcd+eY2G5VdZ8E1B7EKynF1Y4c7clREAShdubILiw6n2Gx
        pLCVvhHaffyPPzXBeSXiTVYRy99V+jTfj4U3YEEJcz0Dr3cBTbpP8UslOZhu7iaAj6dQEX3m78w+
        9Fe4mqKjO/VR7+OKFCsIDTdA+/2UdeM9dFz4+dQh2u2Vu47n85Hi4KwSbX86xYyvnAxqqaOTVLjY
        80RwLkDZtq7EuNseG3FGLzCveB7LcAvjTvz6K5kv1HnCXhl1JrQVv/A+Msc744zb9QiLvLHRLniE
        JS1umSIn1KuRgz1mj/7eDyHAIcT0WyqMH9TuAgFobFzNepB46ToBXjjvLDTzkh6qowPXfHV3F/45
        1zcIpSB44NXMx/sy3xZwOf6J+g2jySadgGwfr8gp7FtMQrcw4LuMU7Lky/a8MhKQX1aZC4aw6bLx
        elB+vOlYkg/41YPjEU+YlUbub3Yy80CzHne4W8U9o4XGUaizgl/0Y8dZlbMCMFLXRLNffMnmfg2I
        wRkiK+18G99c+Qqj3DOJLVwif6IncYJsvT7O/Optj2KjCHCDEh+dmq6IyciQJt5HG2GeVkcwTbmc
        wH5abwh6nlR95h0KlF74TIz79qRP8xydtPjf6+LH5Gd/hbmVaLNeNMqhU/kCzDwBLflqks6ZKYON
        aiCzLPcxfg2OCeLaMZATfayYBdtrCoc4W7sAXQowjg2UIFeJB7JcnzHd2AW0q6ZH1i6oymapd3yh
        37A482C2jh4pfMTHDdJXhVJu31VigDm+53rZMHapuvZ3v9zR9mMmTrEGZl5GHNPN/XFwdwpMSu3h
        rpvRLwfYele4qxUJ2Q55xp1LYw9cufcXuZcHjUdg6T38Xa9MS2K2LtwWPgNTJe52v/InesMQVP07
        INepoTaLimGCnMReWCK3CfSzHpLSaliTo/l9MwZZm4BvIpzc6XWv2cLrZKUWc3So2iugC1920tAi
        NrcKyiZaMQvOfgYZ/fCxxzTqTFjo3h3zYCjAZoSZJe9P994Vb9+xY/3w9CSFxWuy+OlxT/JAPvD6
        itjSQe8mJav7Jd5dPPf/BlFvInjg+WS+PqrPwFs1gLePzvgtJUaJa5O+Zf90HZE6NSvQPM7fZFm/
        6PQtUDet7g8OyiC1ycxLfBYjsYC0n2L3Puvb8XlZSdC2LoJboNXe//UDXzvxjDnHCNmQqxdDvu8y
        B+kZLv1xJ4ML3Di4wFlpUH1U9+0K1tbsgO60/fFXqIxpjydpY+nT3F8ClUlltK/eZTl17a2FmgYs
        zJj0XPQNlsWL5aBnxfv++LWrI8R56+F25lU8l7YV/LbHxJXCegDDRvr08FqV0sx7791IBJeT4k3q
        z/xlY1NRaSYIXqjFFeysctKRI8A37QbkpinWRxa3K/Fe1eNcLzZ6oV7uE5h5N9oHykb/9V+j8vTA
        vNdIjGGjFSBcb0JXmOOJtpoywdHHEbLOsRFv5u9Lw5BoaM8nDzb6+ziERm5Aomh155O5vwvHp3mZ
        97SuSzZJzIUHM/sgawjDeMrgJ136E7Pf8copms6RPK07nxwis/DZ7QsM4G2xhbmpoXqrI0OAfvoK
        EJK4AFAjix144IwOGXpm6mTcScHCW37nwzguSKS5/qG7cd50Q7HjItBr3QrTi9oDMvNnOOzbxhW3
        ru5P8l5IxAuiHTnNvG0U8qSX7rvCQcqBlF17XfsSuAqJjJ6+XXdYkC6JzByxcFcWlOz2uo6lxb9g
        Cly7XOJHJDB5z/U96lrrpCZgzl9ILZ8GwO9J5sQcGQeSKq0HOO65ayHSHtXCe/yZnyUwSKsT0h1+
        1Of1CSHWkhVSkzrQ6aCHf/zQkh83j+sYQIoHjPnKxmCOFxMg6agR65sM9nI8aRdNHUL5q41HrO/g
        r59w/OqHkrZJ40D9Ep6JmjPdHl/30IUOiw23+3w2+nQ4dz+eT/QEXUq8bUXzfycK/vrXv/69vAWh
        qp/pZx4MGNJx+Of/RgX+iZ7RPxzH/16VgPsoS//+rz8TCH83XV01w3+G+p1++3nzAvE3a/D3UA/R
        5/9//tf8V//91/8AAAD//wMA6ih7BIRhAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e214ef804691c-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:14:31 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - heartex
      openai-processing-ms:
      - '27'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999989'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_d3d91de2dc2bb2901bcad81b878e7b57
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text.
      Output the emotion as a single word (e.g., \"happy\", \"angry\", \"sad\")."},
      {"role": "user", "content": "Examples:\n\nText: I am happy\nEmotions: happy\n\nText:
      I am sad\nEmotions: sad\n\nNow recognize:\n\nText: I am happy"}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "temperature": 0.0, "tool_choice": {"type": "function",
      "function": {"name": "Output"}}, "tools": [{"type": "function", "function":
      {"name": "Output", "description": "Correctly extracted `Output` with all the
      required parameters with correct types", "parameters": {"$defs": {"Labels":
      {"enum": ["happy", "sad", "angry", "neutral"], "title": "Labels", "type": "string"}},
      "properties": {"prediction": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["prediction"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '884'
      content-type:
      - application/json
      cookie:
      - __cf_bm=hiR8gaz16Ht0jAYxRynZILSrAhS8fEptru2rCtlIeBc-1721931260-1.0.1.1-P.uGeiWXb8I5GU6v2gUE13wSWMYLCEc6tsuIiZLJalY.8XNe2zN54S.HpNIq2tK8Rp21QI5ehjph7WgmjO54cA;
        _cfuvid=UJt4BSPi4SQ.kl267vx8ZRE36qhsO_3u2QXG3h4WCEw-1721931260493-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFLfS8MwEH7vXxHueRO7Wcf6Jg6mvoiKgjgpWZZ1mUkuJFfYHPvfJe1s
        6zAP4bgv3w/uckgYA7WCnIHYcBLG6eEUd/O9ubt98G+lG98+7oTc3o9n2cPMPN/AIDJwuZWCflkX
        Ao3TkhTaBhZecpJRNZ2M0uk4HU1GNWBwJXWklY6G44tsSJVf4vAyHWUn5gaVkAFy9pEwxtihvmNG
        u5I7yNnl4LdjZAi8lJC3jxgDjzp2gIegAnFLMOhAgZakjbFtpXUPIERdCK51Z9ycQ6/uBsW1LvT1
        F81f5hN8ffm+z8KT372+Xz999/0a6b2rA60rK9oB9fC2n5+ZMQaWm5r7WJGrzpUZA+7LykhLMTUc
        FuC8XKlabQH5Ajbcuf0CjvCHd0z+qz9P1bEdr8bSeVyGs2nBWlkVNoWXPNSpIRC6xiLKfdZrrP5s
        BpxH46gg/JI2CqZXV40edD+nQ7MTRkhc90nT5BQQwj6QNMVa2VJ651W71OSY/AAAAP//AwB2hz2K
        0wIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e2151c827338d-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:14:32 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '157'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998946'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_3b4416de264643c4cce0f8cb64e797ec
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text.
      Output the emotion as a single word (e.g., \"happy\", \"angry\", \"sad\")."},
      {"role": "user", "content": "Examples:\n\nText: I am angry\nEmotions: angry\n\nText:
      I am sad\nEmotions: sad\n\nNow recognize:\n\nText: I am angry"}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "temperature": 0.0, "tool_choice": {"type": "function",
      "function": {"name": "Output"}}, "tools": [{"type": "function", "function":
      {"name": "Output", "description": "Correctly extracted `Output` with all the
      required parameters with correct types", "parameters": {"$defs": {"Labels":
      {"enum": ["happy", "sad", "angry", "neutral"], "title": "Labels", "type": "string"}},
      "properties": {"prediction": {"allOf": [{"$ref": "#/$defs/Labels"}], "description":
      "The classification label"}}, "required": ["prediction"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '884'
      content-type:
      - application/json
      cookie:
      - __cf_bm=hiR8gaz16Ht0jAYxRynZILSrAhS8fEptru2rCtlIeBc-1721931260-1.0.1.1-P.uGeiWXb8I5GU6v2gUE13wSWMYLCEc6tsuIiZLJalY.8XNe2zN54S.HpNIq2tK8Rp21QI5ehjph7WgmjO54cA;
        _cfuvid=UJt4BSPi4SQ.kl267vx8ZRE36qhsO_3u2QXG3h4WCEw-1721931260493-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFJta9swEP7uXyHuc1Jip2mov22UZXRsY3SllKYYRbk4SvVW6bzFhPz3
        Iju13VB9EMc9el640yFhDOQacgZiy0lop8bXdr+obxbuISz07v/d/O4++zfNXr3//vXvI4wiw652
        KOiddSGsdgpJWtPCwiMnjKrpPEuvp2k2zxpA2zWqSCsdjacXszFVfmXHkzSbnZhbKwUGyNlTwhhj
        h+aOGc0a95Czyei9ozEEXiLk3SPGwFsVO8BDkIG4IRj1oLCG0MTYplJqAJC1qhBcqd64PYdB3Q+K
        K1Xcqi/17sf8Vd67Pz+vSH77hfsHhenAr5WuXRNoUxnRDWiAd/38zIwxMFw33N8VuYrOmIwB92Wl
        0VBMDYclOI9r2agtIV8CN6Wvl3CED7xj8ln9fKqO3XiVLZ23q3A2LdhII8O28MhDkxoCWddaRLnn
        Zo3Vh82A81Y7Ksi+oImC6eVlqwf9z+nRqxNGlrgakGaT5BQQQh0IdbGRpkTvvOyWmhyTNwAAAP//
        AwDXZNVG0wIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e2154edb7338d-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:14:32 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '184'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998945'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_325e127db22a3658e681f1ee9377f52b
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text.
      Output the emotion as a single word (e.g., \"happy\", \"angry\", \"sad\")."},
      {"role": "user", "content": "Examples:\n\nText: I am sad\nEmotions: sad\n\nText:
      I am angry\nEmotions: angry\n\nNow recognize:\n\nText: I am sad"}], "model":
      "gpt-3.5-turbo", "max_tokens": 1000, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["happy", "sad", "angry", "neutral"], "title": "Labels",
      "type": "string"}}, "properties": {"prediction": {"allOf": [{"$ref": "#/$defs/Labels"}],
      "description": "The classification label"}}, "required": ["prediction"], "type":
      "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '882'
      content-type:
      - application/json
      cookie:
      - __cf_bm=hiR8gaz16Ht0jAYxRynZILSrAhS8fEptru2rCtlIeBc-1721931260-1.0.1.1-P.uGeiWXb8I5GU6v2gUE13wSWMYLCEc6tsuIiZLJalY.8XNe2zN54S.HpNIq2tK8Rp21QI5ehjph7WgmjO54cA;
        _cfuvid=UJt4BSPi4SQ.kl267vx8ZRE36qhsO_3u2QXG3h4WCEw-1721931260493-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSS4/aMBC+51dYc4YVgUWU3FsOfbCqitQHq8g4Q3DX8XjtSbUp4r9XTtgki+qD
        NZrP30MzPidCgC4gE6BOklXlzHRNL5u/4cPy45OfPT9vOX3Ad263w58/vukVTCKDDr9R8SvrTlHl
        DLIm28HKo2SMqulqnq4X6Xy1aIGKCjSRVjqeLu6WU679gaazdL68Mk+kFQbIxK9ECCHO7R0z2gJf
        IBOzyWunwhBkiZD1j4QATyZ2QIagA0vLMBlARZbRxti2NmYEMJHJlTRmMO7OeVQPg5LG5KbZ2c3B
        7uSfrw9N+PLeft6G5vvm08ivk25cG+hYW9UPaIT3/ezGTAiwsmq525pdzTdMIUD6sq7QckwN5z04
        j4Vu1faQ7SHIYg8XeMO6JP+rH6/VpR+uodJ5OoSbWcFRWx1OuUcZ2swQmFxnEeUe2yXWb/YCzlPl
        OGd6QhsF0/v7Tg+GfzOgyyvGxNKMSevkGhBCExir/Khtid553a80uST/AAAA//8DABtqDc/RAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e21580b79338d-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:14:33 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '154'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49998946'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_493e24e42199cc9ad6b144262fcd5f06
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Text: I am happy", "Text: I am angry", "Text: I am sad"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '133'
      content-type:
      - application/json
      cookie:
      - __cf_bm=f.iNTERrw.WZBisihovsnl_nkHvsg9XMeck2CWMxOvI-1721931262-1.0.1.1-OZqRIUcTAmzMhv02P3RGrNAJBr4gVhCkyN__qJbpkd3pekJnmUuCLUYVh3_b5zrp7.c3HGInZZRuJjpgE8KK_A;
        _cfuvid=7hHPxI3BZmgBscgvKHNNoctOCpWh3PKPe8ilzPs3.8Y-1721931262562-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        //vn/5r/1P/61/8GAAD//wMA6ih7BIRhAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e215b2c1c691c-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:14:33 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - heartex
      openai-processing-ms:
      - '25'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999989'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_31fa4b44ffe14ce57fbc8aabe9c3b6d8
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nExamples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\nEmotions: {prediction}\n```\n\nHere:\n- \"Examples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\" is input template,\n- \"{prompt}\" is the LLM
      prompt,\n- \"Emotions: {prediction}\" is the output template.\n\nModel can produce
      erroneous output if a prompt is not well defined. In our collaboration, we\u2019ll
      work together to refine a prompt. The process consists of two main steps:\n\n##
      Step 1\nI will provide you with the current prompt along with prediction examples.
      Each example contains the input text, the final prediction produced by the model,
      and the user feedback. User feedback indicates whether the model prediction
      is correct or not. Your task is to analyze the examples and user feedback, determining
      whether the existing instruction is describing the task reflected by these examples
      precisely, and suggests changes to the prompt to address the incorrect predictions.\n\n##
      Step 2\nNext, you will carefully review your reasoning in step 1, integrate
      the insights to refine the prompt, and provide me with the new prompt that improves
      the model\u2019s performance."}, {"role": "assistant", "content": "Sure, I\u2019d
      be happy to help you with this prompt engineering problem. Please provide me
      with the current prompt and the examples with user feedback."}, {"role": "user",
      "content": "\n## Current prompt\nRecognize emotions from text. Output the emotion
      as a single word (e.g., \"happy\", \"angry\", \"sad\").\n\n## Examples\n###
      Example #0\n\nExamples:\n\nText: I am happy\nEmotions: happy\n\nText: I am sad\nEmotions:
      sad\n\nNow recognize:\n\nText: I am happy\n\nEmotions: Labels.happy\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"happy\"\n\n\n### Example
      #1\n\nExamples:\n\nText: I am angry\nEmotions: angry\n\nText: I am sad\nEmotions:
      sad\n\nNow recognize:\n\nText: I am angry\n\nEmotions: Labels.angry\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"angry\"\n\n\n### Example
      #2\n\nExamples:\n\nText: I am sad\nEmotions: sad\n\nText: I am angry\nEmotions:
      angry\n\nNow recognize:\n\nText: I am sad\n\nEmotions: Labels.sad\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"sad\"\n\n\n\nSummarize your analysis
      about incorrect predictions and suggest changes to the prompt."}], "model":
      "gpt-4o", "max_tokens": 1000, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2832'
      content-type:
      - application/json
      cookie:
      - __cf_bm=hiR8gaz16Ht0jAYxRynZILSrAhS8fEptru2rCtlIeBc-1721931260-1.0.1.1-P.uGeiWXb8I5GU6v2gUE13wSWMYLCEc6tsuIiZLJalY.8XNe2zN54S.HpNIq2tK8Rp21QI5ehjph7WgmjO54cA;
        _cfuvid=UJt4BSPi4SQ.kl267vx8ZRE36qhsO_3u2QXG3h4WCEw-1721931260493-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6xVwW7jNhC9+ysGzKFtYBu2k8Ab39LURQIUTZDNArutioQmRxI3EimQo8RukH8v
        RpRkOS0WaNGLIZMz8+Y9PnJeRwDCaLECoXJJqqyKybnbXs2e1Uxdni2e1l9uPnz+WF3c3s6u7j59
        +k2MOcNtvqKiLmuqXFkVSMbZuK08SkKuOl8u5ucn88XytNkoncaC07KKJqduspgtTiezs8n8pE3M
        nVEYxAp+HwEAvDa/3KLVuBUrmI27lRJDkBmKVR8EILwreEXIEEwgaUmM95vKWULbdH10dAQXVha7
        YAK4FK6tct6jIrj1qI1iKiGxib3PEVTtPVqCyruyIjA2kK8VBaAcoWEE5MCjcpk1fyJg6Zp8SL0r
        gXBLIK0GV1NVU5PURoAMICEYmxUIL87rKVy5F3xGPx7UNoGRda2MzdoiAYxtIlLnS0mQiF/kBosw
        bQsnoukSpWZyX+twCBuh7nMTQJugPFbSqh0Yq42ShExM0qCD0mQ5wQahNMFYQl95JO6GQzo5uLDz
        EWcr2Q9N389Go56ylKz5zSagf5aNPKvEzqdwfPxz5HAdQo3Hxyu4HzKXVYVWM1bPMREs93s+jSSG
        GLM/wGliF4xw6SzbASNJWLftdWB/a7dTtz1w6RFaexS7VnJCPYZNPVDpu9CdsHYYwDqCUpLKgVjn
        mNXr8LHOMgyEGi5zaTOWPFK6bSA5rNHmspDepDu4iZWjVNz3uqxyGdht/Vm16CF3daH5tA6sBS+G
        clezFXesUWq22At0h8amzitsog4EWttQ+wFKL5YqUPpiBxpLxxaQhG1AhYqZtf28Y36HzyagHhB9
        fHxM7N03bs+0o/+tqwPf4zSbjiERuayqXSL4U9rMt59B6kT8MIWfXHM0xqqi1nigBttXam24viwi
        NDfYybFqHgTc0gquQZYQgey6bXjVLRwEMe4gpPl7EBB7HIS0C4n91b3sX5UB+KuxVU1vw5zXvevf
        WkWj3OttVUgr4+1MO7e98xffeuMsH/eFZv8n4t/JFK9kKZ8QDLEDCqMM/S/WHNzdvR31P/ixv7zx
        urZZ8en9D179ccd82kcuIKio3Hj4MPR8iNBDVhuNhzMhvttxsRswh1CiHU9v/VwrXFZ5t+EZaOui
        6NdTY03IHzzK4CzPsECuiulvI4A/mvlZH4xEEft8IPeElgueLc9jPbGf2Pvdk9MP7S45ksV+43yx
        HLUtirALhOVDamzGc8DEeZpWD6ezWbpYpnKeitHb6C8AAAD//wMAOdJdLVgIAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e215d5d4d338d-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:14:40 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '6802'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29998371'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 3ms
      x-request-id:
      - req_8d876f781e8423ccd6ef9efac93b0670
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nExamples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\nEmotions: {prediction}\n```\n\nHere:\n- \"Examples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\" is input template,\n- \"{prompt}\" is the LLM
      prompt,\n- \"Emotions: {prediction}\" is the output template.\n\nModel can produce
      erroneous output if a prompt is not well defined. In our collaboration, we\u2019ll
      work together to refine a prompt. The process consists of two main steps:\n\n##
      Step 1\nI will provide you with the current prompt along with prediction examples.
      Each example contains the input text, the final prediction produced by the model,
      and the user feedback. User feedback indicates whether the model prediction
      is correct or not. Your task is to analyze the examples and user feedback, determining
      whether the existing instruction is describing the task reflected by these examples
      precisely, and suggests changes to the prompt to address the incorrect predictions.\n\n##
      Step 2\nNext, you will carefully review your reasoning in step 1, integrate
      the insights to refine the prompt, and provide me with the new prompt that improves
      the model\u2019s performance."}, {"role": "assistant", "content": "Sure, I\u2019d
      be happy to help you with this prompt engineering problem. Please provide me
      with the current prompt and the examples with user feedback."}, {"role": "user",
      "content": "\n## Current prompt\nRecognize emotions from text. Output the emotion
      as a single word (e.g., \"happy\", \"angry\", \"sad\").\n\n## Examples\n###
      Example #0\n\nExamples:\n\nText: I am happy\nEmotions: happy\n\nText: I am sad\nEmotions:
      sad\n\nNow recognize:\n\nText: I am happy\n\nEmotions: Labels.happy\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"happy\"\n\n\n### Example
      #1\n\nExamples:\n\nText: I am angry\nEmotions: angry\n\nText: I am sad\nEmotions:
      sad\n\nNow recognize:\n\nText: I am angry\n\nEmotions: Labels.angry\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"angry\"\n\n\n### Example
      #2\n\nExamples:\n\nText: I am sad\nEmotions: sad\n\nText: I am angry\nEmotions:
      angry\n\nNow recognize:\n\nText: I am sad\n\nEmotions: Labels.sad\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"sad\"\n\n\n\nSummarize your analysis
      about incorrect predictions and suggest changes to the prompt."}, {"role": "assistant",
      "content": "### Analysis of Incorrect Predictions\n\nThe current prompt instructs
      the model to recognize emotions from text and output the emotion as a single
      word. However, the model is producing outputs in the format \"Labels.emotion\"
      instead of just the emotion word. This discrepancy indicates that the model
      might be misinterpreting the instruction or the examples provided.\n\n### Observations:\n1.
      **Format Issue**: The model is appending \"Labels.\" to the emotion words in
      its predictions.\n2. **Consistency in Examples**: The examples provided in the
      prompt are correctly formatted, but the model''s output does not match this
      format.\n\n### Suggested Changes to the Prompt\n\n1. **Clarify Output Format**:
      Emphasize that the output should be a single word without any prefixes.\n2.
      **Reinforce with Examples**: Ensure that the examples clearly demonstrate the
      expected output format.\n\n### Revised Prompt\n\n```\nRecognize emotions from
      text. Output the emotion as a single word (e.g., \"happy\", \"angry\", \"sad\").
      Do not include any prefixes or additional text.\n\nExamples:\n\nText: I am happy\nEmotions:
      happy\n\nText: I am sad\nEmotions: sad\n\nText: I am angry\nEmotions: angry\n\nNow
      recognize:\n\nText: {input}\nEmotions: {prediction}\n```\n\n### Explanation
      of Changes\n\n1. **Clarification**: Added \"Do not include any prefixes or additional
      text\" to make it explicit that the output should be a single word without any
      prefixes.\n2. **Consistency**: Ensured that the examples provided are consistent
      and clearly demonstrate the expected output format.\n\nBy making these changes,
      the prompt should better guide the model to produce the correct output format."},
      {"role": "user", "content": "\nNow please carefully review your reasoning in
      Step 1 and help with Step 2: refining the prompt.\n\n## Current prompt\nRecognize
      emotions from text. Output the emotion as a single word (e.g., \"happy\", \"angry\",
      \"sad\").\n\n## Follow this guidance to refine the prompt:\n\n1. The new prompt
      should should describe the task precisely, and address the points raised in
      the user feedback.\n\n2. The new prompt should be similar to the current prompt,
      and only differ in the parts that address the issues you identified in Step
      1.\n    Example:\n    - Current prompt: \"Generate a summary of the input text.\"\n    -
      New prompt: \"Generate a summary of the input text. Pay attention to the original
      style.\"\n\n3. Reply only with the new prompt. Do not include input and output
      templates in the prompt.\n"}], "model": "gpt-4o", "max_tokens": 1000, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '5380'
      content-type:
      - application/json
      cookie:
      - __cf_bm=hiR8gaz16Ht0jAYxRynZILSrAhS8fEptru2rCtlIeBc-1721931260-1.0.1.1-P.uGeiWXb8I5GU6v2gUE13wSWMYLCEc6tsuIiZLJalY.8XNe2zN54S.HpNIq2tK8Rp21QI5ehjph7WgmjO54cA;
        _cfuvid=UJt4BSPi4SQ.kl267vx8ZRE36qhsO_3u2QXG3h4WCEw-1721931260493-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//VFFBbtswELzrFQueUsASRNmtGx+DHHopWhjoqS4MmlxJdCkuS65QO4H/
        XtBS7PRCLGY4w9nhawEgrBEbELpXrIfgykc6fVl/H+2TlFtLP57t4Ygv7vznqz6arVhkBR2OqPlN
        VWkagkO25CdaR1SM2VWuG/m4lM1neSUGMuiyrAtcrqhs6mZV1h9LuZyFPVmNSWzgZwEA8Ho9c0Rv
        8CQ2UC/ekAFTUh2Kze0SgIjkMiJUSjax8iwWd1KTZ/TX1FvU1Hn7goAD5dwJ2kgDMJ64gm8jh5GB
        +xsNKoGCZH3nEP5SNPCAVVctYCd6FcJ5J/KofBfnMSmzEx8qeCbwxGC9dqNBUP4MIWJrT5iAIihj
        bPZXbnpazGkvtzUddSHSIVfiR+dueGu9Tf0+okrk80qJKUzySwHw61rn+F9DIkQaAu+ZfqPPhlLW
        68lQ3H/wTi8/zSQTK/detloWc0aRzolx2LfWdxhDtFO/bdiv6rpt1q2SrSguxT8AAAD//wMAzSAL
        AmgCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8a8e218a0ca8338d-LIS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 Jul 2024 18:14:42 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '1651'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29997770'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 4ms
      x-request-id:
      - req_6aa95aa3e04c285ea28722230af1074b
    status:
      code: 200
      message: OK
version: 1
