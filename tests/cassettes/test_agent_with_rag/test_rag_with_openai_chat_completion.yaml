interactions:
- request:
    body: '{"messages": [{"role": "user", "content": "Hey, how''s it going?"}], "model":
      "gpt-3.5-turbo", "max_tokens": 1000, "seed": 47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '145'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//VJFBbxoxEIXv+yumvuQCCAI0gkvVNoegJErU3FJFyHhnd01sj2WPQ2jE
        f49sttBe9vA+v9F7bz8qAKFrsQShOsnKejNcsGp+PvG9/RMXDz/ubnfXz9/lo5r/evQpiUF20GaL
        iv+6RoqsN8ia3BGrgJIxX51cXU7Hs+nXxbgASzWabGs9D6ej+ZBT2NBwPLmc986OtMIolvC7AgD4
        KN+c0dX4LpZQ7hTFYoyyRbE8PQIQgUxWhIxRR5aOxeAMFTlGV2LfoDH0BVYXFrYpMkjIHRJjAB+o
        DdIOIBKsoCZ3wdDJN4QG0WjXxgFsEhdrhwGBCTo0HvaUYKe5A+n23GnXFsUh1iO4oR0o6WAFx2AF
        MdVy/+3fgAGbFGUeyCVjev1wamyo9YE2secnvdFOx24dUEZyuV1k8qLQQwXwUpZN/40lfCDrec30
        ii4fnMyO58T5X57hdN5DJpbmrM8WVZ9PxH1ktOtGuxaDD7rMXFocqk8AAAD//wMABLlHrWUCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af837f5b8407ba3-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:14:50 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=LSwhAUS7pcG8RLLIX.gg9bmN0Dml81b_ylIVbGAP..w-1723043690-1.0.1.1-hZWv05Gn1D_CxsYEi9AufzUuSVtoucsSuavGs1XkZop49jh6qrN_Rf9nww842bgGmCh4x1S7RJhFQ7GsUMF5Wg;
        path=/; expires=Wed, 07-Aug-24 15:44:50 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=bTN2G5Dx3fZZdKo2a5KqnyUHoT.vOBbFIy2yFSgWt7o-1723043690954-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '703'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '198993'
      x-ratelimit-reset-requests:
      - 8.64s
      x-ratelimit-reset-tokens:
      - 301ms
      x-request-id:
      - req_2903e90ab1250fbdeecb5210ecc4391d
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Hey, how''s it going?"}], "model":
      "gpt-4o", "max_tokens": 1000, "seed": 47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '138'
      content-type:
      - application/json
      cookie:
      - __cf_bm=LSwhAUS7pcG8RLLIX.gg9bmN0Dml81b_ylIVbGAP..w-1723043690-1.0.1.1-hZWv05Gn1D_CxsYEi9AufzUuSVtoucsSuavGs1XkZop49jh6qrN_Rf9nww842bgGmCh4x1S7RJhFQ7GsUMF5Wg;
        _cfuvid=bTN2G5Dx3fZZdKo2a5KqnyUHoT.vOBbFIy2yFSgWt7o-1723043690954-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//VJBLb8IwEITv+RVbX3ohKA8egkvVClXABfVQVW1VIeNsHq3jtexFFCH+
        e5UQHr34MJ9nNDuHAEBUmZiCUKVkVVsdTljls9fdyq8KG8cfj0+b5fNs+bZ7fymHheg1Dtp8o+Kz
        q6+othq5InPCyqFkbFLjcZJGg3Q0iVtQU4a6sRWWwwGFSZQMwmgYxmlnLKlS6MUUPgMAgEP7NhVN
        hr9iClHvrNTovSxQTC+fAIQj3ShCel95loZF7woVGUbTtp6j1nQHi/saSnQI0mTgUGZ7YIISte3D
        nHagpIEFnMJgT1tgyuT+4TbUYb71srnJbLXu9OOlpabCOtr4jl/0vDKVL9cOpSfTNPJMVrT0GAB8
        tWts/x0orKPa8prpB00TGA9OceI6/w0cdZCJpb7qaRR0/YTfe8Z6nVemQGdddZomt+tUynEySlQy
        FsEx+AMAAP//AwDo/bECIwIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af837fd08ac7ba3-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:14:51 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '633'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '500'
      x-ratelimit-limit-tokens:
      - '30000'
      x-ratelimit-remaining-requests:
      - '499'
      x-ratelimit-remaining-tokens:
      - '28994'
      x-ratelimit-reset-requests:
      - 120ms
      x-ratelimit-reset-tokens:
      - 2.012s
      x-request-id:
      - req_9d046b7420ea6995e05b0c819c2df9b4
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Text: I am happy", "Text: I am angry", "Text: I am sad"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '133'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        hGEAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af838045cf783f7-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:14:52 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=2Kyz9jlw6QVgvfsLwhiAkZTnHG8n2lpbDVxQvbH3HvU-1723043692-1.0.1.1-ZBYhxG7b406yW6yBEWuaFzeCYl5eRDc.Wz0s9TSGjiORrAc8pjlggo2id4gqhCXhsHbfbWKmu4S_p3nEqDBK7g;
        path=/; expires=Wed, 07-Aug-24 15:44:52 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=hYmo7we2D1zFSBj7vdEberPTMxa.sjH._9DTSARVdRs-1723043692456-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '21'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999988'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_2d312c26d1c001508f98f2062f08eccf
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text."},
      {"role": "user", "content": "Examples:\n\n\n\nNow recognize:\n\nText: I am happy"}],
      "model": "gpt-3.5-turbo", "max_tokens": 1000, "seed": 47, "temperature": 0.0,
      "tool_choice": {"type": "function", "function": {"name": "Output"}}, "tools":
      [{"type": "function", "function": {"name": "Output", "description": "Correctly
      extracted `Output` with all the required parameters with correct types", "parameters":
      {"$defs": {"Labels": {"enum": ["happy", "sad", "angry", "neutral"], "title":
      "Labels", "type": "string"}}, "properties": {"prediction": {"allOf": [{"$ref":
      "#/$defs/Labels"}], "description": "The classification label"}}, "required":
      ["prediction"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '755'
      content-type:
      - application/json
      cookie:
      - __cf_bm=LSwhAUS7pcG8RLLIX.gg9bmN0Dml81b_ylIVbGAP..w-1723043690-1.0.1.1-hZWv05Gn1D_CxsYEi9AufzUuSVtoucsSuavGs1XkZop49jh6qrN_Rf9nww842bgGmCh4x1S7RJhFQ7GsUMF5Wg;
        _cfuvid=bTN2G5Dx3fZZdKo2a5KqnyUHoT.vOBbFIy2yFSgWt7o-1723043690954-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSy2rjMBTd+yvEXSclzqMlXs6UFKaLLtIJIZPBKLJsKyPrCumKaQj598GP2m4Y
        L4S4R+ehI18jxkBlkDAQJSdRWT1dk8g3+3j39+Nd7V+WWL7ut8+H3XrzLt6eYFIz8HSWgj5ZDwIr
        qyUpNC0snOQka9X4ab6YLReP60UDVJhJXdMKS9PFw2pKwZ1wOovnq45ZohLSQ8J+RYwxdm3WOqPJ
        5AckbDb5nFTSe15ISPpDjIFDXU+Ae688cUMwGUCBhqSpY5ug9QggRJ0KrvVg3H7X0X4oimudvmL4
        sf1+2CyfNy9uO8/yn+fDt+K8G/m10hfbBMqDEX1BI7yfJ3dmjIHhVcN9C2QD3TEZA+6KUElDdWq4
        HsE6malG7QjJEUpu7eUIN/jCu0X/2/8eteFkHjzXXU3d/Nb3rrGwDk/+rkbIlVG+TJ3kvrkOeELb
        etc+jQOEL08G1mFlKSX8I00tGM/iVg+GX2pAVx1GSFyPSY9RFxD8xZOs0lyZQjrrVP/a0S36BwAA
        //8DAKRpBlTsAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af838072c817ba3-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:14:53 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '372'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9998'
      x-ratelimit-remaining-tokens:
      - '198978'
      x-ratelimit-reset-requests:
      - 14.641s
      x-ratelimit-reset-tokens:
      - 306ms
      x-request-id:
      - req_7dde37b1b2bdd4ea29295008e07b7784
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text."},
      {"role": "user", "content": "Examples:\n\n\n\nNow recognize:\n\nText: I am angry"}],
      "model": "gpt-3.5-turbo", "max_tokens": 1000, "seed": 47, "temperature": 0.0,
      "tool_choice": {"type": "function", "function": {"name": "Output"}}, "tools":
      [{"type": "function", "function": {"name": "Output", "description": "Correctly
      extracted `Output` with all the required parameters with correct types", "parameters":
      {"$defs": {"Labels": {"enum": ["happy", "sad", "angry", "neutral"], "title":
      "Labels", "type": "string"}}, "properties": {"prediction": {"allOf": [{"$ref":
      "#/$defs/Labels"}], "description": "The classification label"}}, "required":
      ["prediction"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '755'
      content-type:
      - application/json
      cookie:
      - __cf_bm=LSwhAUS7pcG8RLLIX.gg9bmN0Dml81b_ylIVbGAP..w-1723043690-1.0.1.1-hZWv05Gn1D_CxsYEi9AufzUuSVtoucsSuavGs1XkZop49jh6qrN_Rf9nww842bgGmCh4x1S7RJhFQ7GsUMF5Wg;
        _cfuvid=bTN2G5Dx3fZZdKo2a5KqnyUHoT.vOBbFIy2yFSgWt7o-1723043690954-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFJda9swFH33rxD3OSlO3TSr30bXQdlGHgZlbBlGka8dLbIkpKt0Sch/
        H7Jd2w3zgxD36HzoyOeEMZAl5AzEjpNorJo/kKg+07es/rhOX14e97QM6vvzabl25eMzzCLDbP+g
        oDfWjTCNVUjS6A4WDjlhVF2sbrP0Lrt/yFqgMSWqSKstzbOb5ZyC25p5urhd9sydkQI95OxXwhhj
        53aNGXWJfyFn6ext0qD3vEbIh0OMgTMqToB7Lz1xTTAbQWE0oY6xdVBqApAxqhBcqdG4+86T/VgU
        V6o4fDq9fll9PaWH18PTzn6wdz/2Tz9NOvHrpI+2DVQFLYaCJvgwz6/MGAPNm5a7DmQDXTEZA+7q
        0KCmmBrOG7AOS9mqbSDfANe1O27gAu94l+R/+9+TNhxWwXPV19TPL0PvytTWma2/qhEqqaXfFQ65
        b68DnoztvKNP6wDh3ZOBdaaxVJDZo46Ci3TR6cH4S43ofY+RIa6mpFXSBwR/9IRNUUldo7NODq+d
        XJJ/AAAA//8DAMHqRfTsAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af8380b29257ba3-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:14:53 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '374'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9997'
      x-ratelimit-remaining-tokens:
      - '198978'
      x-ratelimit-reset-requests:
      - 22.649s
      x-ratelimit-reset-tokens:
      - 306ms
      x-request-id:
      - req_15b647bcac2b536c6c00fd67905ca7e3
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text."},
      {"role": "user", "content": "Examples:\n\n\n\nNow recognize:\n\nText: I am sad"}],
      "model": "gpt-3.5-turbo", "max_tokens": 1000, "seed": 47, "temperature": 0.0,
      "tool_choice": {"type": "function", "function": {"name": "Output"}}, "tools":
      [{"type": "function", "function": {"name": "Output", "description": "Correctly
      extracted `Output` with all the required parameters with correct types", "parameters":
      {"$defs": {"Labels": {"enum": ["happy", "sad", "angry", "neutral"], "title":
      "Labels", "type": "string"}}, "properties": {"prediction": {"allOf": [{"$ref":
      "#/$defs/Labels"}], "description": "The classification label"}}, "required":
      ["prediction"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '753'
      content-type:
      - application/json
      cookie:
      - __cf_bm=LSwhAUS7pcG8RLLIX.gg9bmN0Dml81b_ylIVbGAP..w-1723043690-1.0.1.1-hZWv05Gn1D_CxsYEi9AufzUuSVtoucsSuavGs1XkZop49jh6qrN_Rf9nww842bgGmCh4x1S7RJhFQ7GsUMF5Wg;
        _cfuvid=bTN2G5Dx3fZZdKo2a5KqnyUHoT.vOBbFIy2yFSgWt7o-1723043690954-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSXWvbMBR9968Q9zkpcT7a1G8blA4a1tLCurYZRpGvHaWyJKRrljTkvw/Zru2G
        +UGIe3Q+dORjxBjIDBIGYstJlFaNr0nktyv+gK/796eVWt7/+Pux/L6dPz59e/kNo8Awmx0K+mRd
        CFNahSSNbmDhkBMG1fhqOpvMZ5fX8xooTYYq0ApL49nFYkyV25jxJJ4uWubWSIEeEvYWMcbYsV5D
        Rp3hHhI2GX1OSvSeFwhJd4gxcEaFCXDvpSeuCUY9KIwm1CG2rpQaAGSMSgVXqjduvuNg3xfFlUqX
        xeZ5d7h7jfmV2cfZz529uxHT1a+BXyN9sHWgvNKiK2iAd/PkzIwx0LysufcV2YrOmIwBd0VVoqaQ
        Go5rsA4zWautIVmD59kaTvCFdYr+t/8z6MJhXnmu2pLa+alrXZnCOrPxZyVCLrX029Qh9/VlwJOx
        jXfwqR2g+vJgYJ0pLaVk3lEHwXgSN3rQ/1A9umgxMsTVkHQZtQHBHzxhmeZSF+isk91bR6foHwAA
        AP//AwCEsKAm6gIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af8380efd547ba3-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:14:54 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '402'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9996'
      x-ratelimit-remaining-tokens:
      - '198980'
      x-ratelimit-reset-requests:
      - 30.676s
      x-ratelimit-reset-tokens:
      - 306ms
      x-request-id:
      - req_586eb292e508f15b79b26f4cc2453801
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Text: I am happy", "Text: I am angry", "Text: I am sad"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '133'
      content-type:
      - application/json
      cookie:
      - __cf_bm=2Kyz9jlw6QVgvfsLwhiAkZTnHG8n2lpbDVxQvbH3HvU-1723043692-1.0.1.1-ZBYhxG7b406yW6yBEWuaFzeCYl5eRDc.Wz0s9TSGjiORrAc8pjlggo2id4gqhCXhsHbfbWKmu4S_p3nEqDBK7g;
        _cfuvid=hYmo7we2D1zFSBj7vdEberPTMxa.sjH._9DTSARVdRs-1723043692456-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af838134cd083f7-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:14:54 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '24'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999989'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_6c9f77c4cf0ed2fdd91b5d8b34d3b4f1
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nExamples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\nEmotions: {prediction}\n```\n\nHere:\n- \"Examples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\" is input template,\n- \"{prompt}\" is the LLM
      prompt,\n- \"Emotions: {prediction}\" is the output template.\n\nModel can produce
      erroneous output if a prompt is not well defined. In our collaboration, we\u2019ll
      work together to refine a prompt. The process consists of two main steps:\n\n##
      Step 1\nI will provide you with the current prompt along with prediction examples.
      Each example contains the input text, the final prediction produced by the model,
      and the user feedback. User feedback indicates whether the model prediction
      is correct or not. Your task is to analyze the examples and user feedback, determining
      whether the existing instruction is describing the task reflected by these examples
      precisely, and suggests changes to the prompt to address the incorrect predictions.\n\n##
      Step 2\nNext, you will carefully review your reasoning in step 1, integrate
      the insights to refine the prompt, and provide me with the new prompt that improves
      the model\u2019s performance."}, {"role": "assistant", "content": "Sure, I\u2019d
      be happy to help you with this prompt engineering problem. Please provide me
      with the current prompt and the examples with user feedback."}, {"role": "user",
      "content": "\n## Current prompt\nRecognize emotions from text.\n\n## Examples\n###
      Example #0\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am happy\n\nEmotions:
      happy\n\nUser feedback: Prediction is incorrect. Correct answer: \"happy\"\n\n\n###
      Example #1\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am angry\n\nEmotions:
      angry\n\nUser feedback: Prediction is incorrect. Correct answer: \"angry\"\n\n\n###
      Example #2\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am sad\n\nEmotions:
      sad\n\nUser feedback: Prediction is incorrect. Correct answer: \"sad\"\n\n\n\nSummarize
      your analysis about incorrect predictions and suggest changes to the prompt."}],
      "model": "gpt-4o", "max_tokens": 1000, "seed": 47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2550'
      content-type:
      - application/json
      cookie:
      - __cf_bm=LSwhAUS7pcG8RLLIX.gg9bmN0Dml81b_ylIVbGAP..w-1723043690-1.0.1.1-hZWv05Gn1D_CxsYEi9AufzUuSVtoucsSuavGs1XkZop49jh6qrN_Rf9nww842bgGmCh4x1S7RJhFQ7GsUMF5Wg;
        _cfuvid=bTN2G5Dx3fZZdKo2a5KqnyUHoT.vOBbFIy2yFSgWt7o-1723043690954-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//fFbfT9xGEH7nr5iah0joOJEDQrm3iCQqUhRFKWpalYrM7Y7tDfasu7PL
        nYv436tZ++4MrfKCjp2dX9/3zXgfDwAKZ4slFKbGaNquOb6Mpvzl49ereiXnn367qf+4cL9/4Kt0
        v4rNu2KmHn71nUzces2Nb7uGovM8mE0gjKRRX18sTk/OTt9cnmdD6y016lZ18fjMHy9OFmfHJ+fH
        r09Hx9o7Q1Is4c8DAIDH/FdLZEubYgkns+1JSyJYUbHcXQIogm/0pEARJxE5FrO90XiOxLnqw8ND
        eMvY9OIEfAnXbHwIZCJ8DmSd0Vbklm/59RyOjq48azhi04Nj+EBkV2juj46WcFMTJKEA5XgIjq0z
        GEkg1hgh1gS561cC3T42YCBw26wzWKXh6vRKi9HU+XRbHLKsKWgg/+AsWa1G7dvkc7ipnYCkqiKJ
        +woCQeuqOsKKAKF1kthSUICs4wp80DPj2zax1u48v4ysKQ2JzBWUhYLyOfi2i3DVYHCx32JhUgjE
        Ua+r9bb4QsZX7P4hoNYPfZXBtxBpE28LcAIPFHpYBUclINuxUPZx2yUQ+1TVkOnbRK3WscSQMkxQ
        +rAHGaKHjkLpQwtoTAoYqenncB2hQXMvIB0ZVzrjYp+z0QZVuiNUxqfGQpU06y5mbvlUW/6oQPgS
        3o9O26Z3QYSGmpwAtV3sZ7CunamhJWSZVGk9SW6xxgcC5B4ClRSIDUHnHSt1HvYkQe3XetJil4HT
        3zs4R3E0fS5Ulf3rwD9ZuKqRK8rRNPvA2U7X7yiia8jC9R7P3NTnEXmE1gcCu703sjpg1RCGpgfa
        dA26sb2Icj/i2pGJWUqqmayYazZNEsXnBYZv7ZQIPw7CkMpD5R4mbAAOmeGFhMsfYTQfCcxiLftn
        E/yeJQXaD+tLxSuZQ0bty2xXQZyB+P8Z8UF8qEwa5DxwOx0CipAI2RzKtSpwsjvavlDpmOyEpW/f
        vt3yjyZonvWXUXcZOmeJo7Y4YOhaDP3WT0kJQ37HgBlYnoTpvIhbNZM80UPYZcdAS6ix6/oZCNoZ
        IFdBf6fQBSdkZ1AShjI1M7BOqqQKnOVWmVIMOEzSlvil/nNDm7iEa8AWYh1coyJbu1hD2wPTGr77
        1U+3/H6sZ0w/dTTIr3StNY6ySpzkO8Rk53D9qlWSUicU59MwufJpmJKo0avWrxmit9g/uy9o97e/
        +vUMrsE6q6mFaLs7WsfVs2p3yOydh/3sYhq2bIv3JNASBMJGBcIb55M8Sz6COo2BEdYogCvxTcrK
        GgF3XD3z3fEwbdZ6LTy3jNzHWucn78XM0N55ZE1dP/n1XgkT5h4ddyk+Tb0e95+wp1HBt5zbDqO+
        x9Ee17vsJjrL2JKY4Dp1n+kHsknDlQcMjmKvgz5dFS929SC3Fh3H3U4aVpvOOBPpR/M/X4yKmHRC
        82mgv5MLZMGn2KU4n74gApVJUB8wnJpmPH/aPUkaX3XBr2S0785Lx07qu0AonvX5IdF3RbY+HQD8
        lZ8+6dlrphhAuov+nlgDnv18PsQr9o+tiXVxNlqjj9jsDZcnlwdjiYX0Eqm9Kx1XpMIcnkJld3eK
        eLF4szCLi+Lg6eBfAAAA//8DAHPO/kwTCgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83817efea7ba3-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:15:02 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '7104'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '500'
      x-ratelimit-limit-tokens:
      - '30000'
      x-ratelimit-remaining-requests:
      - '499'
      x-ratelimit-remaining-tokens:
      - '28441'
      x-ratelimit-reset-requests:
      - 120ms
      x-ratelimit-reset-tokens:
      - 3.118s
      x-request-id:
      - req_8017d86474d99d763f3a8ba5d06bbfa7
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nExamples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\nEmotions: {prediction}\n```\n\nHere:\n- \"Examples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\" is input template,\n- \"{prompt}\" is the LLM
      prompt,\n- \"Emotions: {prediction}\" is the output template.\n\nModel can produce
      erroneous output if a prompt is not well defined. In our collaboration, we\u2019ll
      work together to refine a prompt. The process consists of two main steps:\n\n##
      Step 1\nI will provide you with the current prompt along with prediction examples.
      Each example contains the input text, the final prediction produced by the model,
      and the user feedback. User feedback indicates whether the model prediction
      is correct or not. Your task is to analyze the examples and user feedback, determining
      whether the existing instruction is describing the task reflected by these examples
      precisely, and suggests changes to the prompt to address the incorrect predictions.\n\n##
      Step 2\nNext, you will carefully review your reasoning in step 1, integrate
      the insights to refine the prompt, and provide me with the new prompt that improves
      the model\u2019s performance."}, {"role": "assistant", "content": "Sure, I\u2019d
      be happy to help you with this prompt engineering problem. Please provide me
      with the current prompt and the examples with user feedback."}, {"role": "user",
      "content": "\n## Current prompt\nRecognize emotions from text.\n\n## Examples\n###
      Example #0\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am happy\n\nEmotions:
      happy\n\nUser feedback: Prediction is incorrect. Correct answer: \"happy\"\n\n\n###
      Example #1\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am angry\n\nEmotions:
      angry\n\nUser feedback: Prediction is incorrect. Correct answer: \"angry\"\n\n\n###
      Example #2\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am sad\n\nEmotions:
      sad\n\nUser feedback: Prediction is incorrect. Correct answer: \"sad\"\n\n\n\nSummarize
      your analysis about incorrect predictions and suggest changes to the prompt."},
      {"role": "assistant", "content": "### Analysis of Incorrect Predictions\n\n1.
      **Consistency in Feedback**: The user feedback indicates that the model''s predictions
      are incorrect, but the predictions match the correct answers provided in the
      feedback. This suggests that there might be a misunderstanding or miscommunication
      in the feedback process.\n\n2. **Prompt Clarity**: The current prompt \"Recognize
      emotions from text\" is very brief and might not provide enough context or instruction
      for the model to perform accurately. It lacks specificity and examples that
      could guide the model.\n\n3. **Lack of Examples**: The examples section is empty,
      which means the model does not have any reference points to understand how to
      map text to emotions correctly.\n\n### Suggested Changes to the Prompt\n\n1.
      **Detailed Instructions**: Provide a more detailed prompt that clearly explains
      the task and expectations.\n2. **Inclusion of Examples**: Add examples to the
      prompt to give the model a clear understanding of how to map text to emotions.\n3.
      **Clarify Feedback**: Ensure that the feedback process is clear and consistent,
      so that the model''s performance can be accurately assessed and improved.\n\n###
      Refined Prompt\n\n```\nRecognize emotions from text. The task is to identify
      the primary emotion expressed in a given text. The possible emotions to recognize
      are: happy, sad, angry, surprised, fearful, disgusted, and neutral.\n\nExamples:\n\nText:
      I am thrilled with my new job!\nEmotions: happy\n\nText: I can''t believe this
      happened. I''m so upset.\nEmotions: angry\n\nText: I feel so down today.\nEmotions:
      sad\n\nText: Wow, I didn''t see that coming!\nEmotions: surprised\n\nText: This
      situation makes me really anxious.\nEmotions: fearful\n\nText: That was absolutely
      disgusting.\nEmotions: disgusted\n\nText: I don''t feel anything special.\nEmotions:
      neutral\n\nNow recognize:\n\nText: {input}\nEmotions: {prediction}\n```\n\nThis
      refined prompt provides a clear task description, includes a variety of examples
      to guide the model, and maintains the structure needed for the model to generate
      the required output."}, {"role": "user", "content": "\nNow please carefully
      review your reasoning in Step 1 and help with Step 2: refining the prompt.\n\n##
      Current prompt\nRecognize emotions from text.\n\n## Follow this guidance to
      refine the prompt:\n\n1. The new prompt should should describe the task precisely,
      and address the points raised in the user feedback.\n\n2. The new prompt should
      be similar to the current prompt, and only differ in the parts that address
      the issues you identified in Step 1.\n    Example:\n    - Current prompt: \"Generate
      a summary of the input text.\"\n    - New prompt: \"Generate a summary of the
      input text. Pay attention to the original style.\"\n\n3. Reply only with the
      new prompt. Do not include input and output templates in the prompt.\n"}], "model":
      "gpt-4o", "max_tokens": 1000, "seed": 47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '5441'
      content-type:
      - application/json
      cookie:
      - __cf_bm=LSwhAUS7pcG8RLLIX.gg9bmN0Dml81b_ylIVbGAP..w-1723043690-1.0.1.1-hZWv05Gn1D_CxsYEi9AufzUuSVtoucsSuavGs1XkZop49jh6qrN_Rf9nww842bgGmCh4x1S7RJhFQ7GsUMF5Wg;
        _cfuvid=bTN2G5Dx3fZZdKo2a5KqnyUHoT.vOBbFIy2yFSgWt7o-1723043690954-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//VFFNb9swDL37VxA6O4HjpPWa2w67FB26DgMGbBgCRaZtdZIoiPSQpMh/
        H+R8tRdBeB/E4+NbAaBsq9agzKDF+OhmD2K6Z8T0iD+fH772v54+/6i+7F6eDi9hPKgyO2j7ikYu
        rrkhHx2KpXCiTUItmKcumnpZrZZNVU+EpxZdtvVRZiua1VW9mlV3s8XybBzIGmS1ht8FAMDb9OaI
        ocWdWkNVXhCPzLpHtb6KAFQilxGlmS2LDqLKG2koCIYp9Xc01Ad7QEBPOTdDl8iD4E7m8C3RP9si
        yIAQk/U67S86wF1MyIwt2DAJsgW2OiMUwJD3WXVSawdGC/aULDLwaAbQDIOOcV8C67YEHfqU/2OK
        yTK2JXSoUze6ElrL/ciCk6qFgKMk7ebvN0rYjaxzoWF07owfrxU56mOiLZ/5K97ZYHnYJNRMIdfB
        QlFN7LEA+DOdYvzQroqJfJSN0F8MeeCiuv90Gqhu17/Ry+ZMCol272yL6q44Z1S8Z0G/6WzoMe9/
        uk0XN0utm/q+NnWjimPxHwAA//8DAMMZTm6kAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af83845dcdb7ba3-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:15:03 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '983'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '500'
      x-ratelimit-limit-tokens:
      - '30000'
      x-ratelimit-remaining-requests:
      - '499'
      x-ratelimit-remaining-tokens:
      - '27751'
      x-ratelimit-reset-requests:
      - 120ms
      x-ratelimit-reset-tokens:
      - 4.498s
      x-request-id:
      - req_65cd171cb05d98f08530d28b2c18ca0c
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Text: I am happy", "Text: I am angry", "Text: I am sad"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '133'
      content-type:
      - application/json
      cookie:
      - __cf_bm=2Kyz9jlw6QVgvfsLwhiAkZTnHG8n2lpbDVxQvbH3HvU-1723043692-1.0.1.1-ZBYhxG7b406yW6yBEWuaFzeCYl5eRDc.Wz0s9TSGjiORrAc8pjlggo2id4gqhCXhsHbfbWKmu4S_p3nEqDBK7g;
        _cfuvid=hYmo7we2D1zFSBj7vdEberPTMxa.sjH._9DTSARVdRs-1723043692456-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af8384d1854103a-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:15:04 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '27'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999988'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_666b3f7a0ebf3a3bad5fa6ee8b3f227d
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text.
      Provide the primary emotion expressed in the text based on common emotional
      categories such as happy, sad, angry, surprised, fearful, disgusted, and neutral."},
      {"role": "user", "content": "Examples:\n\nText: I am happy\nEmotions: happy\n\nText:
      I am sad\nEmotions: sad\n\nNow recognize:\n\nText: I am happy"}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["happy", "sad", "angry", "neutral"], "title": "Labels",
      "type": "string"}}, "properties": {"prediction": {"allOf": [{"$ref": "#/$defs/Labels"}],
      "description": "The classification label"}}, "required": ["prediction"], "type":
      "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '979'
      content-type:
      - application/json
      cookie:
      - __cf_bm=LSwhAUS7pcG8RLLIX.gg9bmN0Dml81b_ylIVbGAP..w-1723043690-1.0.1.1-hZWv05Gn1D_CxsYEi9AufzUuSVtoucsSuavGs1XkZop49jh6qrN_Rf9nww842bgGmCh4x1S7RJhFQ7GsUMF5Wg;
        _cfuvid=bTN2G5Dx3fZZdKo2a5KqnyUHoT.vOBbFIy2yFSgWt7o-1723043690954-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFJNT+MwEL3nV1hzpiilVJBcYbUrIcRuubFFkes4iRfbY+yJSqn631dO
        0jRU5GBZ8/w+/Jx9whioEnIGouEkjNOzjET1J5tnDz9//F4hvlWPm1W1zX4ZHhTBRWTg5p8UdGRd
        CjROS1Joe1h4yUlG1fnN1SK9Xtyk1x1gsJQ60mpHs8Xlckat3+AsnV8tB2aDSsgAOfubMMbYvltj
        RlvKD8hZenGcGBkCryXk4yHGwKOOE+AhqEDc9nkHUKAlaWNs22o9AQhRF4JrfTLuv/1kfyqKa118
        ltvb++dmp+7uTPO+Src2+JfMmIlfL71zXaCqtWIsaIKP8/zMjDGw3HTcp5ZcS2dMxoD7ujXSUkwN
        +zU4L0vVqa0hX0PDndut4QBfeIfku/3rpA0vqzZwPdQ0zA9j7xpr53ETzmqESlkVmsJLHrrrQCB0
        vXf06Ryg/fJk4DwaRwXhm7RRcL5c9Hpw+qVO6HLACInrKek2GQJC2AWSpqiUraV3Xo2vnRyS/wAA
        AP//AwA2YaH17AIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af8384eef827ba3-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:15:04 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '472'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9996'
      x-ratelimit-remaining-tokens:
      - '198923'
      x-ratelimit-reset-requests:
      - 29.083s
      x-ratelimit-reset-tokens:
      - 322ms
      x-request-id:
      - req_72a1b888ef2f2223337ef3263f1c3f91
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text.
      Provide the primary emotion expressed in the text based on common emotional
      categories such as happy, sad, angry, surprised, fearful, disgusted, and neutral."},
      {"role": "user", "content": "Examples:\n\nText: I am angry\nEmotions: angry\n\nText:
      I am sad\nEmotions: sad\n\nNow recognize:\n\nText: I am angry"}], "model": "gpt-3.5-turbo",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["happy", "sad", "angry", "neutral"], "title": "Labels",
      "type": "string"}}, "properties": {"prediction": {"allOf": [{"$ref": "#/$defs/Labels"}],
      "description": "The classification label"}}, "required": ["prediction"], "type":
      "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '979'
      content-type:
      - application/json
      cookie:
      - __cf_bm=LSwhAUS7pcG8RLLIX.gg9bmN0Dml81b_ylIVbGAP..w-1723043690-1.0.1.1-hZWv05Gn1D_CxsYEi9AufzUuSVtoucsSuavGs1XkZop49jh6qrN_Rf9nww842bgGmCh4x1S7RJhFQ7GsUMF5Wg;
        _cfuvid=bTN2G5Dx3fZZdKo2a5KqnyUHoT.vOBbFIy2yFSgWt7o-1723043690954-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSXUvrMBi+768I7/Uma2cd6516o6JsCAfxOClZlraZaRKSN+LO2H8/pK1tHfYi
        hPfJ85EnPUaEgNhBRoBVFFlt5HSJrHhePyX49Hq9+Iz31Wpt9w+rG79KrIdJYOjtnjP8Zl0wXRvJ
        UWjVwsxyijyoxotkPrucL2ZpA9R6x2WglQan84t0it5u9XQWJ2nHrLRg3EFG3iJCCDk2a8iodvwL
        MjKbfE9q7hwtOWT9IULAahkmQJ0TDqlCmAwg0wq5CrGVl3IEoNYyZ1TKwbj9jqP9UBSVMk9v7u/i
        P5dLf3C3a/ZPJC8f1V/3+Dnya6UPpglUeMX6gkZ4P8/OzAgBReuGu/JoPJ4xCQFqS19zhSE1HDdg
        LN+JRm0D2QaoKu1hAyf4wTtFv+3fR21YXnhHZVdTNz/1vUtdGqu37qxGKIQSrsotp665DjjUpvUO
        Po0D+B9PBsbq2mCO+oOrIBin81YPhl9qQK86DDVSOSYtoy4guINDXueFUCW3xor+taNT9B8AAP//
        AwC8kHvW7AIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af838538cf07ba3-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:15:05 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '531'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9995'
      x-ratelimit-remaining-tokens:
      - '198923'
      x-ratelimit-reset-requests:
      - 36.99s
      x-ratelimit-reset-tokens:
      - 322ms
      x-request-id:
      - req_c86da9cad3c65a567fd4280b01d36e24
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text.
      Provide the primary emotion expressed in the text based on common emotional
      categories such as happy, sad, angry, surprised, fearful, disgusted, and neutral."},
      {"role": "user", "content": "Examples:\n\nText: I am sad\nEmotions: sad\n\nText:
      I am angry\nEmotions: angry\n\nNow recognize:\n\nText: I am sad"}], "model":
      "gpt-3.5-turbo", "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice":
      {"type": "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["happy", "sad", "angry", "neutral"], "title": "Labels",
      "type": "string"}}, "properties": {"prediction": {"allOf": [{"$ref": "#/$defs/Labels"}],
      "description": "The classification label"}}, "required": ["prediction"], "type":
      "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '977'
      content-type:
      - application/json
      cookie:
      - __cf_bm=LSwhAUS7pcG8RLLIX.gg9bmN0Dml81b_ylIVbGAP..w-1723043690-1.0.1.1-hZWv05Gn1D_CxsYEi9AufzUuSVtoucsSuavGs1XkZop49jh6qrN_Rf9nww842bgGmCh4x1S7RJhFQ7GsUMF5Wg;
        _cfuvid=bTN2G5Dx3fZZdKo2a5KqnyUHoT.vOBbFIy2yFSgWt7o-1723043690954-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSTWvjMBC9+1eIOSclqeum8bmFhR5KWSjb3SxGlmVHiaRRpTFtCfnvi2zXdsP6
        IMQ8vQ89+ZQwBqqCnIHYcxLG6eWWRP1Tpe/Zvf99Xz5U2rvt+49DHV6ewy9YRAaWBynoi3Ul0Dgt
        SaHtYeElJxlV15vrdHWTbla3HWCwkjrSGkfL9CpbUutLXK7W19nA3KMSMkDO/iSMMXbq1pjRVvID
        crZafE2MDIE3EvLxEGPgUccJ8BBUIG4JFhMo0JK0MbZttZ4BhKgLwbWejPvvNNtPRXGti8PmEdO7
        7SF9aR7sMTy+onnzx9dy5tdLf7ouUN1aMRY0w8d5fmHGGFhuOu5TS66lCyZjwH3TGmkppobTDpyX
        lerUdpDvIPBqB2f4xjon/9v/nXXhZd0GroeShvl5bF1j4zyW4aJEqJVVYV94yUN3GQiErveOPp0D
        tN8eDJxH46ggPEobBddZ2uvB9ENNaDZghMT1nHSXDAEhfAaSpqiVbaR3Xo1vnZyTfwAAAP//AwDw
        RvG96gIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af838586b307ba3-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:15:06 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '470'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '200000'
      x-ratelimit-remaining-requests:
      - '9994'
      x-ratelimit-remaining-tokens:
      - '198925'
      x-ratelimit-reset-requests:
      - 44.853s
      x-ratelimit-reset-tokens:
      - 322ms
      x-request-id:
      - req_ac5076797bbcf97d67f03ed97c44aeaf
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Text: I am happy", "Text: I am angry", "Text: I am sad"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '133'
      content-type:
      - application/json
      cookie:
      - __cf_bm=2Kyz9jlw6QVgvfsLwhiAkZTnHG8n2lpbDVxQvbH3HvU-1723043692-1.0.1.1-ZBYhxG7b406yW6yBEWuaFzeCYl5eRDc.Wz0s9TSGjiORrAc8pjlggo2id4gqhCXhsHbfbWKmu4S_p3nEqDBK7g;
        _cfuvid=hYmo7we2D1zFSBj7vdEberPTMxa.sjH._9DTSARVdRs-1723043692456-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        X39RV/1++QMAAP//AwDqKHsEhGEAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af8385da8dc103a-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:15:06 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '24'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999989'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_ffd751fd35524a71e41d1af57340abde
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nExamples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\nEmotions: {prediction}\n```\n\nHere:\n- \"Examples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\" is input template,\n- \"{prompt}\" is the LLM
      prompt,\n- \"Emotions: {prediction}\" is the output template.\n\nModel can produce
      erroneous output if a prompt is not well defined. In our collaboration, we\u2019ll
      work together to refine a prompt. The process consists of two main steps:\n\n##
      Step 1\nI will provide you with the current prompt along with prediction examples.
      Each example contains the input text, the final prediction produced by the model,
      and the user feedback. User feedback indicates whether the model prediction
      is correct or not. Your task is to analyze the examples and user feedback, determining
      whether the existing instruction is describing the task reflected by these examples
      precisely, and suggests changes to the prompt to address the incorrect predictions.\n\n##
      Step 2\nNext, you will carefully review your reasoning in step 1, integrate
      the insights to refine the prompt, and provide me with the new prompt that improves
      the model\u2019s performance."}, {"role": "assistant", "content": "Sure, I\u2019d
      be happy to help you with this prompt engineering problem. Please provide me
      with the current prompt and the examples with user feedback."}, {"role": "user",
      "content": "\n## Current prompt\nRecognize emotions from text. Provide the primary
      emotion expressed in the text based on common emotional categories such as happy,
      sad, angry, surprised, fearful, disgusted, and neutral.\n\n## Examples\n###
      Example #0\n\nExamples:\n\nText: I am happy\nEmotions: happy\n\nText: I am sad\nEmotions:
      sad\n\nNow recognize:\n\nText: I am happy\n\nEmotions: happy\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"happy\"\n\n\n### Example #1\n\nExamples:\n\nText:
      I am angry\nEmotions: angry\n\nText: I am sad\nEmotions: sad\n\nNow recognize:\n\nText:
      I am angry\n\nEmotions: angry\n\nUser feedback: Prediction is incorrect. Correct
      answer: \"angry\"\n\n\n### Example #2\n\nExamples:\n\nText: I am sad\nEmotions:
      sad\n\nText: I am angry\nEmotions: angry\n\nNow recognize:\n\nText: I am sad\n\nEmotions:
      sad\n\nUser feedback: Prediction is incorrect. Correct answer: \"sad\"\n\n\n\nSummarize
      your analysis about incorrect predictions and suggest changes to the prompt."}],
      "model": "gpt-4o", "max_tokens": 1000, "seed": 47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2906'
      content-type:
      - application/json
      cookie:
      - __cf_bm=LSwhAUS7pcG8RLLIX.gg9bmN0Dml81b_ylIVbGAP..w-1723043690-1.0.1.1-hZWv05Gn1D_CxsYEi9AufzUuSVtoucsSuavGs1XkZop49jh6qrN_Rf9nww842bgGmCh4x1S7RJhFQ7GsUMF5Wg;
        _cfuvid=bTN2G5Dx3fZZdKo2a5KqnyUHoT.vOBbFIy2yFSgWt7o-1723043690954-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//hFZNbxw3DL37VxCTQwBjd2GvnTrZW+CkbS5tkLhFi6YwtBrODBuNJIjS
        rieG/3tBzeemBnrxhyQ+ke89cvR4BlBQWeyg0I2KuvVm/Sbq6u7yT199+pA+v7Y/qd/rP95tu89t
        2ygsVhLh9v+gjmPURrvWG4zkbL+tA6qIgnp5s726uL66ubjJG60r0UhY7eP62q23F9vr9cWr9eXV
        ENg40sjFDv46AwB4zD8lRVviQ7GDi9W40iKzqrHYTYcAiuCMrBSKmTgqG4vVvKmdjWhz1i9evIC3
        VpmOicFV8MFqFwLqCB8DlqSlFP5iv9jfvLMQ8EB4JFtDbBB8cAcqsQR8UFI2g7IlJMYAFWK5V/rr
        CiiC8h5VYIiNijkwF/+Swc9XgAoISsekjOlgyGEF+9RHnIACjUmaDjiqiAvs7zGPwdl6A3cNMXCq
        a+Q4nw4ILdVNhD2CgpY42RKD8FVKkS7ImnZtmyxpJaBANl8z5eKD08gMQQmeIFtQFog5IRwpNiNV
        rY9AkdFUG+HzZ3fEA4YVRAdoOQU8OcigGLRBFTKpWFWoIx1Qlr1jpr3BFRiMLxm0s0wlBlBQ4RG8
        E3FJGalfMVQuALUiFrZo405uv9zA+fmtUYGqDt63TkpTBm5VxNoFQj4/38Fdg6BTCGjjmJchoU8Y
        cRZwitNTXFasdMhgXQR88IY0TTpNxDNmcaRiZ0XwGSA6USMxlht4W2Yd1MAEWY4hZXF7pBzbwy0Q
        uHHJlCPKoHCDxmfit1L6+96x8I4OGJhiN9Y7WXkyt+R5wNABUw4ROQJ6jCR6bKRjTBrSPGYZDioQ
        xk7aaYLLTmhdQOhHxAMwShNq5EWCc3dAjRaDMvQNYY8xYsjJX0nyP47euxXhWVBy/u9HGw2tsPRo
        X4vYSusURAqpQ48AcbbqM805tM+RjOnTJAtzB1Ipdqu6TEF23DF31lyLRSx56cFci4yez31HYgm3
        jbJ1L78Efsx+y40iWJI4BKzIYglZMmeF30XL5LLzZPAuDDNBjDE0vdSRrb9er+XXJ9SutkLvYGOG
        KrgWIj7EjVwvjA341KrQjefE1AFZnDXMAgmBvZIVN0wHZ4zLc/K5HtlBo7zvVsCqXIGydZC/U/CB
        GMsVVKhClcwKSuI6CTurrJbFFIMyG/hVbJ8Y/2t96fXOpXCinpQ7GL6n4A4f4g4+gGr7TL7YYQSM
        qX13iFW5PJL/PTmQa1geGRZOUcYKYZ+bFiwe+QR3PLAMrBDNyAiovRs+CFWKKeAyejgzx2bPEo8s
        kq2Xxydul5c16oBgHXCUr0a+m2zN0710ku+ghwD84o4QRkctOH4k61N8WkY9ztI8LfyYsx0dPlh6
        6Ft+fgC6bIFxBAJ71FSRfI6fm8tiIMqjKuPlUVTm6YfAGE+GVXT/P42W74mAVWIlzxmbjBnWn6YH
        inG1D27Pw/60XpElbu5lZDgrjxGOzhd59+kM4O/8EEonb5uiZ+Y+uq9oBfDV622PV8xPr3n3+uJy
        2I0uKjNvvHl9dTakWHDHEdv7imyNYsD+YVT5+yulbrY/bPX2pjh7OvsXAAD//wMAV8ewECEKAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af8385f6b867ba3-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:15:23 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '16511'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '500'
      x-ratelimit-limit-tokens:
      - '30000'
      x-ratelimit-remaining-requests:
      - '499'
      x-ratelimit-remaining-tokens:
      - '28355'
      x-ratelimit-reset-requests:
      - 120ms
      x-ratelimit-reset-tokens:
      - 3.29s
      x-request-id:
      - req_9f5d6c0ffa813050de5b7c9156a64f46
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nExamples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\nEmotions: {prediction}\n```\n\nHere:\n- \"Examples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\" is input template,\n- \"{prompt}\" is the LLM
      prompt,\n- \"Emotions: {prediction}\" is the output template.\n\nModel can produce
      erroneous output if a prompt is not well defined. In our collaboration, we\u2019ll
      work together to refine a prompt. The process consists of two main steps:\n\n##
      Step 1\nI will provide you with the current prompt along with prediction examples.
      Each example contains the input text, the final prediction produced by the model,
      and the user feedback. User feedback indicates whether the model prediction
      is correct or not. Your task is to analyze the examples and user feedback, determining
      whether the existing instruction is describing the task reflected by these examples
      precisely, and suggests changes to the prompt to address the incorrect predictions.\n\n##
      Step 2\nNext, you will carefully review your reasoning in step 1, integrate
      the insights to refine the prompt, and provide me with the new prompt that improves
      the model\u2019s performance."}, {"role": "assistant", "content": "Sure, I\u2019d
      be happy to help you with this prompt engineering problem. Please provide me
      with the current prompt and the examples with user feedback."}, {"role": "user",
      "content": "\n## Current prompt\nRecognize emotions from text. Provide the primary
      emotion expressed in the text based on common emotional categories such as happy,
      sad, angry, surprised, fearful, disgusted, and neutral.\n\n## Examples\n###
      Example #0\n\nExamples:\n\nText: I am happy\nEmotions: happy\n\nText: I am sad\nEmotions:
      sad\n\nNow recognize:\n\nText: I am happy\n\nEmotions: happy\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"happy\"\n\n\n### Example #1\n\nExamples:\n\nText:
      I am angry\nEmotions: angry\n\nText: I am sad\nEmotions: sad\n\nNow recognize:\n\nText:
      I am angry\n\nEmotions: angry\n\nUser feedback: Prediction is incorrect. Correct
      answer: \"angry\"\n\n\n### Example #2\n\nExamples:\n\nText: I am sad\nEmotions:
      sad\n\nText: I am angry\nEmotions: angry\n\nNow recognize:\n\nText: I am sad\n\nEmotions:
      sad\n\nUser feedback: Prediction is incorrect. Correct answer: \"sad\"\n\n\n\nSummarize
      your analysis about incorrect predictions and suggest changes to the prompt."},
      {"role": "assistant", "content": "### Analysis of Incorrect Predictions\n\nUpon
      reviewing the provided examples and user feedback, it appears that the model''s
      predictions are actually correct, but the user feedback incorrectly states that
      the predictions are wrong. This suggests that there might be a misunderstanding
      or miscommunication in the feedback process rather than an issue with the prompt
      itself.\n\nHowever, to ensure the prompt is as clear and effective as possible,
      let''s consider a few potential areas for improvement:\n\n1. **Clarify Emotional
      Categories**: The current prompt lists common emotional categories but does
      not explicitly state that these are the only categories to be used. Adding a
      clear instruction that only these categories should be used might help.\n\n2.
      **Example Diversity**: The examples provided are very simple and repetitive.
      Including a wider variety of examples with more complex sentences might help
      the model generalize better.\n\n3. **Feedback Consistency**: Ensure that the
      feedback provided is accurate and consistent with the model''s predictions.
      This will help in correctly identifying areas where the model needs improvement.\n\n###
      Suggested Changes to the Prompt\n\nHere is a refined version of the prompt that
      incorporates these suggestions:\n\n---\n\nRecognize emotions from text. Provide
      the primary emotion expressed in the text based on the following emotional categories:
      happy, sad, angry, surprised, fearful, disgusted, and neutral. Only use these
      categories for your predictions.\n\nExamples:\n\nText: I am happy\nEmotions:
      happy\n\nText: I am sad\nEmotions: sad\n\nText: I am angry\nEmotions: angry\n\nText:
      I am surprised by the news\nEmotions: surprised\n\nText: I feel fearful about
      the future\nEmotions: fearful\n\nText: This is disgusting\nEmotions: disgusted\n\nText:
      I have no strong feelings about this\nEmotions: neutral\n\nNow recognize:\n\nText:
      {input}\nEmotions: {prediction}\n\n---\n\nThis refined prompt provides a clear
      instruction to use only the specified emotional categories and includes a more
      diverse set of examples to help the model generalize better."}, {"role": "user",
      "content": "\nNow please carefully review your reasoning in Step 1 and help
      with Step 2: refining the prompt.\n\n## Current prompt\nRecognize emotions from
      text. Provide the primary emotion expressed in the text based on common emotional
      categories such as happy, sad, angry, surprised, fearful, disgusted, and neutral.\n\n##
      Follow this guidance to refine the prompt:\n\n1. The new prompt should should
      describe the task precisely, and address the points raised in the user feedback.\n\n2.
      The new prompt should be similar to the current prompt, and only differ in the
      parts that address the issues you identified in Step 1.\n    Example:\n    -
      Current prompt: \"Generate a summary of the input text.\"\n    - New prompt:
      \"Generate a summary of the input text. Pay attention to the original style.\"\n\n3.
      Reply only with the new prompt. Do not include input and output templates in
      the prompt.\n"}], "model": "gpt-4o", "max_tokens": 1000, "seed": 47, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '5969'
      content-type:
      - application/json
      cookie:
      - __cf_bm=LSwhAUS7pcG8RLLIX.gg9bmN0Dml81b_ylIVbGAP..w-1723043690-1.0.1.1-hZWv05Gn1D_CxsYEi9AufzUuSVtoucsSuavGs1XkZop49jh6qrN_Rf9nww842bgGmCh4x1S7RJhFQ7GsUMF5Wg;
        _cfuvid=bTN2G5Dx3fZZdKo2a5KqnyUHoT.vOBbFIy2yFSgWt7o-1723043690954-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.10.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//VFLLbtswELzrKxY8y4YlOXXja3vJA2gbtKeiMGhqJTOhuAR3WdsN/O8F
        5WcuBDGzMxjO8r0AULZVS1Bmo8UMwU3uxXSvT1++vg3zh1/9Nj3+/PH8WD1t75N+qVSZFbR+RSNn
        1dTQEByKJX+kTUQtmF2rRd3M5s2ibkZioBZdlvVBJnOa1LN6PpndTarmJNyQNchqCb8LAID38cwR
        fYs7tYRZeUYGZNY9quVlCEBFchlRmtmyaC+qvJKGvKAfU7+god7bfwg4UM7N0EUaQHAnU/ge6a9t
        EWSDEKIddNyf5wB3ISIztmD9OJAlsNYZoSPSkXO0tb4/i7QDowV7ihZ5CRsdwr4E1m0J2vcx31MM
        0TK2JXSoY5dcCa3lPrHgONWCxyRRuyl8824Picd4jDfO0FGEPaUIIWJrzfiu6W0DEbvEOi/AJ+dO
        +OFSqaM+RFrzib/gnfWWN6uImsnn+lgoqJE9FAB/xtWlD9tQIdIQZCX0hj4bVtWiORqq62+50vO7
        Eykk2t3I6upzccqoeM+Cw6qzvsfc13GXXVg1Wi/qT7WpF6o4FP8BAAD//wMABz84edQCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8af838c79ca37ba3-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 07 Aug 2024 15:15:24 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - user-jt0khdjhkecks0yodhgozy8e
      openai-processing-ms:
      - '1064'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '500'
      x-ratelimit-limit-tokens:
      - '30000'
      x-ratelimit-remaining-requests:
      - '499'
      x-ratelimit-remaining-tokens:
      - '27622'
      x-ratelimit-reset-requests:
      - 120ms
      x-ratelimit-reset-tokens:
      - 4.756s
      x-request-id:
      - req_aa4a695797c052a963b04b3f8205f99b
    status:
      code: 200
      message: OK
version: 1
