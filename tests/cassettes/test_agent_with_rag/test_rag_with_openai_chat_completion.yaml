interactions:
- request:
    body: '{"messages": [{"role": "user", "content": "Hey, how''s it going?"}], "model":
      "gpt-3.5-turbo", "max_tokens": 10}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '111'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//VJA/b8IwEMX3fIqrly4JghCEyNgJJsRU2qpCJhyOqeML9oX+QXz3yiGE
        dvHw3r13v/M5AhB6J3IQRSm5qGqTzI7qqOzL8qdZzdenVzldz9TzalkfP58WQxGHBG0PWPAtNSio
        qg2yJnu1C4eSMbSOpmk6zrLpLGuNinZoQkzVnIwHk4Qbt6VkOEonXbIkXaAXObxFAADn9g2Mdodf
        IodhfFMq9F4qFHk/BCAcmaAI6b32LC2L+G4WZBltiz1HY+gBFo8VHBrPIOGkHTfSQJ+MwZPowpd+
        qyFVO9oGQtsY0+t7bbUvNw6lJxs2GLSKy2vBJQJ4b+9r/iGL2lFV84bpA22oHGXXQnH/0T9md7tg
        YmnueppFHaHw356x2uy1Vehqp9tjA2d0iX4BAAD//wMA79Izr+sBAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab59111b9df22c2-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 13:06:34 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=o_atXp3IKQGg72hBP8X6QFIN_n4Lknz2wIi_QePY4ts-1722344794-1.0.1.1-phgGbDwjotWAlRo5sTjgu.DRwBpSFjmPabZZ_qEnL4T55ADI5FOcP28y4h.DWEfmC3nh2uOOWBs1wW2wadIz_Q;
        path=/; expires=Tue, 30-Jul-24 13:36:34 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=6mUrlo6cvb9k1f8lEBi6gxr_WQfI3bszevMStBmLANI-1722344794520-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '440'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '50000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '49999983'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_24209b380777d6cde5b1e8715a6e3489
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "user", "content": "Hey, how''s it going?"}], "model":
      "gpt-4o", "max_tokens": 10}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '104'
      content-type:
      - application/json
      cookie:
      - __cf_bm=o_atXp3IKQGg72hBP8X6QFIN_n4Lknz2wIi_QePY4ts-1722344794-1.0.1.1-phgGbDwjotWAlRo5sTjgu.DRwBpSFjmPabZZ_qEnL4T55ADI5FOcP28y4h.DWEfmC3nh2uOOWBs1wW2wadIz_Q;
        _cfuvid=6mUrlo6cvb9k1f8lEBi6gxr_WQfI3bszevMStBmLANI-1722344794520-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//VJAxT8MwEIX3/IrDC0uDkjRV26xIUBjKABIDQpGbXGNTx3btK6Wq+t+R
        k7SFxcN7fu++u2MEwGTNCmCV4FS1VsXzbbNtlks/fn59eVtsVPWQtNP32fyei8cZG4WEWX1hRefU
        XWVaq5Ck0b1dOeSEoTWdZtk4z6fzvDNaU6MKscZSnJs4S7I8TiZxOh6CwsgKPSvgIwIAOHZvQNQ1
        /rACktFZadF73iArLp8AmDMqKIx7Lz1xTWx0NSujCXVHvUClzA083bYg0CFwXYNDXh+ADAhUFvaS
        BOwFJ/xGx4aS02W6Mo11ZhVI9U6pi76WWnpROuTe6DBJoW5I9AWnCOCz23P3D51ZZ1pLJZkN6lCZ
        5n0hux72jzncgJEhrq56lkcDIfMHT9iWa6kbdNbJfum1LXPMVlnNJ+mMRafoFwAA//8DAGK52Hb9
        AQAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab59117382522c2-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 13:06:35 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '243'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29999984'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_302b6966f4de61dcfcf49c400947a6c5
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Text: I am happy", "Text: I am angry", "Text: I am sad"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '133'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        YQAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab5911aea472262-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 13:06:35 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=9vQb2SGKB2hIYVZkmz_1I.WSVRZE82NmWNDGw75y.jM-1722344795-1.0.1.1-N7pDdK8RjKWr2bL2UiVjWEtmYFLahjc2jlMdqv5VWaB.b4XtgN67eyCtI3zh7NQS2M5gjAZ6585Way61Crd.eQ;
        path=/; expires=Tue, 30-Jul-24 13:36:35 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=0DsiKSluQLBu5ArXMAuPx25vAq.d7FcmYN4oxiywSNw-1722344795554-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - heartex
      openai-processing-ms:
      - '23'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999988'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_a7353af554edc060e6eec1c6ca6d6ed6
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text."},
      {"role": "user", "content": "Examples:\n\n\n\nNow recognize:\n\nText: I am happy"}],
      "model": "gpt-4o-mini", "max_tokens": 1000, "seed": 47, "temperature": 0.0,
      "tool_choice": {"type": "function", "function": {"name": "Output"}}, "tools":
      [{"type": "function", "function": {"name": "Output", "description": "Correctly
      extracted `Output` with all the required parameters with correct types", "parameters":
      {"$defs": {"Labels": {"enum": ["happy", "sad", "angry", "neutral"], "title":
      "Labels", "type": "string"}}, "properties": {"prediction": {"allOf": [{"$ref":
      "#/$defs/Labels"}], "description": "The classification label"}}, "required":
      ["prediction"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '753'
      content-type:
      - application/json
      cookie:
      - __cf_bm=o_atXp3IKQGg72hBP8X6QFIN_n4Lknz2wIi_QePY4ts-1722344794-1.0.1.1-phgGbDwjotWAlRo5sTjgu.DRwBpSFjmPabZZ_qEnL4T55ADI5FOcP28y4h.DWEfmC3nh2uOOWBs1wW2wadIz_Q;
        _cfuvid=6mUrlo6cvb9k1f8lEBi6gxr_WQfI3bszevMStBmLANI-1722344794520-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFLfa9swEH73XyHuOS6245LEb2WMjS1roaz0oSlGlc+2NllSpNNICPnf
        i+00TsP0II779P3gToeIMZAVFAxEy0l0VsWrbbNtw/3jmkRm1G798zvK512aflv+zgLMeoZ5+4OC
        Plg3wnRWIUmjR1g45IS9arrIsnmeL1a3A9CZClVPayzFuYk7qWWcJVkeJ4s4XZ7YrZECPRTsJWKM
        scNw9zl1hTsoWDL76HToPW8QivMjxsAZ1XeAey89cU0wm0BhNKHuo+ug1AVAxqhScKUm4/EcLupp
        WFyp8k6st+3uh50/5f+Sx4en6tfd1y8hkRd+o/TeDoHqoMV5SBf4uV9cmTEGmncD9yGQDXTFZAy4
        a0KHmvrUcNiAdVjJQW0DxQZabu1+A0f4xDtG/6tfT9XxPF5lGuvMm7+aFtRSS9+WDrkfUoMnY0eL
        Xu51WGP4tBmwznSWSjJ/UfeCq+UoB9PnmcDbE0aGuJraaTKPTvnA7z1hV9ZSN+isk8NOobZlUifz
        Kq8TRIiO0TsAAAD//wMAv3iQ/+ECAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab5911d1e3822c2-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 13:06:36 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '191'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149998978'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_735a7a4e53b7eae6e9a73fe3bbdec32d
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text."},
      {"role": "user", "content": "Examples:\n\n\n\nNow recognize:\n\nText: I am angry"}],
      "model": "gpt-4o-mini", "max_tokens": 1000, "seed": 47, "temperature": 0.0,
      "tool_choice": {"type": "function", "function": {"name": "Output"}}, "tools":
      [{"type": "function", "function": {"name": "Output", "description": "Correctly
      extracted `Output` with all the required parameters with correct types", "parameters":
      {"$defs": {"Labels": {"enum": ["happy", "sad", "angry", "neutral"], "title":
      "Labels", "type": "string"}}, "properties": {"prediction": {"allOf": [{"$ref":
      "#/$defs/Labels"}], "description": "The classification label"}}, "required":
      ["prediction"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '753'
      content-type:
      - application/json
      cookie:
      - __cf_bm=o_atXp3IKQGg72hBP8X6QFIN_n4Lknz2wIi_QePY4ts-1722344794-1.0.1.1-phgGbDwjotWAlRo5sTjgu.DRwBpSFjmPabZZ_qEnL4T55ADI5FOcP28y4h.DWEfmC3nh2uOOWBs1wW2wadIz_Q;
        _cfuvid=6mUrlo6cvb9k1f8lEBi6gxr_WQfI3bszevMStBmLANI-1722344794520-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFLfa9swEH73XyHuOR62Y5LGb2NbaKHQh9KNsRSjymdbmSyp0hliQv73
        ITuN0zA9iOM+fT+40zFiDGQFBQPRchKdVfHmvXmXv+Rw+Lm36fZZf19t+5e23/z+um2fYBEY5m2P
        gj5YX4TprEKSRk+wcMgJg2q6zrJlnq83qxHoTIUq0BpLcW7iTmoZZ0mWx8k6Tu/O7NZIgR4K9idi
        jLHjeIecusIDFCxZfHQ69J43CMXlEWPgjAod4N5LT1wTLGZQGE2oQ3TdK3UFkDGqFFyp2Xg6x6t6
        HhZXqsxWXP5oH+7toPZye1h/Wz6+DFmTXvlN0oMdA9W9FpchXeGXfnFjxhho3o3cp55sTzdMxoC7
        pu9QU0gNxx1Yh5Uc1XZQ7IDrxg07OMEn3in6X/16rk6X8SrTWGfe/M20oJZa+rZ0yP2YGjwZO1kE
        uddxjf2nzYB1prNUkvmLOghu7iY5mD/PDK7OGBniam6nSR6d84EfPGFX1lI36KyT406htmVSJ8sq
        rxNEiE7RPwAAAP//AwCbBvfL4QIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab59120295e22c2-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 13:06:36 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '225'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149998978'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_6f8a4f9a7a2201fd0e5af32f950581c4
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Recognize emotions from text."},
      {"role": "user", "content": "Examples:\n\n\n\nNow recognize:\n\nText: I am sad"}],
      "model": "gpt-4o-mini", "max_tokens": 1000, "seed": 47, "temperature": 0.0,
      "tool_choice": {"type": "function", "function": {"name": "Output"}}, "tools":
      [{"type": "function", "function": {"name": "Output", "description": "Correctly
      extracted `Output` with all the required parameters with correct types", "parameters":
      {"$defs": {"Labels": {"enum": ["happy", "sad", "angry", "neutral"], "title":
      "Labels", "type": "string"}}, "properties": {"prediction": {"allOf": [{"$ref":
      "#/$defs/Labels"}], "description": "The classification label"}}, "required":
      ["prediction"], "type": "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '751'
      content-type:
      - application/json
      cookie:
      - __cf_bm=o_atXp3IKQGg72hBP8X6QFIN_n4Lknz2wIi_QePY4ts-1722344794-1.0.1.1-phgGbDwjotWAlRo5sTjgu.DRwBpSFjmPabZZ_qEnL4T55ADI5FOcP28y4h.DWEfmC3nh2uOOWBs1wW2wadIz_Q;
        _cfuvid=6mUrlo6cvb9k1f8lEBi6gxr_WQfI3bszevMStBmLANI-1722344794520-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//bFLbauMwEH33V4h5jpc4dZ3YjwvL0qWhXTaUpk0xsqw4anWLNIZmQ/69
        yE7jNFQPYpijc2FG+4gQEDUUBNiGIlNWxvm22Yr54ucj+/2wFbP7GX8T2f8ndf3n5nYBo8Aw1Stn
        +Mn6wYyykqMwuoeZ4xR5UE2mk8lVmk7zrAOUqbkMtMZinJpYCS3iyXiSxuNpnMyO7I0RjHsoyHNE
        CCH77g45dc3foSDj0WdHce9pw6E4PSIEnJGhA9R74ZFqhNEAMqOR6xBdt1KeAWiMLBmVcjDuz/6s
        HoZFpSx9nYrqXyPnN/liKXfvi19//XLu5JlfL72zXaB1q9lpSGf4qV9cmBECmqqOe9eibfGCSQhQ
        17SKawypYb8C63gtOrUVFCvwtF7BAb6wDtF39cuxOpyGK01jnan8xaxgLbTwm9Jx6rvM4NHY3iLI
        vXRLbL/sBawzymKJ5o3rIJjPejkYvs4AXh8xNEjl0E7GV9ExH/idR67KtdANd9aJbqOwtmWWJFWW
        Taskh+gQfQAAAP//AwAFJK693wIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab591235ce622c2-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 13:06:37 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '322'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149998980'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_124d56f2dd0bd6eafd57f819a20d6e63
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Text: I am happy", "Text: I am angry", "Text: I am sad"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '133'
      content-type:
      - application/json
      cookie:
      - __cf_bm=9vQb2SGKB2hIYVZkmz_1I.WSVRZE82NmWNDGw75y.jM-1722344795-1.0.1.1-N7pDdK8RjKWr2bL2UiVjWEtmYFLahjc2jlMdqv5VWaB.b4XtgN67eyCtI3zh7NQS2M5gjAZ6585Way61Crd.eQ;
        _cfuvid=0DsiKSluQLBu5ArXMAuPx25vAq.d7FcmYN4oxiywSNw-1722344795554-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1SZXc+CTLOlz/evePKcOomCSBfvGYIon90IqDhHooiAyGc30PvPT/TemcmcGIPE
        SHXVqrUu//u//vnn3zop0vvw73/++fed98O//+t77XEbbv/+55///V///PPPP//9e/3/7kyrJH08
        8k/2u/33Yf55pNO///ln9X+v/L+b/vPPv85Ba9iOnA00e7qVIZnve2afecm7mEk9iCZ+M3UTHsNe
        N2IZtWF3wuyVasUkeCSGY3pdsANUsTOWbqwi/fV44hdIGl8l+cJFlr+9EW21GtHEndUC2UtXIESq
        ziGlCdJQqLxqtl+yHs0LQTI3z6EOmJ68D3yckN3CwtFHss2372Rada4N94uByeH5GTqOg+YM2vQ6
        MtN/CgmF2M7grbYrvKRsWfTGe84gb7cKcbXMRxNrVVHh79MJB3Nf8Gm71jVAzudJ4RjbqJetpIfm
        YO7JQzHOaMSFTMG7kJ6ut73F++1JWsFWyQVipucOTc4Fp4hghOi8ltZOrxqZBpFxuRPj5a35cBBu
        ZzDNY0yFuxsVk3A9zuhBbYKXUrJPJoa4i+i731LR37gOjYN+IYsf0SVm/4CktythBV2SnPG8alQ0
        KJcjwEc11+yIQ0lvimk5gukbLlHP+U3vvfAlIzKIOXFwqSGxRlmqaMdNi0UMTJ/PmS9BfLmZhPhN
        x+vtaVyBs0h1ovZeGc7O4bKDohTfTFXPmd7YgoORoUYRs0JdDz+dcj/DLFwPmG/ZwOcme/ZIWezO
        xDE2z2705s0eDpmwIFrPDs54Mp4UMmVzIFaoF+Hg8qYG6ZklDD9VuZueW++MqF2odM7GohgDbV6B
        yw5HOlp3z+HyQe2V/taWTItUsZtc8dRCIEwfurBVzhmSbB+ag72norjZdH04qTdQH0uVkPUtR3xh
        vUs4CsKVmYsrdP2wMGZkPmOHpDP98F7+xCmsBuOMx/i5dlrxyrGMAzX69qPLR1sADKEr3YhzGrjD
        j4IIkOZ2R0g+3nV6ncAEV0QGfu0xDcfd576D3WqWmWpc9JB/RtxC4c8x0YXMQVM27yUYaL0kx/01
        DXt07XO0u7dP5p3CezgvDm2J4ktskiNVTSQe3i2AfeEJM2tP63qelBGggsm4GbUBTW+oK9Aa9cHO
        mUQKrgmNCnQzYkKmx16f0ceUITJOd6JuwimZZOfcw9tXEuKFDkn6JBddKK/kigE/Vwkner5Y2rqG
        maqlPeoBsV4W+qgkydDJ+tinixI5qXjHsz9lDm8cMwJh0Eumq3wVzmDtbHRYeQ6WnsE75M1dprDb
        Gns6HyWr4JKTBmAlJcfiZh6dsVuyCB147uBv/+uT2LQleJUQkp3gFN1QTMsZncZdgGH3GPjshE0K
        WfuSiUM/YTFJV7tF3/MjQaBvioy1GxG6ObOJCUeCan9bx1DBrmG347zt+KppbfCV2+WrF6dkTl6R
        i7RRPJJdb6sh65R7BNh2M7rx9vtiLAd1VsyPvMTzddZD3rJljuZY3BOnyi2+PsSfCg7rxYSng/3h
        vXCzZ9TE1kDlBwjOHI3SCgWGeaUCtySdavEjQIKpXJje9FLIZQvopklwiOXv7/vqnw16JKXE1OKS
        j/T2UqFfe29iqNjreBwxkD+9tiZq6x/C+UEnDfo8jem4CY8JN3dbF6SloDHsbuxE8PQ5Q+wlNcQy
        jSIc1Ep20VcvsCTdl5zqNd0jr1qHuOpEUoxn/g6gT282sefJ4aMAxgLtM3ckdrKqdfrIqxp9+4M4
        4ssLR/cdBfJLaCzm5boVjs392EMdOQFFSqsUw+P4DmCdhZgdpgI7/DUtz2ghFjHbHcOcT+KtdMG3
        aEGbCrJuRhIP5ObZbjD61ncAS7GhZ9eJ7JJsE7LXtD6Dnz5GZrfrwJkP57ICKVxqxF1FszNr4k0F
        o3Eo7vFzFQ4NSc9ymUUeie168d0HcgbT0BlUGI0JjXHhRWiZX6/MI3ujm639robxKK7Zluy23Tg9
        PBmWwlgR/NULdvGbHMWfntFpj2kyNW4bwQ78PbFEW+56XMw9bI04IdpRagr+SeoAMtl5ES2XxnD+
        7ju4uO+M2ZMwJ8Ph8qhQMe2WVNTN75tI6tElkTN2cAo1HBzjvkMnZdtRcRqqZCqPREMgnk8Md+On
        40p7PsPe3J8IcVcJah5ZV6OPdDwS62WHiPPrMUKCd1XIfsHDZLoRNVbw7XUgR0HOi3m5tzRoDsIe
        N8LSLqbZS3OIVlVLDuo4Jv13PuXPodbZVt2/Cj70EMNHXa/xnGqK3gv3xYikMmwI9heRM1gnUNHh
        vhvZPfN3fF5IvY1+eqOtpbU+xM8sgu1reWeW6fOEfu5HH2YhORCH3vViTkcnRdZF8Ohsy03YLyy3
        Qrbz2hL1cWpDns44lVGb7dnFmHg3vY5nE0xXW5AtdWLOi/Exw0sxT7iU3T2aCs+sUPqWj+Rgz2de
        esKwg9cmZnS1Iq0++vnV/tOL4D3tEU/mR4mGj8NxMSW5/tvv4GPHIlpH9WKsFe0O8vJi/PpZH3y9
        i4F5q4RZz0WWfPsZK6sdANNvDQ4HXXilEHiNy7a3ICn64/wC+M1T+Hxui3XoSy0iRm8ST4CqYNVj
        u4LVlpyxvJHvTv/cimcQy6lipnR/onG0rT0YK9XETUTOnL881ZSzRpTJHgNzGKP7FXSHi0W5eDfC
        eUo6CdrYQMySDpeOi7VZQrlNKuJ9dn0xLPeyiqIsezBfvt34JNS+rXz3DZZjNHFuCvYou6Jr4NGO
        q4JxD8PP7+CFttYLwdh8JEBtvqfKZ+d2/EXARIuFVhJnkRwcvo8aG777mxjRoUU0GYMKSa6FmXEN
        U2fq2XIhT9dKIp5lmWj4POwAFs52ZCZ38q6d2jwAV8uOzPffStKIt96Fa+FemBlfmT7N/ZuCTZYf
        ulQFKezzZwfKUN050cvsrY99py5gFZ+tv/7pjXUvwxDEFTuut70z+0dpBk3w1+xwaKqCqZtFia4r
        b/Gbr4LGRFrAY8YPXGtFxOfOc2YURhT/6llMqiCVcBgfbzx2l5FzMEMTkuqusgtt1wWNy2ckry/z
        7bs/imRu+nwPlXUQiLZqVM7dt+Cjcnd3Wey+UVHxxuyBG4zijW8P+rxGi9vG+tgelqvZDMf1Woqh
        nC4ruipIofN99LJhfzdzduLyq5g2Bz9Q6JtumQNxqY/m/o7hflutvv4Ckml0dzsovKtNdE4XiHua
        n2+qmN2Zq50yNAWatULTnnTM7nhX9Kl+kaGqtTuzHKvpZlJd7F89aNmfxmSyQlNFTOxEiqCI9OGy
        whS+34ehJ3XI+d2L0O6VDHSdZ6XT704NhWXrucS47Q4dH5A8Q935BlHXTpn8+a3bWXKwNIWsmPrk
        WCEmgMgMBerwb96rpUiwKG6u3Z+/SIrkRrRYbNDw9PX+N+9Mh7R3vnkml5kWanjKt0Yy114gA3Le
        T+bwWuRzll8yCMZ2S/Cb23ytb1j6lwfGSxoW4+mY78CV646YA37/1QsF0aiS+/mK9Wkv7SOAg3HA
        S5PNzjTbeQYfXXqweO334XzTDBUa9SQzjy+t4qcnsrO0dLwBxUajbroSahPzRTxRUnVW4KCC2xrP
        zNsS5ozDwps3gbD7MCsIrnxOl5YIThjqzOGPCo3dbTRhOcBMp/11kYz1Ukzhw8Y/P9jNLcwSOAfW
        0JYPRijoh0SSr0i1yaFpVkn7oXqNhirl+FVjcKYShxrI4dOgXCrnhLlvxf973qskvfRxs9FW8qWg
        EUbP0irGnXU5w/G1cxlmwpTwOPosoD7IErHGxSEcvV3xrW+9JY9m23T09/u/ekHM68ksend1a9EG
        nVtmiIva6U9a16N8iwraNUmWjEpsA9rwdYrXUTMU1XvRlXCq/ZThu3IpqHXS1Y1CU0bcS3bp5ix/
        Zj99wSyYpO6vH9++n+CqZZX+eU3LCH31k0TugxW8cdRI+eo3DWzriSYR3RdyZuUh+eqLw4xdfIZv
        PqVTrfdOM9ttBlgbor/6T4QHuWKSsSQquAc+D06LYXn7vMnXPxTvGq4p6G9iMPWnr+HrqsIjKEW6
        XqSdPvO7GMHnsmgxmrLWmWF9pevxjXa4YKnhfPenCWE9J1iqklMxM0XEv+dh+oehcH5nVEQTLAym
        O1UZTgfhFoF4D2YKu4eHeAtbGeqaPNk+Xgic10qR/vwlc5cHzentcrsC9Ug/bO9ven2sFqUGo63r
        xFCclE+TfG3lnx7qTR+HjCkGhuF5WeI6eQjJeC6pBJcoiehmeyj0/pN9fNhua4Hsll7r8JQF9829
        uNR0Xectn2Zp3CuRKovMck+KQ6dNXYPEq+arhxmaheQ+o2f77rFk12nHc+ac0U7KMwykUlCfMLVC
        74htmWERH02bQxwAOQ8MS3H5dKZk0kuUVp8jw0fZKzpGsYhG/GwwbMt1yHWRp2i5yV1mWDuV83Zw
        sl9ep4JzeRQ8DPsWrmiwmVHucTJd1KsJ9hIJ+HOr7GQG2egB9rcD1i/jGrEnbvqN/5hHstu2y5Dd
        j6UoX9l9ZOr5Yuszs80a7jdxhZlyt7pJe/ut8vXHRN+/t3p/I1P887P4c36pnUjmJoOeJRMWW1nU
        v/kMI39hXJhWLK9oMj5CDrfQfhO9qic0rC8SBnuJhR9/0On48FJZvCszfrMdTXre5hSeE81okbw/
        nD+CdYDSzSKlCOKdM9mVKyLzeXMo2reNPqRUTZVsvlDmRFXT8fjIAQ2LoKJ8SjRnbpdURok+cSpN
        IenWR0FcwFN7Bkxz98D7GoMEz/ma0XnuC0TjVxEpSBYHXJHDUx/z/LJAeiSnjDxf765xLvsUxM/K
        ZfZ6Zk7z9evAtqXGnFOu6wL1hlZe5skVi4V6D6csu+eICQsRL2+ZlkzHVQ/ovBOedHnL8rAPDLpC
        XQUj0+Rp6KawNFRQ7FtOV+vQD3nCmko2+k1E9Pbx4nP2LDL0nb8v71D1MaWbFO7aecu09XDQx92+
        OEMd3gMW705bPt0XdYwU55Djz/PjdaN3eGZ/+dI6HxrUEMMFUOw4/+7fnT4pze4Mn8jbMYzFj8Np
        YquyezvvcFUqm2R+Lb58STRDGvmXJpwGmt5gmDWPbUfzhLhdtitE2j1gcV4u0dePn9HpTaRvnoyd
        SXbSHj581bEthTzpmvvcQxoUO6JdhCqkyjkD5bo7jqQtmZGsnljtQR0CleyTda+Pyk1coL2kFn/5
        YHROTipfL7WCub6Wiz6nbbQ5Q7DB7ZcHUn013kGdzphpJ4UnfLzWqex7qcW2X16x/qSRLxfTfsl2
        u+KEJmpPLbze55w4Hr9+9Sk4wzcfE1W/VeFYur6KPtkzZXjZlGg+5lYJfkAudHmvWfLHw5yloxNr
        9B7o7elyBs/tGDAr2lV8FDdXgHoZBcRiWzsRtCsO0OI1OuQhqJ7zO2+4sMXADn5Z8OGUdym86x0m
        B7/UuZA8ry5Em63PyKdiYSf1BxXcW7TDPHptO9Eqrdsfb1qbwk2ft+YuRefysSde4l+deQVGBtu3
        pjEP264zt52Zobr2nmz/0J/FQMq7DUo7WMRQwAx5R/AMpWG57JDkBa8//aZFSqtZeNkUfdju3vIe
        6nEbYul6qgtept0NLNao+HXam4l4LnYSssVe++2XjuMypPJ3XvHyleYdv/ivDK5P22KeYoic124j
        wSM8it88yDm/bAsbvEWzp6m+GJwv/7pDdL8T8vzyWB4JTET3tLyxrRGs0Ld+JXz7h5FbFyRzea/j
        H99g+jcf/fiJnHmwwZ8v/2VaJAXom6eYpZ433fA6prYcR6fvPBSR8/VLZ5jedkCc8u3p7TmLZaD7
        /Y3t2dgk9OSbO+iweGJ4zTp9VD+FC0CzF9nJboVGnpRnOI08IHbbaw4fr9kdHkEl0uWdP8PfPKBz
        AsHv+dGXB+dQlKs3MQrDRjQ0Lj4kcu5984XWTQ/War88xHb8KhbM5g0GvE9l5nbXiE/4vDzLXx7H
        Lou0c3iwOt1g3IcP4gXkhGYZMR+55NkSaxuEehNPAf3je659sztp8HYuTFZwxMvx1XetFj98FId1
        /u33HR+1attC3QUG5kMV6MxZs1rij9eL2UwSkpm6qxrma7Gnynn35pNayRjsGe7kVx/u57IJWJEj
        XHzz5JSxQFIsyVox+yLTkNo1WaF1//qQQ57t9NWiTmZIFgtOuXIzOjEs7qrMNv2dioao6cNK1jI4
        RfhIx9neOtN7TF00LPyKrml7KfjNv8UQvLTbH8+YaqxLEAwBp4oRxXy8jq0JDBcJXVlXy/nzs1+/
        Rkj7fKMpXcoiOvu3Db0kQ8gnM2pK6Pa1xfSgLIvxy2Pls3vuiHadi5C9PNOGr14Sl4e4m8rHMQbc
        rA5U7Neh8+XHEfSFEzM3Om5D/syiPar9pGem/aBFn9LpLm/fqkYVD89F9/VDioRud6zsjTwcf/la
        gM6hL83aFQJq3zLInyLAYjlbSYaufQb7p2QSEhVGN+KK9siV2w6v5sDTReV6X8D2gTFzvn6YhXmh
        QuWaCfEE1dNpnm4BtO1Hp/c0/KB+6nc+3ELzTeUvv2I/f/b1Xzj75msuf6Y7RMNDJEQVpKR+q0YN
        pwgd2fasvXjfPL0enaLNkZjtiYS8U6IIvv6ZrqUXTebvecJ5LYZ4zF+PQuiTa7mBPDCZWqa3YkpU
        TYPH4i4ysw/6ZP2mKwyiz65U6h8Qzsl4K9FGRz7ejJqHxpdS97B4zQ5e36ZbyJfmTgMcaBE7rPo0
        4e5ZlNDp7UkEk1ntxmLL3M3PT+TLT4bmcxZLsEFRy26+aOpTcDRdSNLaZVfLdfnINiNGG7bzWdoD
        0qc4fPzP/xtuEXUOXZumiJ6isyemHM2I7842hS//wVnvlQk1jO0ZPNEOMXr1Ysd+/rZ72oC5sbp0
        fH21MdSf7InXd3pJ5lMA+z/9d6+PqGPoZuSgbmOVHeFwTXi19DQozEVJ3K9fHG2uuuCRq/TTN533
        9LQAZc4UYiE4JH20PQZwI7sLeyBzw7/1USE7zcOXb/v612/e4csXiWdEEu9PWX1H7LYXiMEtyeF7
        sYygZS79H36UzViG2C0oc5yuD3mSdRhxc4yYP58mZ9yYVgDj4rrGlbvSwtHf3WPUi/mb2V9eM75I
        YqLKdxuCG2nV/foFMgUfiBUEGzS+0mMO3/1EJ9EICupGXJL3xeJMPMF5OH/6EkSzynS1LhPR1v1a
        +eYLuvSbDo2rZmvDIo0VFqSa4vRpzvYQlUuduf59Sr48zQTulyY53Ko27BmUGDYf/8Eccz471WZd
        i4i95AZLa79P+jDXVEWdIky2CT45FNbXHujCXZGdVW6cfh037i9fMJdUCueoceTfef7tz6HGjgwv
        2WB0Ha2UYrrPqQbHqxLT6iyaaDrmc6lUtXonv/5nGzMPlBjNQAdmncOZttMN3EuYUvapSPjjj/DK
        j4Bf0qLRpy9/BbqfbnQRSwOfZDOnKN9uCsqT9wdN90V2U4KXeiP/BwAA//+cmsvSgjwShu9ltkwV
        AkraJXKWQ6KAiDvwgKCIgkkIVXPvU37/dlazZEEVad48/fbhvG/1+eO8omYl4t3Itm87btXrZq2D
        NvcVsVfVpWLjcAf41fPElAVH/TFZ1DDcfGAxWrUVn95FAiJORqrnJqq+uVjs1stBKL/+WD+LTpYM
        JJuzoEVUDgMN0/cZfeYECPnll0H2IwP9+nXMXapqK/Sc22vJ1B50+ZuPfnCzo2s/VQWx+507LBKn
        U+Fp9Itf/7Vtf/X5AlCwvFFdE8zif/x5js2C4PNaa6d31OSApC7F8Mtvs69JAp0p3hDjVnxTcZcE
        Xf/Vp/mfPp2+q9F03VyJe9wUaBjpBZDjax6JL7EaCt/rIriuqU2c1PVS9jcf+tWrJNiLTcvDg3UF
        M4MdSV+PoRJXbp11oh5yzOUdtfo0tT5QjOGBzkodzuO+bTvYPbsH1nfOdRAaUn//d38lTrOd0ncb
        Gx30M1+RSxYJRH9+aq1VtfGPn2KhJVz49Q8pSrlq0Sf7RkjJ6ongVo2R+Mo3jhZFtiV+fk5C0RKr
        A6qynkXR0RvUJ3timPmSMaNNXtb3q9ccvGE8EuNTaanYPjYFqI+5o1eyOVoibyNd/82TWfzjh/Ce
        HwnqIE6pfH+LgWvbzwKdq/uCOedoMUz0/DDQqV0dSZhyNZy0FSpQyUqJPk5FNHxQKdUwhC5j24NR
        V6Oc30uouquBX+pjnypvcs3QaKoTw2SjWdQ9lAH8628r4D///j82CpT/vVEQmGPGcuNLwmn/4iUE
        RXmi6LGpw29yffgw9KnHtg0LU6odS0Ddff5SyR/faFiK0YezrfqMdOkUfvDY6pBezpQEYNupcg5p
        AdmltIn7Iu9KxOUNo/epexI81Y7FWvbpUfRyEYXBuQx8b5Wgxwdks+j1oW3v9SOGXsuvJMxWn1Ds
        vJULjSxmvLyttYr7fq+iRegc2AZp24HXrr6E+u4mVFsmvxtBXg1i4TUgnqReK26plMKl3uaYn5vr
        QKtV4cJ9bx2YcfJYO6ta9YCJLSay8fIonLru4kLsYx/z5/rRDoddA5B4WkrcOzmGMz+XO1RevRtd
        7qUs7avdXkADmUKi07oMB1TdMZx2F4y54igzs/f6FZz8puHrG+/RvDpGBVzN04UEru9UU5NlGJlH
        NSF2XDbVR3t3Z7C7ZoGfw3IbzoHsnwF5IWYeiRyLaZRkINJ4Jpadx61QjE+PGNVCYrFArabUikq4
        NXuVakbetJNa3wH2ZhSSkz0l85iOV45KfnxhTTWoJeLe2IF0mYEFeHxZYm2/TdijdM9s7TgM30/Q
        0HXEvAnr1/VgTba/HOGSnEvMiT9W03S+CXRTRo+Ez4BaoyOzAHbWiWF+GI1BnNdoBB17CzorNBiU
        g/fGQL8c0flsPlM+afMZ1MhGWC46aKmFogV6I3Vk/t7LkBBznMPyGldYJOPFEkTij3VNZJsCVnw0
        ncOuBONx78m2yrSB8znvYY1ahW2H9BuOpLzo+pdYZxI3rK74dFR1NNnXF1UtlaWju0e6Pl26DxZs
        Vq15F50kmJ1zTIL8tK2mlPMF+rjeh8pIViu2Smq+3pbCY9tLV7Tisnid0fDyY1ZY36ad2tCTUGss
        NyTfqJdQPBdBBDJd3MjNi4Lq2XUHG12re82cNvOqb/Z6dLoOyx259tBWIm/0At5s92HmQTFTXp/c
        ApxDtibOcvuthK5ZFLxyVbF9HSaW+MUL8tHtyMZCy5SSfRTAS6g7Eg6BUant5bQEv5WU3/fnKR/P
        ug9uIxN6cHKKuGSYuvxelpSZ7cKpeB+sdnCsHwohZt+385S6hu7Ij5hF9Z1WzLMk/qc/tj1fgpY7
        lRFAHRYR8ePxOVP5tpCgSbwnltWHEr5vWW/CvsowCcrhiETUtmfUSdmGRCvbacV7mUYgGd4Gw/60
        rL6p1FN96XgFRWb+tKZoX1KAp/7Fy6LpW5G93upqMW8aktKNn9Ji9aGIX94ZMd1vlArj23M0lI+Q
        7a/hbeCTM5Rw2C9TdomuQTjH0uIDttxrJIJbNvBXdzJgY0Ya8ZaPdducrqYEhrm/Y84KZ+YMq1e0
        fqoWiZnWznMZMooiPxF0UZ2eqbD3a4w2aWbjx8t9DXNixSPKWjcgGMUZ4vIbU+iL5oDXCf/Ms2Ff
        MLpfnjmxnFvVfgW+u+soUxckrMJgni/ZPdd3jxpIdBqGQbxYyZF2YjFGwmgtIamT/esz3lmobNvh
        G0brJQw82TNnY9eVcEul17969cK66zvpK7TGAPk4YVg2dc36HhslAG8zF1hRtDEVju3ksDtKOsGf
        ozzz26ILUH+wjyTuqTSPZuI2/zxH8/uWilWdFuiRt1uGLwTScfnc1uDQi0Hlz9NOxb17AJpfNGMb
        ZAQht4Tlgr1TGYs9vbeEdkwA9kd9h1fk0KHv4rkv4XQwTljeXoeKHQ64A3nlXIhhJO+ZX9d6CXrL
        Y7wgo1RNPx7BZmVuid/P48AfBeKwStgHC1mELU+jtAD1Pm1I8r4f0uEYohqk5uAzi278aiE+4QNl
        EMXMEXSYhz+eV59OY0a3sMOpNJ8SdJk7ka3XP1oRWbWLkgJqsnlcnhW3fXTWv8qC4SWDCE0Gqgp0
        OpgnPO8OUkq3faJD2fQDMX78F6XnqhDPXcpwua7D8XkpOuhJucfrX3zFaVe5cLmZFdvC1w6/DPoA
        CeWm01e3LEK+kyQXQi9qmPXj5++8Qpc+2Z4QwkersePTAyxhdmS7f3mInoc6gg3THeLj9lmNn+KQ
        Qbw9mCRNI24N8uOwQAdOz1TdK6JtXuSK4cczsk1fSkXpfANkXwr+j9658tY4LJ55R/wV2llzMXAb
        idI2yYFYbTrvXtMIExQzKw1ZtJ3quAnMvYaJ497u7STn/AzJxyvpdHo1w/TTK/rT58qdnhbdiKjU
        d+teJtvFtkmn96zn6CWfJBZXWdQKTz4sUOgfz8z1fRMph9VqBxxlLfGyV9fyevW7r5vgRedH9wqn
        TVwH0JNiT2xDrdAQR+MDbPK9Y34cqTXVF5agv/dvMV+hKVb0pY7S7444faDNHN5lA/3BPZKNnBTt
        dDjBCJDNNVWGzXsYq92er4eUAeV5W1v/8HadUZVt+yCa2XkXNXAYzJwYmbKx6O3yqCHiWCb+2ubt
        PENoopYrNrHGdJtO2eFkw2b92tD1mdFweKWyjU67G6ZwWpfW2DaGuXYPu5TqcvxoxZ++hoE5ZLMy
        NDSYKLBhjNcRVhRjnDm/Wz7UenQgIdd4JbxvkIHM5BPZ4KkKGbH2DexWtsf2sXW25nxFBbiHJCXe
        +rtLuWQES+ju0/fHq2AW5wvP4NL7N4L1XElFwhc6eKPZs822/1rfO5sBzmUdk4g5ZsX3SmvALz8T
        35Ini2nbOoczxynD14KE43jWA6ixGhDrEs7Vw8t3FJwIr3D9dp/hpCW6u3TeS58l90Uacqfnxtqf
        3hNdynYzC+9WXsEUzo6Z+ruYx1D/2mv/WM7EzKQGPX/+DWnslBByCONBnBraQeIpKTu2l3fI81fd
        rB/rvKKZq+JwjqPHA7h937NNEz5SKt9AgrlXMLOV4yn98daFwlT/tkie80j05AyBHBfMXRxja5qO
        4KPoIFOG97uwnVKpprC/IZfeW9NCi6VYlfD87q/ETZUH+pj2yUf+sjGYGZVQ1fkKDBBVBFTFpdWq
        heRmKBs8A0+/fD7cl+sREWe+0Ad6l1avOIWA285izKkvh3a+LEYKt7GzmP25q+2oo5UKcXJxmSep
        UiWIdd6hc7xe/vylWal+q9roqPgGK5aiCb8/P4d+/o655+GQCu1YSlA1jw3zPX8aBNSGQEpoDHgu
        Xy2altvvAsnJ7orHvBlC2hWfKyyvpMJ86+sWmwxRo7usXfBpWe3QPOFPCUkh1WSDtPfwfWbb7k+P
        GI6nz8A99ezCTum3xLqaYuav4iXp9yZo8Olg5vPP3xUgIN9itf980IcfVyX84k22xu1RjZrxznXc
        3nNG7oFUMSNxXJQ07gN3lsoqIW3tD6JP/l8AAAD//6R9S++CTLPn/v0UJ2dL3oiIdHF23EXAbhUv
        mEwmgqigiFy6GzqZ7z7B/zMns5jdbI0idlfV71LV6DKjkGfx+G3KA1rfDzNi5uGsHBF6FPAV8xKX
        Uz6O7+p6gB3mEVtN8TK2zAhQ8C3jX/62/bTf8EmqGfHX17GtvZ1Q4fJ8pSy56d+pXs44xIu+Yx4p
        d+XER5sfP2X41EZIqNQv4O1ldxKad7cUl4OQQD90CvNuch3yT/L0wWPllrllNRfizvQ96sfrwHxp
        I7XiaAkPzK+psE0VsFQgw8xRd3cu7MjppR2kF/OR1Jx2dPNUDaEs1qUHeL1NiHdYxWU/nGUfkhjW
        zFdHK1QK71n97g+LRl2JsWrmgGDlvEjyIIH4jAuKl4V87ki4/3zt7qXyE9ytg2Cmf9dSEQ7bSn/P
        9zX56anB371PiCz9gcSHz65lSe5jlMeP5senYzYuaITUS1My77ASZe8puwNEbzCZ69xZ2mxXC1Xb
        eYPNjPtlm3L5nfkguJyw0Kg9e3AHufiLN/2pPtBPj2k7++gyd3d8xT+81pUe+1Ryy288rU8G1is5
        kNOAu3KQxm2kw8zgzL+0p1ZIs3mF7nFuTHwiagfzLhrQvvcZhR8/DJV1BhO+U2W94+i3XzqH2+2n
        B20R7DILyDIYCOZft+0EbPf68XQL2aQ34i6sLy94ZKVHf/yNcyoMgMPwwGd3mIXtAvEEkGcc8Hyt
        bVthKv0WlutPhavPcyGYt7ENdC9ihS43R7nk6/slWMYL1jE7spkYq2B8gVIdIhYmh0soxFqT4N69
        bHbhlP70YQOnOW7owqvLdLzrTEUSt87MeBRlPMar9xbZ9zEn/uL8KEd+Hq5IfLoDW2WHWvSx7Vzh
        tIeSrPi7Q6PmoBqWuT8w50WOghtr7KG9vU/pOxh4KIowyJGGXZm2ldmXg254ElwW2wfbxNYy7Sc8
        RegenIlDxVq8rdE4waQHWGDNXmiQnHIESWRHEo5GGQrvnhfox5/MQ/RMxdy1J/zyVsx4yDvEz9JW
        gUglc0as2m8HcySB9uibmCKUOjGXH7yAqZ6wkNHCHlUabmHSy2zS21N8rHO4e8uWuFG0a8XjcHvA
        2J0V2hVPhDq/J/IP/5n7YjUS62gWaY+nsyfhyUrsgZm28uN/E3448bxmtwfMV6+emEN8bHkcpVcI
        7AUmq0d1Tsf7xVDB7m9XYluoCzmnyIB+GzRTfbUFLwg6oYO8ccgU7yFNL+kDueyjEcL3h1SA03uQ
        bJ8qvuqbffoxX5cRdQ9ywFCLZ8mPtn9A2XDckI1dy2LYdwcLXJ8jqq+P37bZdbs9Stt+YIGtvFJ2
        3DbST5+yVN7PUhEeFzWKZo5DbD2NBNUdpqDmEy2wUiVrtLhskxPq46pmm0dws/tV/cz0cnNnmKHZ
        KWXVzT7oC7+Kyeq6/MRjNJckVPVYpgru9qHY8TGAODo+p/00U5a03INJ77FAQ0MsFkhNQOSvLTEP
        OROiVpMcpYg6tN50b8QXxvegbdr3muHaLRFF6HPQkkcRMvdd1Sn37iWHqR7++Mg0wZ09YPKb/vR/
        rxtYQpub9tOzOO4yefmn95izne9iHkWDApDxL9sdPzfBJvzV9k56pOG4sFrBFpoBH5IjOusWbjym
        y63z8yNYOBpS+rdesLA/VKOuGc5bGPkvf6gqbfKWd8/bCEs1sSia4kdstIsF/XP3YgE/FyGPtzMD
        KaOKyS/e+TnyRzS9n61XtVP2pQoJdMPpifs9DxA/XhYZjPObRoLDZWHXNAm6v3h+3VuBeO8qBjzR
        /o1nN0Zikepc+vE7Eri7Nxpu3KsgK+sd2XS0LEe0TnJYsbyi43nOBFvZCodd/zoyrDkVGl+ksZaN
        enKY/TjEaFHcboAgG79stYn2aCi87rRMvi0i9jkv48++DPZ/+bB+m10sitDKIa6qkXnBNUeDNRoH
        feJrjMzTTzitn4wmv47YtXosJ/5rADdXMf449c4WH7N9QenmS9qgzQyJ0zwMYCnPBmJh3wgH3fAD
        mPKBGZN+H/zZZYSvf08oG/deqRylqw+to3kYxXxh95QuHFC+PJjyWQ1HV7ldkXIRC7xLl3nJ0+2F
        a7kuPnhoq3fb5B5EgM2YsIg/bDTg2rZAw86K/fy3Ds4bBf3wYT3Shxj0Dbf0/OF1VNE3ekq1M/H/
        fl9k+nL6bVmgwZUfPyQwZvuSR9cvhSjsOMGNu0tl82vVsCzlBR1u1m6KnyOHhCQ6sb7Pecq/z2+F
        Jv7MfHdml/KuPB3gNSwPJGJnLvjxMsuRbeMbXfjaK5301QFeebEnkbE7CGqgpIF5vx9pd24v9uen
        PzCVbgxnHv37PTCqWsjM8/FZcudUnjT3dFvQ5aSPJ72JEafjExfJqky/tlJKsLa4xJy4K0MRHmf1
        Et5qzzbzV4xYHt480FJhU32l+TZl5toBTbIDZpEdtUdXOSY/vfjzH1B3ks4NGFb8JGZs4/TnR8Gv
        PrnWhsZjPN91oC2zPcNwWonh7vEAdVaRYCmcBzbflfkB2pISZny8sR2ztsZw0bqcnW5ybfddXAbw
        OANm6/6NbZFyoqGBzzpm3Ysx/MtXld9LslH7Qzreb90DbRnY5FZluqCdqxYw8qXFrAVeoyWs4wjw
        /prh8V6MdtM158cvH5mN7VvcbYarBUfeZcTH81j0BooTtJMY+W/+9wGYH3yG5U4syrEPDgGcM/uL
        x9Fd2H22vMqQOtqIlePWi0f3Zar6HaVLKoe+mTLtu3N+/gUe8RWX832UNIC+6ZFqz6fWjnvpNcJi
        152ZybOT/ceH6BNrdDlT7m1XesxBeXCtWOhoctnvr/4D1m/bJU4uy/Gg7astULtsqV6qNP7zzyZ9
        h3uYrUq+8j8N/PzleRZ+wr/6dpO7J9u8TTNWPL/x4RxobPLzzzH3+5UCivGVCTkccChu3pBDFUg9
        cdOlaCk/D4m2F5scD8fPDVU/P/m3Xz99MNbJqUHttQqZrzyetkAPR0Zi0Pc0Lm+HcAi7MdeDyj1O
        eFrZf99n3ec+Vi+tUnKNmhK81rMVVhdfZvfByfJ1XJYnqkc8aTksrAQ43G+UT/qBH1etBIdjgjBa
        Rx80PMKU//ljnvbdCDGeGxkmvYVnhEfh6O+aF3Rnd8ucUv+EQ9YWEpAcPfBj6i8Ie5grCA3JffIr
        EOruMvVRG3xUtkmrNKRZW0coINsj+fHt/kW6UXOe+pdg71qjwZqpEfz4mqdvbrGsjkMCpbyzyHri
        i4OkCBnGzcNgN2k2D+XKVBX4rHKXagwzWxjOEaOSLxw8HHKGuqNtHPSB692kpyV7EGK9B0m1N2zT
        L4ZWNOZWQtlmpv7phSZdGRZs5H7DHNasU756GS/d/GjAiPxalXRzPUdIOg4ew1M+jretkUGEao9d
        1tq75PtruP3xN9rGfBEy/xRmSwe53eQf7MLB7RMN0l0m03Gze7RdvJ1ZKONRTCXD9yc9XxfgtqZF
        zCk+hnGa98PmjjBTpt+0//PzlqNC3LkRCU4Ti0Jb71bMJbbUdvfi2sDjLGESwcaz5TGLO5j0LbN2
        JZn8os8eBlWak0nvh/znh7ag7FlYx7T88SUInsWN6m/zGQ8/P2TCQ7yAV5GOpX7cAlvo5OcHonFT
        +1sIJCdnnjOz0mFjNwrURhkx/0EaMflDBrzvr4IdH7d5O/L3dw8funPwoqjWpTBmy8d0whaYjbVn
        KSp2klE2nDeYTf247rSUDX24vRribKeJ70kPw8SPsHTVUdrXsT4iDbQt1uXURSLX3wEw+25S+kie
        rdK6swOon+Md72/Fqx2vVonBXBprlg8P96dXrrrJVJed5G/aiv3xmvz4Bx43O6MdQq04wbfyP+xP
        H18+GdUuSX7GKmx2YRVNJzS9xeNK/G/ThcJXDANUo3gQuzh49rgcKxXMVy4xx1GMUuGNo8HEh5jP
        8SNmzTM7QeNIHBfs+SlFMNyvaOyOCjN71Su7562M9J9/ZHfxNxbvBmG4f32XrWfKvRx3UUbh4Tx1
        Yl22u5g31QaDchkWEx7VtriGnw6S59clRJ/VYtSdpwWMzkPmppYcDq/QDHQnWbzJlJ/2D0/QPArf
        VNmUji2fLmoDlXJQ8dTfSkdzvzZgriQKHn9+Vr51JTTVm6l/VaNxNPQ9CrLZburqHEP223+U0guZ
        +Gw8ftiew/Ni5WTKr5jV6n2Ppv0k61AT4bt30R5Z7yemDZnPbZHxtQNfezqhJugmbBoSVvDy5Q1Z
        2Xcp5Of8sIfk8QhZUJJlW2rfiwNJ70S4J58g7srCN8BrpIRM/V17xFFdIPS9HInhK2HLdUQtJCyL
        ELzcrOLRu+oNrFxyYob+PZevIU63WrdODszr3AvqKlOVIbfSG9k0mdXKX6E70OlaMfVXnbZfD18N
        zDHUyKSvhHiqOtV2eIwIvsibVDTvBaCGHxDZfN+2/Ye3Uz6wzbh+IWojR4GJj2J57bOQP9vUW071
        HxdG2radvhlHCLT6Qc6/frD3Ignctf2MDjxTwg4ftT3oEngb7SNQTONVv9UWp5hgdXF+tMPuo17R
        jy/bzqlv6Yk3e7Q4+keWvQSgYbvzJz4z2LRl1LLzInQjuFh8T8z3wREyGt8veHf+i0TyOMbDfbmy
        YHNTN+xSZyjm6LH3YAxWjPLLirSL9r0MkDl/hcxe3x/pII0JRotiscNjKb/TwUbkhTa7Q/TTw/Ew
        h3UH61gL2Wbav8EcV8EfHvNCvsfi+vEbNPXLGGnpmLa/fPj/mChQ/t8TBY1/2jIvIzYSxepyQolI
        1syAaIhfX3bLQDfHjOFAlPHg0J2KQqzNMP8aaVoekl2nU/B7FnSzA+pxudije3EYCQ6EHS/S5gLw
        eYwv4s0eKB1P6izQ7IuREPeCV+VIGoPDQho7XNfXEQ3he9kh+Ti+2GrOb+VgmxiDMkctsTdFn4pH
        0GEYTHGms64q2pEfKwkSqT+wDY/XaNDytQz++2qw1b7bxdzDiwS+iXEhnn5+ocGOh1y/nRwTi6/R
        lf3661RgHM2QhfLdFMPxWxtw0U4rYleJG46XbTRCz58Ix/l7W7I0+tTItTZPYlX6HDF578sox7M9
        HWzzEfJPehmRYmichNazFsyZJRgOmZlR+Vl1ok3PlKLN4fnFzR2GtLXqoIbwnAX4i02n5Us/B3Rs
        izdxT9XDZtamiKA/aCrWdtYD8WCLZSSSKGe39LZDddtZL31/jdckKF4qai7uhiJ3Hq8J6SqrXdzW
        2QjT9bB8v2n2uFlBgJaVVRCcHNOW+uvZCzmXEyGe4/qxsmpkDo50DpgRXty4+YZ7DSqe9Swqwnla
        BV5HobQGjjVHt+15c4YaDldnTVY04C0P/EsD/XC6EPwcB9RL6zQAK9oZdJQ3hqDvj8SBJ5rLXCNh
        aMTkcQJsaRtaL2+K3R+XZgL+2BCGm7IVv/WFRdo7zA3vHyREkDVwxfhGZ7aaxI2G8wiy6w1T9fGR
        0gahpwapZPYkUuxPOz6dXQfKfNmyEIYwHODce1rnpowEO8tAw9x9KYCd+YPqu8MsZpine60m6zMz
        x28uRJ5IAYyXhYaXVSOjYa71VPsWjwWzj/417f1XswW0Tky26WaePW5p6YCJJ36GKmLTvcspOAtm
        k2DQtbQtnFUGrqceybl7YMEOyYUiZtgOs3qvLmkfFQftXSdrspMotOP1rAJc6tRha+04a2v/VL5g
        iLsrWc9fZitvXusChlMeshuP12KYSQcDLjetIj4MF/Ecl/keNlXWEQ/1Flr0oNRQb7CDlWLR2t01
        zAD8zlqRNZ414Yh4ocywVBK2Ktw9EkYKPvKX+xPxjJdu8/79lkHJfQkr0jFIR2WuThMJC8LM56oS
        /Fkf9mA9Y6Dl5dPaY1kecji+tJzWobRB2etbUpCWxm7Kv6gd4+PVQX6mzElUnopY+PP6Bem9XpL1
        3fkgphbLBhWHBHB7UpkYlcRVwN5fd8T2XysxjldjD0LfXMjptny37T7tKmSvFx7Z4O4sxitbPWCm
        vM4sr5dNSH/3U8zLJ1s3kIfdwZc8JJsaJl5GSsTy9pvArOhMEmrrshRNrUlQakWE51i05TAfeYGO
        1WIgRrNwyvmu3lYwXuuEtrPV1xblkAbaanPsKJiMtzwyZRU0K7fJ+nL1bB7o1wLwNsjomxEeCxcv
        G5Bc6UtWy12NOrvd74E3VkOc1Uhi6h+kBs09LyWrF363nXvzD+j4UnPihJ6wB2Wzs1B7GTsq3O0r
        pI2RysCe6y/V7tt5OJK72YG2+75JJMnPsqarsYB+OFyIQ88V6mcJFFrf5xadHa9RyYWwR7Bedk/c
        /k3L4d44f+uFZ6b9Locm0l9ar3U7QpbB0RZvvx6RrCoRi3zFR43mPQ39/W4S5u+0S9gEnYOhi5QD
        i9bFO+TuSy8QL68lM1t7EIMxkzrUqM0K6/I7DofpfpC9+whchIaJxKm7XSEq9nc8l7tK0EuhWtCb
        RvHDp3Rcvg4nYDtpRSy8kkIRtRz0qh1UOuyvZjncQpOCYfpzsj185bgHPXqBUcE/9WIcbmnw2386
        O3k1ojrpa03btW9mbAoIGQ7QCKPfHwl218+SE2xPHSxji50SGkR/+W6v3CNVyvKTCql3O9Tv1yvi
        0/Ids81j0MCfaTcSfpCwhWL0FsjEz9g65U44nqtAA3FdD3jozEU5xgtGtaDnV2ZdL2XaC9MqQAQS
        ofO7QtEYLz4UCgCP+c9Ya6kZFC+tq+9nPNO/b0S1Xe3AmxlbYlw+FzQeZrEKaIxjPLesoaXLy20L
        Nzmbk4skb2Ph67dxCUuyo0sPb0N290xNfzNrSza7ZyVq425ztAreCKPbrLa5QYoEgqEeiGevilKg
        VtprezK2JLhKrRjmSeIAMbKYZcEjKEepSDT4ZNqGTPxA8C87ZsAYPjLHjvN2KLYog3IIDmSll3tb
        FB2X4XIoKK2Mlx6yz6cswO/1KwV+eYuhVWZXxHf3B3PfoxaOLZlHsNbzkjj27CrGlV5bUF+zmAWv
        vm3H82CCVqYHjZhD5JTDKX6qv/pMKzVaCFF0qoKkOFJJFk5nYG56IEFQHecYMfopB3uZSDCtz6QA
        L3YXbD0Z9mqrUyVSipR9NqED57liM6zuw7ZbqxzreUaebNONedvuzsEeeDvTqWo9z2V/0RIZrVXB
        iP16IjG+tcb6i08fXL2stW3owyorJKqz4yvsV909Q1Lw7RmhbBk2J1vaQ3EbZTojuRkPEh0bmM8/
        MnH2y09LSx1UUJ/Kka2/91KwguAHUs6PBVW2QRWO78f6Bc4qjYj1nPG0d3W0Xb6eWci2yrayBV22
        I3ipUxD30mfxMEbma4nmtoOX510ci+1XeaCSHxViLRtkjxIMB1TTw5et9/FGCEuTVPUb9TcsZuY8
        7bY8sZDZaxHBC3Ftq9rjlbq5RDdmCUrQoGfkqs3aOMVNMRgpxcXhhSx2qOnydVBQ318iD2mrcMWC
        iW806ed6AO3iBXRJb9+Yb15mAd0Nlgy7a7Ptz0kU6a/9fkkMUPu2lXqXQhE1hIT+7RCylZ9p0ISe
        yc4aalrxpsZet9ippoqsHkKhnrUXWvPoyIJzU9vDM9UKSBpFYoYhrcvx9HxUsJp7a2YtwyoWz3dU
        o7l6fLP15VrZ4jCOPsLz8Mz8/epRMncge/Q4Xq9Yd7NvyD/GcAJTvTYkEP4n7U9+IcMWGwk7BT0p
        +/zaOnDdXGbEjwcrnu/fuNPM89YlYcMLe7itFjJsid4yf4czwd3g5qGWbDHLx/nRFp3hV3CCmckc
        jeg23723EkjqRjBziF4t3946Drf8mxLM74uQZ0XxQHnFZiy4b48h705Rhs6XpGAH8rbF8PkmOaBY
        u1PVaZqUMxBXmOIJK/MXT/luRRtErsCJ2+waUa9VFcOONh6W8hzbIi4Tjo4uizAPcJIOA8lymM6D
        YE0vy5i2vm/BYZAV4hb5KR2d4VJATU9fetB5HQ/RPHZgPhsDZnyNNB6ZlBxAnXctltz1sxWAAwmc
        HWrI5ih42G337w6Z573LyFO6h8PGkQsgK+dKsA/XcNTwCcNdlZbM0dAyFtfizX/5Rbzb0i2V+nmx
        ID7PCdUVchDUmpUZPF26w+p+ZbQL6b0toKsKhzi59I5ZtEse0JyfI7FdeKR8w/wX1NNQ8mVzrGO+
        TIMIjKDomTkqXip6UBoIkPVlxu7I2/HHDw8oosT5XsxYjMeYIl2/5MxSTot0eEwnsXMavNjaVxbl
        OI/LAkX2asNWclymQ6D2oN3brmETH0JKO88oSC23WPp+H8NhiesMaYtMIrbLVMHvCo2QMKvzXz7T
        nOeAhrv5xrLqea38SYiGTuKzxoOpxHa3DdQHjNmnJeuHtSnHfjqjcNs8FOJEu0fMjcZSoNIpotn8
        3KajvAwt2GXMJtFGpvH42tYRcm+PjOzgXYUcHfocLVLmkNVV0somrKd8mPZrlcxfIV1nhQztKw6o
        Fr6DVHy96gAf52xTPXeXcZfNTxwOD7r704c9Np8N2ndRRCz1HoTC2TuPX35S/Q5FWRYOyUH/lj4L
        581eDKgvI6iubUycZH0qxePYbmF/3a2Z8bzSdPjkuysMsjIjdqpPEyTFI4dDnFtU/l7MtM/Jy0Dq
        01wwrzzN0OBfSqz75FWRYNjl9nhXwwCsmj6J+/mWaT+ejUZPT7HJwotpld35GL1+fALLq5HFw0Xb
        Kku1HGq6mPgdTxa7CPxHHxEv1vOUWWwmw/CQvhh8pRZsVuAarcq1x1zZaMoRDGePsjcP2HE9r2yR
        LdEBtNV6xexhqFpWubmGqoUjs9hK5zYvjrX1V79C6+mjkSovX3tuMaM8bnEpuJlY6LSSvF/9LIX8
        PSfIWfQ2MwKcxL1tepF2XgwnzOOWthzduwfMdePCVkLex+MueUkabCqMi6uqhkL1L9EytZKW+avu
        VQ78mhYgV2jNPJc1IXNm2whYXWFiryorFIOrHZb8XkRYk8dvytX4ZIFEDk9ifccXGj8z56D98Feq
        dkU7dOuGQtGaNlt7mE98QMdI0Q9btl+GXiq4kmigiFDD6qQv//jsxK+Zt7Z7Mfz060+vjN+3Hg8T
        3kDVChVrdvwMuRrnBpDD4UtniSWHAi6B8cNfFjXAUm4nzED1NY+JoUARi+79cLQpnqnI37wUllh3
        8Dh8ABcJe7bDbsMD3cF2TBxPXiMB2AJoFbzBh8hJED+2QQfo6VOCPxQEi1tX0n78c4OuTzTMk62D
        ojM3SXZ2bmHnLR6jPtUbqi8dW3TFQq81FKt3umjOmc0XtlxD+JRqWmBxjUW+8yWgr8RkK/XdtQVp
        jBEu72/MTP7w0z44bU+65HdXdnELgX78etlp1yvu7XFl013ZWeDSr0kcJw/RwtdvHE18h87i3fKP
        b8CYvVtiPzfq9MCOuaFbL7PHYF/28SjIGv/Vt43lv9M+Oxkc6UlS/vH5/u68JHTcWT4L07NRKtfx
        ksDVkd8YnSJR8sBdcbRk1yvV0dVEw4p9DyiJsoCRbbayeVUlMgqfUDPLew6h2J2tLZr8BKrutIvN
        nO4FMOE9cbEIS35vPwEiNZ4xc+LfbNJvEJ1m02ll2S657Y4jhFvZZted9RB8s8u3Gq23ZzqcugYN
        yA+7n76ny37ow741pzNCrziY/A2CurtSYbRD2vF3vXaxNx1fA0oFHqf8GOtu6+nPxSzFjyl+hqNj
        FD+99qtf7YCpdECTXiY+I2bLve5LUXi53JhLy0PI58Elgctu1Olr/G7DcbssfBic0ifrpRKInvWE
        w+G7a0n79Yx0rmckQXlcr/Ayo2sxjPSMgXszCy8Hd4uGxU6cIDrpJR2SUye6WTBXYFrPqR43MRva
        nQzF/Plkm6h8pmNb1Dl6aJcjc7J6lS4WcbJHE1+cEICEQ/geOvTJFw/i71dGOURNZv3pz1++jBVr
        AFluvWQRMvuQX7mcwXOhp8xczdyWvbc3+PMTPVa/7T6/Tv5K2Svkpx+5OhgHHZl6hgt8eLfDVUIB
        THqIBKc7CtnE7yH/3jjzPnNeMr5dXmEcL+7PHytlu71u4X26eczcX59tc9VwNZ/4zvSMrQjNGd81
        4B78FzM87VDy1ms9zXKbJfHdeZqOhudvYbkPIhaZbNtyZXbdo4eWHqf8g7A/l/YeBlmeMXxSn+HL
        pH0A9eU7/wfv5v4r+/ldBPvbm+hGKVAg+PgxVfL3U4yL+2hBHjcrYissCpU0i7ewTB/OP59vfcMA
        Q1lzsh5cjob97VKgmbd9MOtmBmJ+0bYyLI3Nmrj152uP9vd9+vk3DL/fXjpoccDhe5l1xAtMEQ/3
        u5to7WrxpUtVfadi+5Ue2hv2d9zMOUb84mkNzC/SQOFebsS43/Sq9uPr6kN+C6aex5eWEeBUvc0U
        xLb5IocdUo+MKEXfTvr/oT01FtHHabZPuRo+FB1ltyUzPuUDdbcxVGHpLbbMnvBqnEVXDvR0PPz5
        lYPja1ekdfAgJ/+8a5saLTMUus8VTbT1GI+qds1+eg6Pmf1OO1hX11/9w4tvOxOMpzzTy1X++vMz
        B2VzscBm9Z3lj89D9Ls6qUB63FbMescHmzpPHkDbtxb76aXBOjsnuOlKT0zVO6Y8WVz+0Z8/PvNX
        H4+XT0GVc75uEVrXNczsgmEl1qW0uWwdDptUwmxTvBq7Et9vA96isAme+Dtn51hbTvWb/fTccHs3
        /p/fsQ76hxCHh6eB/gi3lJ9mYzy894EKJfZa3N+3XixoYyV6Wb/Xk59firfyWWawK88hCdbILxcu
        4JMWnUeTogn/5UmfwazdpSzEVdW+M1RvgUpaTiuXBeEYGQRQYu1k5iZFGwu6LDk02udK3Hf8jsfv
        aSct6fxRMT92K3uc9uPnN1DVSJ72A91fBXh8ldO7yZ5oPOL5CS43tWL25L+LcN0dQBqvAR67axfT
        ihUSgINPZLUaH+1wTiIM73edEHdlnG063Y+WnnYms1abTSqUKnqAlUc2y9V9OE0EP1XQQ//AnHO4
        FQN98D08K0WhOiwgbZefWNKVwpwm7I3BFmpTKT+/j035LmTneAigeH5D4p4uScmL48PQM76tSUS3
        IhziVZwAoglQ/ikNofRmuweEviGtJj7ItvksQ9tkerLQ5Jd0YA4RzJTqjH/+54RvANrpdKHS5I93
        5XNRwO/6Gx5/Bc/m+Yj0MDiQqAiPKUtw4cCrTHP2q5fNTnIy9NxLD4z65Ns+hsPa+PObgpK90R8e
        BAEdqSidZzx3dbFF39ng0lZKO8ELS+Zgi0L58cdW9qtIQnA1Z8wK70oppn4NStEOiJ+3cUiPWD/A
        9bn1WKjur/HIN8sRxGwWTP7VKxyWX0OFOclisvm2RcoGQazleQgJVXgVoHF86hl042zOyG1j2pPf
        YYB2pzvmnBcbe5zm6LSf/j389Jh+6w7w9DNr4otO2bemUqDJTyC/ejVqu4eno7npEK8sVym995GH
        0jpySHR9+6k4LQ459OljhhHZF2gYvqCBXC3X7Lc+Qz4PCwirb0d891SV3x/eKYV9pMvJDxaz6yWH
        SxrMiS0VRrl4VZmDpvye8PIrxL5qm7/9wkMYp2I5phaa/DIWefgZDz12DchK64Jn3yEue2i2B3Br
        QyNhxG5pi3m6RQf59SF4f+HpgHy7g7/1elhZKmYFbuB28kyGFyspHvmRAqq614kdxi8PxbXoR5A1
        cacaO46om/iQllf9jAXe5yUEiCZDn0zd4PF+rsXPr9ONevkk66o5IP7zl6M88VkoS6fye5WED5Oe
        IU7Xv8Mhv7YeFPb2TBXUF2g+wMPXV5tzh5fHz9CKrr9tNUOkM/bT08OKPU/6WrElFmprux2NR939
        8h3Tqf/XL+3vFdaKkk3rY8YCvUwHbVfXHX1pmVPS2uMvPd4cBmKOXwl9L7tP9otfsvkUpB2l80UG
        HeUhm/ySWKRkWQDvxhSfJ3473PaSBqG/V3FBpFX81w+8u8sdlSMnEf3T3Dv62X1ExH7QMh5cHe1h
        HtGCPkqH24O5aiSo/UkBnXnz57+CMeQdHbW5b49TfwlVHtfJqnqV5dg2xwYsC/lUCO324zdUX+79
        iNwqJY6HT1gFQJ/NljaTX6XIeVPBpwkyrCV1j/q59u7gUJXa5Pee24GpWNbSeR5P/ss85EvjOwK6
        k4ZW0PrlaJNIhRdve4LznNqDSBtpea7qYcKLuV2Y+/OIJr+brE7G3P7rv17LzYUq268mBHUaFWA2
        T7A65RNvLGOEIaZX4u9SJ51P79f6PrPISskuYohXaQLO0wFmWHUbs6m/C8PN20/PtK5LMWoCw9p7
        vInfJ0k6PuCd//oTk97ZluN13F31cdbGbH31ilgcP8hB2wX1qTx+ud3YxFEhzu8nQjT5hLjzSCNY
        y05LHPvh2WxwtdPPb/m7HyHLp0yb8I+cnd287QtXvqLOaiXK92aH2OQ/Q79qvni5wHY86is1W+4J
        b9lm8tsG9Zl12tktImKsWdk2h1msoYOa6eQWh3VLVW2f6SJaFljyQQubwyzVfvqFcoTD8pc/SwbZ
        a8L3a9v4GzNDU/0iZnlzEH2Nurx8EmfNcqPZIlm+uQ0Q61L9/J548s8yOOXVhtiRMthTfAJQK5OI
        mdUnm/d28o8e+tXH+eUwnIDTnlKlCima8sVDRAss5n+yPvxdT3OvY0vI896kA7Vd+OsnBB97XfIm
        +0Zg75MdM5/CDof7OcEQidTB7fs9t8f1rv3z85mdkX1JF83S+z8TBf/6j//4H79/QajqW/6eBgP6
        fOj//d+jAv++3q7/lmXl768SaHd95P/5X/9MIPznt62rb/8/+/qVf7rp4QXLv1mD/+zr/vr+v1//
        1/RV/+tf/xsAAP//AwDqKHsEhGEAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab5912759062262-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 13:06:37 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - heartex
      openai-processing-ms:
      - '22'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999989'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_2a354ff7bb94b6a9d1e9f8f3126f8335
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nExamples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\nEmotions: {prediction}\n```\n\nHere:\n- \"Examples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\" is input template,\n- \"{prompt}\" is the LLM
      prompt,\n- \"Emotions: {prediction}\" is the output template.\n\nModel can produce
      erroneous output if a prompt is not well defined. In our collaboration, we\u2019ll
      work together to refine a prompt. The process consists of two main steps:\n\n##
      Step 1\nI will provide you with the current prompt along with prediction examples.
      Each example contains the input text, the final prediction produced by the model,
      and the user feedback. User feedback indicates whether the model prediction
      is correct or not. Your task is to analyze the examples and user feedback, determining
      whether the existing instruction is describing the task reflected by these examples
      precisely, and suggests changes to the prompt to address the incorrect predictions.\n\n##
      Step 2\nNext, you will carefully review your reasoning in step 1, integrate
      the insights to refine the prompt, and provide me with the new prompt that improves
      the model\u2019s performance."}, {"role": "assistant", "content": "Sure, I\u2019d
      be happy to help you with this prompt engineering problem. Please provide me
      with the current prompt and the examples with user feedback."}, {"role": "user",
      "content": "\n## Current prompt\nRecognize emotions from text.\n\n## Examples\n###
      Example #0\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am happy\n\nEmotions:
      Labels.happy\n\nUser feedback: Prediction is incorrect. Correct answer: \"happy\"\n\n\n###
      Example #1\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am angry\n\nEmotions:
      Labels.angry\n\nUser feedback: Prediction is incorrect. Correct answer: \"angry\"\n\n\n###
      Example #2\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am sad\n\nEmotions:
      Labels.sad\n\nUser feedback: Prediction is incorrect. Correct answer: \"sad\"\n\n\n\nSummarize
      your analysis about incorrect predictions and suggest changes to the prompt."}],
      "model": "gpt-4o-mini", "max_tokens": 1000, "seed": 47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2576'
      content-type:
      - application/json
      cookie:
      - __cf_bm=o_atXp3IKQGg72hBP8X6QFIN_n4Lknz2wIi_QePY4ts-1722344794-1.0.1.1-phgGbDwjotWAlRo5sTjgu.DRwBpSFjmPabZZ_qEnL4T55ADI5FOcP28y4h.DWEfmC3nh2uOOWBs1wW2wadIz_Q;
        _cfuvid=6mUrlo6cvb9k1f8lEBi6gxr_WQfI3bszevMStBmLANI-1722344794520-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//vJVRbxs3DMff/SkI5aEbYBuOYyCN34qhRQJ0XdEWRbvdkMgS706JTryI
        uthuEGBfY1+vn6SQTudzhu11MGDYkkj9+aNIPk4AhNFiDULVMqimtbOL++r+9tvtb7+++Srvtl+W
        X27fXn59de8v737vPotptKDNLaowWM0VNa3FYMj128qjDBi9np4vl2er1fnFedpoSKONZlUbZiua
        NcaZ2XKxXM0W57PTl9m6JqOQxRr+mAAAPKbvqNNp3Ik1LKbDSoPMskKxPhwCEJ5sXBGS2XCQLojp
        uKnIBXRJ+snJCbxy0u7ZMFAJV06R96gCvPeojYrxcOEK96lGUJ336AK0npo2TKEQH1BR5cw3BGwo
        nYXSUwMBd2FaCDAMgQgeZNUhSKdBEzI4Sj4ejEZQFqUH4zj4rr8NyEFNWwg1QmIFXFNnNZTkGxnA
        BAbqQtuFOURVuJORPMdj0UqGI1PD8SbdKeOqbMVgXDqR/RXirdyg5fljjuGpEFPY1kbV0TyK3Q5O
        O0YPuGtRBe5vTyslot5IdQfGaaNkQB51DDyl4y16HoJh07R2DxtMh/LNMTa0JfyE82oe+daybfdR
        TiGkq3z+yVIX4mfYmlBT199yCKIQ0HoszW4+ZC2BeBE5HBIK0iOYQ6o3qGTHCCYMAZdkLW0js6Qu
        BYw6AxzAST7Eq2GzHwENOHpC/WsZM88tKlPuR0LZawbzDyI2hgXSksMpWJQ6iSJQ5MqOEzM35vsF
        g0duyTGm+OPz/thVFXLU+EstXRVzQ8nifRKWMBGYJr5IfOaqRZ9CdQqnaSOHMiptyCc81igTQG6G
        dPw7sTlcosfvf/3NICEmyaGGB/QpDCqPrlj34uEdbkeZ4kqjCxFdrKTs+ZgV7lqPzKgHJrEMD89E
        un1+GshAHqTWJppJm+UF46p5IQZuH/DBRF+v+/qCj6lCO4/9szouu0jDYyPztSwbnMImq3sOTVnp
        ++z/N6VBwRsTxQ06Bg43NzeF+19QuMLl4DklJH7e0Rb80PXS6ifchTVcgWygL1f3OvfC9bDw7FBf
        yEeH8sKzQ7HEj46kvynwCN/EV95DyXBTF7X7Qx/loxYY6NBsjwlpE2vf7odWl/NTo20jM2lN5YYG
        MBREBh0xHrdCmVTORZ4wT4fRZKlqPW3iGHOdtYf10jjD9bVHyeTiGOJAbW/+NAH4M43A7tlUE32k
        14Hu0EWHq4tl70+Mk3fcPTvNA1IECtKOGy8Xy0mWKHjPAZvr0rgKfetNPxLL9npRLs70qlwgisnT
        5AcAAAD//wMAXTpaXyAIAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab59129bb0e22c2-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 13:06:42 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '4409'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149998435'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_bedb3c4b1217923516761778dd01d18d
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nExamples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\nEmotions: {prediction}\n```\n\nHere:\n- \"Examples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\" is input template,\n- \"{prompt}\" is the LLM
      prompt,\n- \"Emotions: {prediction}\" is the output template.\n\nModel can produce
      erroneous output if a prompt is not well defined. In our collaboration, we\u2019ll
      work together to refine a prompt. The process consists of two main steps:\n\n##
      Step 1\nI will provide you with the current prompt along with prediction examples.
      Each example contains the input text, the final prediction produced by the model,
      and the user feedback. User feedback indicates whether the model prediction
      is correct or not. Your task is to analyze the examples and user feedback, determining
      whether the existing instruction is describing the task reflected by these examples
      precisely, and suggests changes to the prompt to address the incorrect predictions.\n\n##
      Step 2\nNext, you will carefully review your reasoning in step 1, integrate
      the insights to refine the prompt, and provide me with the new prompt that improves
      the model\u2019s performance."}, {"role": "assistant", "content": "Sure, I\u2019d
      be happy to help you with this prompt engineering problem. Please provide me
      with the current prompt and the examples with user feedback."}, {"role": "user",
      "content": "\n## Current prompt\nRecognize emotions from text.\n\n## Examples\n###
      Example #0\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am happy\n\nEmotions:
      Labels.happy\n\nUser feedback: Prediction is incorrect. Correct answer: \"happy\"\n\n\n###
      Example #1\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am angry\n\nEmotions:
      Labels.angry\n\nUser feedback: Prediction is incorrect. Correct answer: \"angry\"\n\n\n###
      Example #2\n\nExamples:\n\n\n\nNow recognize:\n\nText: I am sad\n\nEmotions:
      Labels.sad\n\nUser feedback: Prediction is incorrect. Correct answer: \"sad\"\n\n\n\nSummarize
      your analysis about incorrect predictions and suggest changes to the prompt."},
      {"role": "assistant", "content": "### Analysis of Incorrect Predictions\n\nThe
      current prompt, \"Recognize emotions from text,\" is too vague and does not
      provide clear instructions on how the model should format its output. The examples
      show that the model is producing outputs in the format \"Labels.{emotion}\",
      which is not what the user expects. The user feedback indicates that the correct
      answers should simply be the emotion itself (e.g., \"happy\", \"angry\", \"sad\")
      without the \"Labels.\" prefix.\n\nThe model''s predictions are incorrect because
      it is not following the expected output format as indicated by the user feedback.
      The prompt does not specify that the output should be the emotion label alone,
      leading to confusion in the model''s response.\n\n### Suggested Changes to the
      Prompt\n\nTo improve the model''s performance, the prompt should be more explicit
      about the expected output format. Here\u2019s a refined version of the prompt:\n\n##
      New Prompt\n\"Identify and output the emotion expressed in the text without
      any prefixes or additional formatting.\"\n\n### Revised Example Structure\nThe
      examples should remain the same, but the prompt should clarify the expected
      output format. \n\n### Final Revised Prompt\n```\nIdentify and output the emotion
      expressed in the text without any prefixes or additional formatting.\n\nExamples:\n\n\n\nNow
      recognize:\n\nText: I am happy\nEmotions: happy\n\nText: I am angry\nEmotions:
      angry\n\nText: I am sad\nEmotions: sad\n```\n\nThis revised prompt clearly instructs
      the model to provide the emotion directly, which should help in aligning the
      model''s output with user expectations."}, {"role": "user", "content": "\nNow
      please carefully review your reasoning in Step 1 and help with Step 2: refining
      the prompt.\n\n## Current prompt\nRecognize emotions from text.\n\n## Follow
      this guidance to refine the prompt:\n\n1. The new prompt should should describe
      the task precisely, and address the points raised in the user feedback.\n\n2.
      The new prompt should be similar to the current prompt, and only differ in the
      parts that address the issues you identified in Step 1.\n    Example:\n    -
      Current prompt: \"Generate a summary of the input text.\"\n    - New prompt:
      \"Generate a summary of the input text. Pay attention to the original style.\"\n\n3.
      Reply only with the new prompt. Do not include input and output templates in
      the prompt.\n"}], "model": "gpt-4o-mini", "max_tokens": 1000, "seed": 47, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '4991'
      content-type:
      - application/json
      cookie:
      - __cf_bm=o_atXp3IKQGg72hBP8X6QFIN_n4Lknz2wIi_QePY4ts-1722344794-1.0.1.1-phgGbDwjotWAlRo5sTjgu.DRwBpSFjmPabZZ_qEnL4T55ADI5FOcP28y4h.DWEfmC3nh2uOOWBs1wW2wadIz_Q;
        _cfuvid=6mUrlo6cvb9k1f8lEBi6gxr_WQfI3bszevMStBmLANI-1722344794520-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//VJFLT8MwEITv+RUrn5sqDaGvKxeQQELiBkKVG28Sg+117Q20VP3vyOkL
        Lj7M+FvPrPcZgNBKLEHUneTaepMvNu2GNh+3Xy/zIj6vVXhcf93PX/Ep3v3ci1EiaP2BNZ+pcU3W
        G2RN7mjXASVjmjqZleVNVc2LcjAsKTQJaz3nFeVWO52XRVnlxSyfzE90R7rGKJbwlgEA7Icz5XQK
        t2IJxeisWIxRtiiWl0sAIpBJipAx6sjSsRhdzZocoxuiPyh0rJsdSKeAevY9A3cIaClVAdz6gDGi
        Au0Gg3HL8K25o55Buh34gI3eYgQKIJXSCZMGGgpWMmvXjsXp5cMlsqHWB1qneq435qI32unYrQLK
        SC7Fi0z+iB8ygPdhNf2/tsIHsp5XTJ/o0sDFdHKcJ64/cnUn05PJxNL8oWaz7JRQxF1ktKtGuxaD
        D/q4qcaviqa4UVVTIIrskP0CAAD//wMAdX/4KTcCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab59147ac0f22c2-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 13:06:43 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '385'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149997866'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_f8172406a449882267fc9c4f48ca452e
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Text: I am happy", "Text: I am angry", "Text: I am sad"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '133'
      content-type:
      - application/json
      cookie:
      - __cf_bm=9vQb2SGKB2hIYVZkmz_1I.WSVRZE82NmWNDGw75y.jM-1722344795-1.0.1.1-N7pDdK8RjKWr2bL2UiVjWEtmYFLahjc2jlMdqv5VWaB.b4XtgN67eyCtI3zh7NQS2M5gjAZ6585Way61Crd.eQ;
        _cfuvid=0DsiKSluQLBu5ArXMAuPx25vAq.d7FcmYN4oxiywSNw-1722344795554-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        1v/35/9a/+p//ut/AQAA//8DAOooewSEYQAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab5914d6b6e2c74-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 13:06:43 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - heartex
      openai-processing-ms:
      - '25'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999989'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_543cf532f2152a05886b5bf562687db7
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Identify and output the emotion
      expressed in the text without any prefixes or additional formatting."}, {"role":
      "user", "content": "Examples:\n\nText: I am happy\nEmotions: happy\n\nText:
      I am sad\nEmotions: sad\n\nNow recognize:\n\nText: I am happy"}], "model": "gpt-4o-mini",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["happy", "sad", "angry", "neutral"], "title": "Labels",
      "type": "string"}}, "properties": {"prediction": {"allOf": [{"$ref": "#/$defs/Labels"}],
      "description": "The classification label"}}, "required": ["prediction"], "type":
      "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '890'
      content-type:
      - application/json
      cookie:
      - __cf_bm=o_atXp3IKQGg72hBP8X6QFIN_n4Lknz2wIi_QePY4ts-1722344794-1.0.1.1-phgGbDwjotWAlRo5sTjgu.DRwBpSFjmPabZZ_qEnL4T55ADI5FOcP28y4h.DWEfmC3nh2uOOWBs1wW2wadIz_Q;
        _cfuvid=6mUrlo6cvb9k1f8lEBi6gxr_WQfI3bszevMStBmLANI-1722344794520-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xS22rbQBB911cs82wV2VISV28pLnGh9BIIoY2D2KxG0jZ7s3YU4hr/e1lZsRTT
        fViGOXsuzOw+YgxkCTkD0XAS2qn447beupubMl1nP8vfnz/JL6vux9/XrW/Eyx3MAsM+/UFBb6wP
        wmqnkKQ1R1i0yAmD6vxqsUizbJmkPaBtiSrQakdxZmMtjYwXySKLk6t4vhzYjZUCPeTsIWKMsX1/
        h5ymxFfIWTJ762j0ntcI+ekRY9BaFTrAvZeeuCGYjaCwhtCE6KZTagKQtaoQXKnR+Hj2k3ocFleq
        uE2f7y7XX/G+ufx1u56vdssVv/6mXyZ+R+md6wNVnRGnIU3wUz8/M2MMDNc993tHrqMzJmPA27rT
        aCikhv0GXIul7NU2kG+g4c7tNnCAd7xD9L/6cagOp/EqW7vWPvmzaUEljfRN0SL3fWrwZN3RIsg9
        9mvs3m0GXGu1o4LsM5ogOE+HNcL4e0b0YsDIEldT0kU0BAS/84S6qKSpsXWt7JcKlSuSKknLrEoQ
        ITpE/wAAAP//AwAXoX734gIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab5914f7c9422c2-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 13:06:44 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '148'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149998945'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_2e7e457868adfc60256d64920758c1d0
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Identify and output the emotion
      expressed in the text without any prefixes or additional formatting."}, {"role":
      "user", "content": "Examples:\n\nText: I am angry\nEmotions: angry\n\nText:
      I am sad\nEmotions: sad\n\nNow recognize:\n\nText: I am angry"}], "model": "gpt-4o-mini",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["happy", "sad", "angry", "neutral"], "title": "Labels",
      "type": "string"}}, "properties": {"prediction": {"allOf": [{"$ref": "#/$defs/Labels"}],
      "description": "The classification label"}}, "required": ["prediction"], "type":
      "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '890'
      content-type:
      - application/json
      cookie:
      - __cf_bm=o_atXp3IKQGg72hBP8X6QFIN_n4Lknz2wIi_QePY4ts-1722344794-1.0.1.1-phgGbDwjotWAlRo5sTjgu.DRwBpSFjmPabZZ_qEnL4T55ADI5FOcP28y4h.DWEfmC3nh2uOOWBs1wW2wadIz_Q;
        _cfuvid=6mUrlo6cvb9k1f8lEBi6gxr_WQfI3bszevMStBmLANI-1722344794520-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xS32vbMBB+918h7jkeceI5qd/KEsrYw8ZgjK0pRnEUW6mkU6RzWxPyvw85buyG
        6UEc9+n7wZ1OEWMgd5AzKGtOpbYqvjtWx+PLvXYH/HO4/5ngyrz+feW/vrSrtoZJYOD2IEp6Z30q
        UVslSKK5wKUTnERQTRaz2TxNl9O0AzTuhAq0ylKcYqylkfFsOkvj6SJOlj27RlkKDzl7jBhj7NTd
        IafZiTfI2XTy3tHCe14JyK+PGAOHKnSAey89cUMwGcASDQkToptGqRFAiKoouVKD8eWcRvUwLK5U
        kR1/19Xaf16sHtLl27evP9R87fFlPfK7SLe2C7RvTHkd0gi/9vMbM8bAcN1xvzdkG7phMgbcVY0W
        hkJqOG3AOrGTndoG8g1wU7l2A2f4wDtH/6uf+up8Ha/Cyjrc+ptpwV4a6evCCe671OAJ7cUiyD11
        a2w+bAasQ22pIHwWJggm836NMPyeAc16jJC4GpOyqA8IvvUkdLGXphLOOtktFfa2yJJkm2WLbXIH
        0Tn6BwAA//8DAPHtFSXiAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab5915358f822c2-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 13:06:44 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '302'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149998945'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_c1b2bf20ee295e0b7ea2ddf9348daa44
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Identify and output the emotion
      expressed in the text without any prefixes or additional formatting."}, {"role":
      "user", "content": "Examples:\n\nText: I am sad\nEmotions: sad\n\nText: I am
      angry\nEmotions: angry\n\nNow recognize:\n\nText: I am sad"}], "model": "gpt-4o-mini",
      "max_tokens": 1000, "seed": 47, "temperature": 0.0, "tool_choice": {"type":
      "function", "function": {"name": "Output"}}, "tools": [{"type": "function",
      "function": {"name": "Output", "description": "Correctly extracted `Output`
      with all the required parameters with correct types", "parameters": {"$defs":
      {"Labels": {"enum": ["happy", "sad", "angry", "neutral"], "title": "Labels",
      "type": "string"}}, "properties": {"prediction": {"allOf": [{"$ref": "#/$defs/Labels"}],
      "description": "The classification label"}}, "required": ["prediction"], "type":
      "object"}}}]}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '888'
      content-type:
      - application/json
      cookie:
      - __cf_bm=o_atXp3IKQGg72hBP8X6QFIN_n4Lknz2wIi_QePY4ts-1722344794-1.0.1.1-phgGbDwjotWAlRo5sTjgu.DRwBpSFjmPabZZ_qEnL4T55ADI5FOcP28y4h.DWEfmC3nh2uOOWBs1wW2wadIz_Q;
        _cfuvid=6mUrlo6cvb9k1f8lEBi6gxr_WQfI3bszevMStBmLANI-1722344794520-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2xSS2/bMAy++1cIPNeDEztr61tbrB126Q7DLkthqDZta5VFRaK2uUH+++BHEzeo
        DgLBT98DpPaREKAqyAWUreSyszq+3jU794f6/mtoK+5392HzcOfl529ffgSGi4FBz7+x5DfWp5I6
        q5EVmQkuHUrGQXV1uV6nWXaVbEagowr1QGssxxnFnTIqXifrLE4u49XVzG5JleghF78iIYTYj/eQ
        01T4D3KRXLx1OvReNgj58ZEQ4EgPHZDeK8/STJlnsCTDaIboJmi9AJhIF6XU+mQ8nf2iPg1Lal38
        bNKMMX397lNLrXu8/XtPN9WrWfhN0r0dA9XBlMchLfBjPz8zEwKM7EbuY2Ab+IwpBEjXhA4ND6lh
        vwXrsFKj2hbyLXhZbeEA71iH6KP6aa4Ox+FqaqyjZ382K6iVUb4tHEo/ZgbPZCeLQe5pXGJ4txew
        jjrLBdMLmkFwlc5LhNPfOaGbGWNiqZekTTQHBN97xq6olWnQWafGlUJti6RO0iqrE0SIDtF/AAAA
        //8DAJ8+kv3gAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab59156fcfd22c2-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 13:06:45 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '583'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149998945'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_fa6eafebc38444a0cc21f2bf24eef587
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Text: I am happy", "Text: I am angry", "Text: I am sad"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '133'
      content-type:
      - application/json
      cookie:
      - __cf_bm=9vQb2SGKB2hIYVZkmz_1I.WSVRZE82NmWNDGw75y.jM-1722344795-1.0.1.1-N7pDdK8RjKWr2bL2UiVjWEtmYFLahjc2jlMdqv5VWaB.b4XtgN67eyCtI3zh7NQS2M5gjAZ6585Way61Crd.eQ;
        _cfuvid=0DsiKSluQLBu5ArXMAuPx25vAq.d7FcmYN4oxiywSNw-1722344795554-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        9lf//df/AAAA//8DAOooewSEYQAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab5915cdb6c2c74-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 13:06:46 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - heartex
      openai-processing-ms:
      - '24'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '10000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '9999989'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_20879422fae7baef8c36fdb08c7dca94
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nExamples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\nEmotions: {prediction}\n```\n\nHere:\n- \"Examples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\" is input template,\n- \"{prompt}\" is the LLM
      prompt,\n- \"Emotions: {prediction}\" is the output template.\n\nModel can produce
      erroneous output if a prompt is not well defined. In our collaboration, we\u2019ll
      work together to refine a prompt. The process consists of two main steps:\n\n##
      Step 1\nI will provide you with the current prompt along with prediction examples.
      Each example contains the input text, the final prediction produced by the model,
      and the user feedback. User feedback indicates whether the model prediction
      is correct or not. Your task is to analyze the examples and user feedback, determining
      whether the existing instruction is describing the task reflected by these examples
      precisely, and suggests changes to the prompt to address the incorrect predictions.\n\n##
      Step 2\nNext, you will carefully review your reasoning in step 1, integrate
      the insights to refine the prompt, and provide me with the new prompt that improves
      the model\u2019s performance."}, {"role": "assistant", "content": "Sure, I\u2019d
      be happy to help you with this prompt engineering problem. Please provide me
      with the current prompt and the examples with user feedback."}, {"role": "user",
      "content": "\n## Current prompt\nIdentify and output the emotion expressed in
      the text without any prefixes or additional formatting.\n\n## Examples\n###
      Example #0\n\nExamples:\n\nText: I am happy\nEmotions: happy\n\nText: I am sad\nEmotions:
      sad\n\nNow recognize:\n\nText: I am happy\n\nEmotions: Labels.happy\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"happy\"\n\n\n### Example
      #1\n\nExamples:\n\nText: I am angry\nEmotions: angry\n\nText: I am sad\nEmotions:
      sad\n\nNow recognize:\n\nText: I am angry\n\nEmotions: Labels.angry\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"angry\"\n\n\n### Example
      #2\n\nExamples:\n\nText: I am sad\nEmotions: sad\n\nText: I am angry\nEmotions:
      angry\n\nNow recognize:\n\nText: I am sad\n\nEmotions: Labels.sad\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"sad\"\n\n\n\nSummarize your analysis
      about incorrect predictions and suggest changes to the prompt."}], "model":
      "gpt-4o-mini", "max_tokens": 1000, "seed": 47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2845'
      content-type:
      - application/json
      cookie:
      - __cf_bm=o_atXp3IKQGg72hBP8X6QFIN_n4Lknz2wIi_QePY4ts-1722344794-1.0.1.1-phgGbDwjotWAlRo5sTjgu.DRwBpSFjmPabZZ_qEnL4T55ADI5FOcP28y4h.DWEfmC3nh2uOOWBs1wW2wadIz_Q;
        _cfuvid=6mUrlo6cvb9k1f8lEBi6gxr_WQfI3bszevMStBmLANI-1722344794520-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6RVzW7jRgy++ykI5dIGsuE43nXqW5tusQmaxQIbBAXqIhjPUNJsRjOTIWVbXQTo
        a+zr9UmK0Y9lZ40e2osO5JD8+PGj+GUEkGiVLCGRhWBZejP+4Tl/poc7ef3z4qeHzcNvd256e/t0
        O6Vf/N0sSWOEW39GyX3URLrSG2TtbOuWAQVjzHqxmM0u5/Or6dvGUTqFJoblnsdzNy611ePZdDYf
        Txfji6suunBaIiVL+H0EAPCl+UacVuEuWcI07S0lEokck+X+EUASnImWRBBpYmE5SQendJbRNtDP
        zs7gRytMTZrAZXBjpQsBJcPHgErL2A+t7MreFwiyCgEtgw+u9AzaEodKMgEXCE1bwA5WyY1Cyzqr
        QVgFrmJfcfMESxfzAe58QCJUoG3jYNwxbDUXrmIQtgYfMNM7JHABhFI6hgkDmQulYNY2n6wSeO+2
        uMGQtrl3IvJPEdxGK1RAhdsCF4IP4GkC6WykBC2buslt8+ZBWxJWya9ijYZiAXa9JzKBqm+A4Duc
        5JN0eFwI7+tVcmARNg/HFhJqlXw/gftCE2irtBSMdAKhdQyZM8Zte2w905E8dqcoPUXepJ9bRRgg
        Q1RrIZ8iiSCMGRiTBkUwNRAfA/KDAkCEiKLXxhqlqAi/hS1UgaFB3VIX8LnSAcuoGpd1s4l+0VS1
        XSsTuLHEKFR89Lki7uzcE9C3uef9gPADpluK02Ncwnu0TdETs23rpLAttCz6LrYDA43QyaPUme4Y
        jSvzqcpzpCiJ60LYPLLW5vvYRDTEu6iuqPN2hEQVxvYGbJ349lp/BekQQOEqo2AdCd3ouDjsAEtf
        CNJ/4jdMNxN+RfB7DPj3X18JBMR6FhVsMFAktQPV1lq2LcIH3A7N/LeNnsA7S1XAQVFdpKajYM2E
        JktPajgF04ws/bc/wTCVshShjg11Y1nZiwmcn18bETTX5+dLuH+1TpqgFArbJcAA6zo2Y7TU3K1E
        q5z/AW4WIbxrp0U9htfzOqCHXZw0OYOmPiaKhqE3EgioKokgyrXOK811t/Ga9jM+FlCBxkNeaYXH
        v2wfXJMoGvsd78C0vYCgSAvGv+Ak6S7Jy/4EGZf74NbxXNnKmL0901ZT8RhQkLPx3BA734a/jAD+
        aE5ddXS9khbxI7sntDHhm7dXbb5kuLCD93K66LzsWJjBcbV4M+ogJlQTY/mYaZtj8EG3py/zj9Ns
        eqnm2RQxGb2M/gEAAP//AwAtfGLACAgAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab5915e4cc022c2-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 13:06:52 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '5792'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149998370'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_092b74163dbc6d5091558519f9a1f3fb
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "\nA prompt is a text paragraph that outlines the
      expected actions and instructs the large language model (LLM) to generate a
      specific output. This prompt is concatenated with the input text, and the model
      then creates the required output.\nThis describes the full template how the
      prompt is concatenated with the input to produce the output:\n\n```\n\n{prompt}\nExamples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\nEmotions: {prediction}\n```\n\nHere:\n- \"Examples:\n\n{examples}\n\nNow
      recognize:\n\nText: {input}\" is input template,\n- \"{prompt}\" is the LLM
      prompt,\n- \"Emotions: {prediction}\" is the output template.\n\nModel can produce
      erroneous output if a prompt is not well defined. In our collaboration, we\u2019ll
      work together to refine a prompt. The process consists of two main steps:\n\n##
      Step 1\nI will provide you with the current prompt along with prediction examples.
      Each example contains the input text, the final prediction produced by the model,
      and the user feedback. User feedback indicates whether the model prediction
      is correct or not. Your task is to analyze the examples and user feedback, determining
      whether the existing instruction is describing the task reflected by these examples
      precisely, and suggests changes to the prompt to address the incorrect predictions.\n\n##
      Step 2\nNext, you will carefully review your reasoning in step 1, integrate
      the insights to refine the prompt, and provide me with the new prompt that improves
      the model\u2019s performance."}, {"role": "assistant", "content": "Sure, I\u2019d
      be happy to help you with this prompt engineering problem. Please provide me
      with the current prompt and the examples with user feedback."}, {"role": "user",
      "content": "\n## Current prompt\nIdentify and output the emotion expressed in
      the text without any prefixes or additional formatting.\n\n## Examples\n###
      Example #0\n\nExamples:\n\nText: I am happy\nEmotions: happy\n\nText: I am sad\nEmotions:
      sad\n\nNow recognize:\n\nText: I am happy\n\nEmotions: Labels.happy\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"happy\"\n\n\n### Example
      #1\n\nExamples:\n\nText: I am angry\nEmotions: angry\n\nText: I am sad\nEmotions:
      sad\n\nNow recognize:\n\nText: I am angry\n\nEmotions: Labels.angry\n\nUser
      feedback: Prediction is incorrect. Correct answer: \"angry\"\n\n\n### Example
      #2\n\nExamples:\n\nText: I am sad\nEmotions: sad\n\nText: I am angry\nEmotions:
      angry\n\nNow recognize:\n\nText: I am sad\n\nEmotions: Labels.sad\n\nUser feedback:
      Prediction is incorrect. Correct answer: \"sad\"\n\n\n\nSummarize your analysis
      about incorrect predictions and suggest changes to the prompt."}, {"role": "assistant",
      "content": "### Analysis of Incorrect Predictions\n\nThe current prompt instructs
      the model to \"Identify and output the emotion expressed in the text without
      any prefixes or additional formatting.\" However, the examples provided show
      that the model is consistently adding the prefix \"Labels.\" to the predicted
      emotions (e.g., \"Labels.happy\", \"Labels.angry\", \"Labels.sad\"). This indicates
      that the model is not following the instruction to output the emotion without
      any prefixes.\n\nThe user feedback for all examples clearly states that the
      predictions are incorrect because the model is not adhering to the requirement
      of providing a clean output. Instead of just outputting the emotion (e.g., \"happy\",
      \"angry\", \"sad\"), the model is appending \"Labels.\" to the output, which
      is not what the prompt specifies.\n\n### Suggested Changes to the Prompt\n\nTo
      address the issue of the model adding prefixes to the output, the prompt should
      be revised to emphasize the requirement for a clean output. Here\u2019s a refined
      version of the prompt:\n\n## New Prompt\n\"Identify and output the emotion expressed
      in the text. Ensure that the output is the emotion itself, without any prefixes,
      labels, or additional formatting.\"\n\n### Summary of Changes\n1. **Clarity**:
      The instruction is made clearer by explicitly stating \"without any prefixes,
      labels, or additional formatting.\"\n2. **Emphasis**: The requirement for the
      output to be solely the emotion is emphasized to reduce ambiguity.\n\nThis refined
      prompt should help guide the model to produce the correct output format as expected."},
      {"role": "user", "content": "\nNow please carefully review your reasoning in
      Step 1 and help with Step 2: refining the prompt.\n\n## Current prompt\nIdentify
      and output the emotion expressed in the text without any prefixes or additional
      formatting.\n\n## Follow this guidance to refine the prompt:\n\n1. The new prompt
      should should describe the task precisely, and address the points raised in
      the user feedback.\n\n2. The new prompt should be similar to the current prompt,
      and only differ in the parts that address the issues you identified in Step
      1.\n    Example:\n    - Current prompt: \"Generate a summary of the input text.\"\n    -
      New prompt: \"Generate a summary of the input text. Pay attention to the original
      style.\"\n\n3. Reply only with the new prompt. Do not include input and output
      templates in the prompt.\n"}], "model": "gpt-4o-mini", "max_tokens": 1000, "seed":
      47, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '5307'
      content-type:
      - application/json
      cookie:
      - __cf_bm=o_atXp3IKQGg72hBP8X6QFIN_n4Lknz2wIi_QePY4ts-1722344794-1.0.1.1-phgGbDwjotWAlRo5sTjgu.DRwBpSFjmPabZZ_qEnL4T55ADI5FOcP28y4h.DWEfmC3nh2uOOWBs1wW2wadIz_Q;
        _cfuvid=6mUrlo6cvb9k1f8lEBi6gxr_WQfI3bszevMStBmLANI-1722344794520-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.34.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.34.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.5
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//VJFPj5swEMXvfIqRzxABi5JNzu2hh0r9d1lVVWRgAG+Nx+sZtEGrfPfK
        wCbdiw/z5jd67/ktAVCmVSdQzaClGb3Nji/9y1yap09f9ffqlfvn+Vv7M39i+yv8sCqNBNXP2Mg7
        tWto9BbFkFvlJqAWjFeLQ1k+VNVjUS7CSC3aiPVesoqy0TiTlXlZZfkhKx43eiDTIKsT/E4AAN6W
        N/p0LV7UCfL0fTIis+5RnW5LACqQjROlmQ2LdqLSu9iQE3SL9S8tOjHdDNq1QJP4SUAGBBwpRgG8
        +IDM2IJxiyB4kR18djwFBBn0ur6Rhj/ARhhtl8KrkYEmAe1m8AE7c0FOweoaLadAAXTbmkhoCx2F
        UYsY1+/U5vh6i2qp94HqWIubrL3NO+MMD+eAmsnFWCzkV/yaAPxZKp0+tKR8oNHLWegvuniwyKtq
        PajuX3mXy+MmCom2/2OHh2TzqHhmwfHcGddj8MGsHXf+vC+Ker8/1MVRJdfkHwAAAP//AwAuVa42
        cQIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8ab59183780022c2-ORD
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 30 Jul 2024 13:06:52 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - heartex
      openai-processing-ms:
      - '540'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15552000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149997786'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_4f36a1308b1fcf0813a56fd9101fe8fa
    status:
      code: 200
      message: OK
version: 1
